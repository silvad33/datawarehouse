/*
Deployment script for IonisDW_6

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "IonisDW_6"
:setvar DefaultFilePrefix "IonisDW_6"
:setvar DefaultDataPath "C:\Users\rcrook\AppData\Local\Microsoft\VisualStudio\SSDT\IonisDW"
:setvar DefaultLogPath "C:\Users\rcrook\AppData\Local\Microsoft\VisualStudio\SSDT\IonisDW"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367)) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Rename refactoring operation with key 125490c8-d030-4f9b-a27d-2f00ea89f8eb is skipped, element [dbo].[DimFinancialCalendar].[FiscalPeriod_Key] (SqlSimpleColumn) will not be renamed to [FiscalPeriodKey]';


GO
PRINT N'Rename refactoring operation with key 06a77b99-f7dd-49cf-b102-fe6d0b91787a is skipped, element [dbo].[FactTransaction].[FiscalPeriod_Key] (SqlSimpleColumn) will not be renamed to [FiscalPeriodKey]';


GO
PRINT N'Creating [clinical]...';


GO
CREATE SCHEMA [clinical]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [financial]...';


GO
CREATE SCHEMA [financial]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [financial_mart]...';


GO
CREATE SCHEMA [financial_mart]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [mdr]...';


GO
CREATE SCHEMA [mdr]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [pubs]...';


GO
CREATE SCHEMA [pubs]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [research]...';


GO
CREATE SCHEMA [research]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [shared]...';


GO
CREATE SCHEMA [shared]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [shared_mart]...';


GO
CREATE SCHEMA [shared_mart]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [clinical].[StudyClinicalSiteCROs]...';


GO
CREATE TABLE [clinical].[StudyClinicalSiteCROs] (
    [StartDate]               DATETIME       NULL,
    [EndDate]                 DATETIME       NULL,
    [SiteCROStatus]           VARCHAR (2000) NULL,
    [StudyClinicalSiteCROsID] INT            IDENTITY (1, 1) NOT NULL,
    [ClinicalStudySitesID]    INT            NOT NULL,
    [ClinicalOrganizationID]  INT            NOT NULL,
    CONSTRAINT [PK_StudyClinicalSiteCROs] PRIMARY KEY CLUSTERED ([StudyClinicalSiteCROsID] ASC)
);


GO
PRINT N'Creating [clinical].[StudyPerformanceMetrics]...';


GO
CREATE TABLE [clinical].[StudyPerformanceMetrics] (
    [ClinicalStudyName]         VARCHAR (256) NULL,
    [MetricStatus]              VARCHAR (50)  NULL,
    [Metric]                    VARCHAR (256) NULL,
    [StudyPerformanceMetricsID] INT           IDENTITY (1, 1) NOT NULL,
    [ClinicalStudyID]           INT           NOT NULL,
    [CurrentDate]               DATETIME      NULL,
    CONSTRAINT [PK_StudyPerformanceMetrics] PRIMARY KEY CLUSTERED ([StudyPerformanceMetricsID] ASC)
);


GO
PRINT N'Creating [clinical].[SiteSubjectRecruitment]...';


GO
CREATE TABLE [clinical].[SiteSubjectRecruitment] (
    [PatientRecruitmentDate]   DATETIME       NULL,
    [NumberofSubjects]         DECIMAL (8, 2) NULL,
    [SiteSubjectRecruitmentID] INT            IDENTITY (1, 1) NOT NULL,
    [ScenarioStudySitesID]     INT            NOT NULL,
    CONSTRAINT [PK_SiteSubjectRecruitment] PRIMARY KEY CLUSTERED ([SiteSubjectRecruitmentID] ASC)
);


GO
PRINT N'Creating [clinical].[ScenarioStudySites]...';


GO
CREATE TABLE [clinical].[ScenarioStudySites] (
    [SiteCountry]          VARCHAR (50) NULL,
    [SiteInitiationDate]   DATETIME     NULL,
    [ScenerioSiteName]     VARCHAR (50) NULL,
    [ActualSite]           BIT          NULL,
    [ScenarioStudySitesID] INT          IDENTITY (1, 1) NOT NULL,
    [StudyRecruitmentID]   INT          NOT NULL,
    [ClinicalStudySitesID] INT          NULL,
    CONSTRAINT [PK_ScenarioStudySites] PRIMARY KEY CLUSTERED ([ScenarioStudySitesID] ASC)
);


GO
PRINT N'Creating [clinical].[StudySiteActivation]...';


GO
CREATE TABLE [clinical].[StudySiteActivation] (
    [CurrentDate]           DATETIME      NULL,
    [FirstSiteActualDate]   DATETIME      NULL,
    [FirstSitePlannedDate]  DATETIME      NULL,
    [ClinicalStudyName]     VARCHAR (256) NULL,
    [StudySiteActivationID] INT           IDENTITY (1, 1) NOT NULL,
    [ClinicalStudyID]       INT           NULL,
    CONSTRAINT [PK_StudySiteActivation] PRIMARY KEY CLUSTERED ([StudySiteActivationID] ASC)
);


GO
PRINT N'Creating [clinical].[ClinicalOrganization]...';


GO
CREATE TABLE [clinical].[ClinicalOrganization] (
    [ClinicalOrganizationType] VARCHAR (2000) NULL,
    [ClinicalOrganizationID]   INT            IDENTITY (1, 1) NOT NULL,
    [VeevaID]                  VARCHAR (255)  NULL,
    CONSTRAINT [PK_ClinicalOrganization] PRIMARY KEY CLUSTERED ([ClinicalOrganizationID] ASC)
);


GO
PRINT N'Creating [clinical].[StudySitePerformance]...';


GO
CREATE TABLE [clinical].[StudySitePerformance] (
    [ClinicalStudyName]      VARCHAR (256) NULL,
    [ClinicalSiteNumber]     INT           NULL,
    [CurrentDate]            DATETIME      NULL,
    [EnrollmentPlanToDate]   INT           NULL,
    [EnrollmentActualToDate] INT           NULL,
    [ActualsPctToPlan]       FLOAT (53)    NULL,
    [UnderPerformingSIte]    VARCHAR (50)  NULL,
    [OverPerformingSite]     VARCHAR (50)  NULL,
    [StudySitePerformanceID] INT           IDENTITY (1, 1) NOT NULL,
    [ClinicalStudySitesID]   INT           NULL,
    CONSTRAINT [PK_StudySitePerformance] PRIMARY KEY CLUSTERED ([StudySitePerformanceID] ASC)
);


GO
PRINT N'Creating [clinical].[ClinicalStudy]...';


GO
CREATE TABLE [clinical].[ClinicalStudy] (
    [ClinicalStudyName]  VARCHAR (2000) NULL,
    [Description]        VARCHAR (2000) NULL,
    [Status]             VARCHAR (2000) NULL,
    [Phase]              VARCHAR (2000) NULL,
    [ClinicalStudyID]    INT            IDENTITY (1, 1) NOT NULL,
    [Indication]         VARCHAR (2000) NULL,
    [ClinicalProgramsID] INT            NULL,
    [ETMFStatus]         VARCHAR (2000) NULL,
    [ShortDescription]   VARCHAR (250)  NULL,
    [CTMSStatus]         VARCHAR (50)   NULL,
    CONSTRAINT [PK_ClinicalStudy] PRIMARY KEY CLUSTERED ([ClinicalStudyID] ASC)
);


GO
PRINT N'Creating [clinical].[ClinicalSite]...';


GO
CREATE TABLE [clinical].[ClinicalSite] (
    [ClinicalSiteNumber] INT NULL,
    [ClinicalSiteID]     INT IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_ClinicalSite] PRIMARY KEY CLUSTERED ([ClinicalSiteID] ASC)
);


GO
PRINT N'Creating [clinical].[PersonSiteRoles]...';


GO
CREATE TABLE [clinical].[PersonSiteRoles] (
    [StartDate]            DATETIME       NULL,
    [EndDate]              DATETIME       NULL,
    [Role]                 VARCHAR (2000) NULL,
    [PersonSiteRolesID]    INT            IDENTITY (1, 1) NOT NULL,
    [ClinicalSitePersonID] INT            NOT NULL,
    [ClinicalStudySitesID] INT            NOT NULL,
    CONSTRAINT [PK_PersonSiteRoles] PRIMARY KEY CLUSTERED ([PersonSiteRolesID] ASC)
);


GO
PRINT N'Creating [clinical].[ClinicalStudySites]...';


GO
CREATE TABLE [clinical].[ClinicalStudySites] (
    [StartDate]            DATETIME       NULL,
    [EndDate]              DATETIME       NULL,
    [Status]               VARCHAR (2000) NULL,
    [ClinicalStudySitesID] INT            IDENTITY (1, 1) NOT NULL,
    [ClinicalSiteID]       INT            NOT NULL,
    [ClinicalStudyID]      INT            NOT NULL,
    [SiteInitiationDate]   DATETIME       NULL,
    CONSTRAINT [PK_ClinicalStudySites] PRIMARY KEY CLUSTERED ([ClinicalStudySitesID] ASC)
);


GO
PRINT N'Creating [clinical].[ClinicalSitePerson]...';


GO
CREATE TABLE [clinical].[ClinicalSitePerson] (
    [Speciality]           VARCHAR (2000) NULL,
    [SubSpeciality]        VARCHAR (2000) NULL,
    [ProviderIdentifier]   VARCHAR (2000) NULL,
    [Comments]             VARCHAR (2000) NULL,
    [MdmID]                VARCHAR (500)  NULL,
    [ClinicalSitePersonID] INT            NOT NULL,
    CONSTRAINT [PK_ClinicalSitePerson] PRIMARY KEY CLUSTERED ([ClinicalSitePersonID] ASC)
);


GO
PRINT N'Creating [clinical].[ClinicalStudyCohorts]...';


GO
CREATE TABLE [clinical].[ClinicalStudyCohorts] (
    [CohortTitle]                VARCHAR (50) NULL,
    [CohortDosage]               INT          NULL,
    [CohortDoseUnits]            VARCHAR (50) NULL,
    [NumberOfSubjects]           INT          NULL,
    [EnrollmentPlannedStartDate] DATETIME     NULL,
    [ClinicalStudyCohortsID]     INT          IDENTITY (1, 1) NOT NULL,
    [ClinicalStudyID]            INT          NULL,
    CONSTRAINT [PK_ClinicalStudyCohorts] PRIMARY KEY CLUSTERED ([ClinicalStudyCohortsID] ASC)
);


GO
PRINT N'Creating [clinical].[ScenarioBuilderInput]...';


GO
CREATE TABLE [clinical].[ScenarioBuilderInput] (
    [ClinicalStudy]            VARCHAR (1000) NULL,
    [BaselinePlan]             VARCHAR (256)  NULL,
    [ScenarioName]             VARCHAR (1000) NULL,
    [NumberofSites]            INT            NULL,
    [NumberofPatients]         INT            NULL,
    [Country]                  VARCHAR (255)  NULL,
    [ActivationDate]           DATE           NULL,
    [ScreeningsPerSiteMonth]   INT            NULL,
    [ScreenFailRatePct]        DECIMAL (2)    NULL,
    [SiteActivationLag]        INT            NULL,
    [PatientRunIn]             INT            NULL,
    [EarlyTermPct]             DECIMAL (2)    NULL,
    [ScenarioComments]         VARCHAR (MAX)  NULL,
    [EnrollmentsPerSiteMonth]  INT            NULL,
    [RandomizationRatePct]     DECIMAL (2)    NULL,
    [ScenarioBuilderID]        INT            IDENTITY (1, 1) NOT NULL,
    [EnrollmentCompletionDate] DATE           NULL,
    CONSTRAINT [PK_ScenarioBuilderID] PRIMARY KEY NONCLUSTERED ([ScenarioBuilderID] ASC)
);


GO
PRINT N'Creating [clinical].[ScenarioBuilderOutput]...';


GO
CREATE TABLE [clinical].[ScenarioBuilderOutput] (
    [ScenarioName]            NVARCHAR (1000) NULL,
    [Status]                  NVARCHAR (1000) NULL,
    [StatusDate]              DATETIME        NULL,
    [ScenarioSiteName]        NVARCHAR (50)   NULL,
    [ActualSite]              INT             NULL,
    [PatientRecruitmentDate]  DATETIME        NULL,
    [NumberofSubjects]        NUMERIC (18, 2) NULL,
    [ClinicalStudy]           NVARCHAR (1000) NULL,
    [ScenarioBuilderOutputID] INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_ScenarioBuilderOutput] PRIMARY KEY CLUSTERED ([ScenarioBuilderOutputID] ASC)
);


GO
PRINT N'Creating [clinical].[ClinicalPrograms]...';


GO
CREATE TABLE [clinical].[ClinicalPrograms] (
    [ProgramName]        VARCHAR (50) NULL,
    [Compound]           VARCHAR (50) NULL,
    [Franchise]          VARCHAR (50) NULL,
    [Indication]         VARCHAR (50) NULL,
    [ClinicalProgramsID] INT          IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_ClinicalPrograms] PRIMARY KEY CLUSTERED ([ClinicalProgramsID] ASC)
);


GO
PRINT N'Creating [clinical].[StudySiteActuals]...';


GO
CREATE TABLE [clinical].[StudySiteActuals] (
    [TotalSubjectsScreened]      INT          NULL,
    [MonthYear]                  DATETIME     NULL,
    [TotalScreenFailures]        INT          NULL,
    [TotalSubjectsEnrolled]      INT          NULL,
    [ClinicalStudy]              VARCHAR (50) NULL,
    [ClinicalSiteNumber]         VARCHAR (50) NULL,
    [ClinicalSiteCountry]        VARCHAR (50) NULL,
    [TotalSubjectStudyCompleted] INT          NULL,
    [TotalSubjectsEarlyDropout]  INT          NULL,
    [StudyCohort]                VARCHAR (50) NULL,
    [StudySiteActualsID]         INT          IDENTITY (1, 1) NOT NULL,
    [TotalSubjectEarlyTerm]      INT          NULL,
    [TotalSubjectsInScreening]   INT          NULL,
    CONSTRAINT [PK_StudySiteActuals] PRIMARY KEY CLUSTERED ([StudySiteActualsID] ASC)
);


GO
PRINT N'Creating [clinical].[StudySiteRecruitment]...';


GO
CREATE TABLE [clinical].[StudySiteRecruitment] (
    [SiteRecruitmentDate]    DATETIME NULL,
    [NumberofSites]          INT      NULL,
    [StudySiteRecruitmentID] INT      IDENTITY (1, 1) NOT NULL,
    [StudyRecruitmentID]     INT      NULL,
    CONSTRAINT [PK_StudySiteRecruitment] PRIMARY KEY CLUSTERED ([StudySiteRecruitmentID] ASC)
);


GO
PRINT N'Creating [clinical].[StudyRecruitment]...';


GO
CREATE TABLE [clinical].[StudyRecruitment] (
    [ScenarioName]       VARCHAR (2500) NULL,
    [Status]             VARCHAR (50)   NULL,
    [StatusDate]         DATETIME       NULL,
    [ClinicalStudyID]    INT            NULL,
    [PlanType]           VARCHAR (50)   NULL,
    [StudyRecruitmentID] INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_StudyRecruitment] PRIMARY KEY CLUSTERED ([StudyRecruitmentID] ASC)
);


GO
PRINT N'Creating [clinical].[StudyAnnotations]...';


GO
CREATE TABLE [clinical].[StudyAnnotations] (
    [Annotations]        VARCHAR (8000) NULL,
    [AnnotationType]     VARCHAR (50)   NULL,
    [StudyAnnotationsID] INT            IDENTITY (1, 1) NOT NULL,
    [StudyRecruitmentID] INT            NULL,
    [CommentDate]        DATE           NULL,
    CONSTRAINT [PK_StudyAnnotations] PRIMARY KEY CLUSTERED ([StudyAnnotationsID] ASC)
);


GO
PRINT N'Creating [clinical].[ScenarioParameters]...';


GO
CREATE TABLE [clinical].[ScenarioParameters] (
    [Annotations]            VARCHAR (5000) NULL,
    [SiteActivationLag]      INT            NULL,
    [SubjectRunInDuration]   INT            NULL,
    [SubjectScreensPerMonth] INT            NULL,
    [ScreenFailureRate]      INT            NULL,
    [EarlyTermination_pct]   INT            NULL,
    [RandomizationRate_pct]  INT            NULL,
    [TotalSubjectsRequired]  INT            NULL,
    [ScenarioParametersID]   INT            IDENTITY (1, 1) NOT NULL,
    [StudyRecruitmentID]     INT            NOT NULL,
    [PlanLevel]              VARCHAR (50)   NULL,
    CONSTRAINT [PK_ScenarioParameters] PRIMARY KEY CLUSTERED ([ScenarioParametersID] ASC)
);


GO
PRINT N'Creating [clinical].[RecruitmentScenarios]...';


GO
CREATE TABLE [clinical].[RecruitmentScenarios] (
    [ScenarioName]           VARCHAR (2500) NULL,
    [Status]                 VARCHAR (50)   NULL,
    [StatusDate]             DATETIME       NULL,
    [SiteCountry]            VARCHAR (50)   NULL,
    [ScenarioSiteName]       VARCHAR (50)   NULL,
    [ActualSite]             BIT            NULL,
    [PatientRecruitmentDate] DATETIME       NULL,
    [NumberofSubjects]       DECIMAL (8, 2) NULL,
    [ClinicalStudyName]      VARCHAR (50)   NULL,
    [RecruitmentScenariosID] INT            IDENTITY (1, 1) NOT NULL,
    [ScenarioParametersID]   INT            NULL,
    [StudyAnnotationsID]     INT            NULL,
    CONSTRAINT [PK_RecruitmentScenarios] PRIMARY KEY CLUSTERED ([RecruitmentScenariosID] ASC)
);


GO
PRINT N'Creating [clinical].[IVRSData]...';


GO
CREATE TABLE [clinical].[IVRSData] (
    [SubjectNumber]              INT          NULL,
    [SubjectDOB]                 DATETIME     NULL,
    [SubjectGender]              VARCHAR (50) NULL,
    [ScreeningDate]              DATETIME     NULL,
    [ScreeningPass]              BIT          NULL,
    [SubjectEnrollmentDate]      DATETIME     NULL,
    [SiteScreeningNumber]        VARCHAR (50) NULL,
    [SubjectDiscontinuationDate] DATETIME     NULL,
    [SubjectStudyCompletion]     BIT          NULL,
    [IVRSDataID]                 INT          IDENTITY (1, 1) NOT NULL,
    [ClinicalStudySitesID]       INT          NULL,
    CONSTRAINT [PK_IVRSData] PRIMARY KEY CLUSTERED ([IVRSDataID] ASC)
);


GO
PRINT N'Creating [clinical].[CTMSData]...';


GO
CREATE TABLE [clinical].[CTMSData] (
    [SubjectNumber]                  INT           NULL,
    [ScreeningDate]                  DATETIME      NULL,
    [ScreeningPass]                  BIT           NULL,
    [SubjectEnrollmentDate]          DATETIME      NULL,
    [SiteScreeningNumber]            VARCHAR (50)  NULL,
    [SubjectDiscontinuationDate]     DATETIME      NULL,
    [SubjectStudyCompleted]          BIT           NULL,
    [CTMSStatus]                     VARCHAR (50)  NULL,
    [ScreenFailureReason]            VARCHAR (500) NULL,
    [RandomizationDate]              DATETIME      NULL,
    [BaselineDate]                   DATETIME      NULL,
    [StudyDiscontinuationDate]       DATETIME      NULL,
    [StudyDiscontinuationReason]     VARCHAR (500) NULL,
    [TreatmentCompletionDate]        DATETIME      NULL,
    [TreatmentDiscontinuationDate]   DATETIME      NULL,
    [TreatmentDiscontinuationReason] VARCHAR (500) NULL,
    [SubjectTreatmentCompleted]      BIT           NULL,
    [CTMSDataID]                     INT           IDENTITY (1, 1) NOT NULL,
    [ClinicalStudySitesID]           INT           NULL,
    [ClinicalStudyCohortsID]         INT           NULL,
    CONSTRAINT [PK_CTMSData] PRIMARY KEY CLUSTERED ([CTMSDataID] ASC)
);


GO
PRINT N'Creating [clinical].[ClinicalStudyMilestones]...';


GO
CREATE TABLE [clinical].[ClinicalStudyMilestones] (
    [PlannedRandomizationNumber]      INT          NULL,
    [PlannedStudyStartDate]           DATETIME     NULL,
    [PlannedEnrollmentStartDate]      DATETIME     NULL,
    [PlannedEnrollmentCompletionDate] DATETIME     NULL,
    [PlannedDBLockDate]               DATETIME     NULL,
    [PlannedFinalCSRDate]             DATETIME     NULL,
    [PlannedSiteNumber]               INT          NULL,
    [ActualStudyStartDate]            DATETIME     NULL,
    [Actual EnrollmentStartDate]      DATETIME     NULL,
    [ActualEnrollmentCompletionDate]  DATETIME     NULL,
    [ActualDBLockDate]                DATETIME     NULL,
    [ActualFinalCSRDate]              DATETIME     NULL,
    [ActualSiteNumber]                INT          NULL,
    [ExpectedScreenFailureRate]       INT          NULL,
    [ExpectedEarlyTermRate]           INT          NULL,
    [LinkedProjectManager]            VARCHAR (50) NULL,
    [SubjectRunInDuration]            INT          NULL,
    [RandomizationRate]               INT          NULL,
    [ClinicalStudyMilestonesID]       INT          IDENTITY (1, 1) NOT NULL,
    [ClinicalStudyID]                 INT          NULL,
    CONSTRAINT [PK_ClinicalStudyMilestones] PRIMARY KEY CLUSTERED ([ClinicalStudyMilestonesID] ASC)
);


GO
PRINT N'Creating [mdr].[BIViewInfo]...';


GO
CREATE TABLE [mdr].[BIViewInfo] (
    [ID]             INT            IDENTITY (1, 1) NOT NULL,
    [DBName]         VARCHAR (50)   NOT NULL,
    [SchemaName]     VARCHAR (50)   NOT NULL,
    [ViewName]       VARCHAR (100)  NOT NULL,
    [NewViewName]    VARCHAR (100)  NULL,
    [ViewType]       VARCHAR (50)   NULL,
    [ViewCategory]   VARCHAR (50)   NULL,
    [NumRows]        INT            NULL,
    [Description]    VARCHAR (300)  NULL,
    [ETLNotes]       VARCHAR (8000) NULL,
    [HasPK]          VARCHAR (3)    NULL,
    [IncludeExclude] CHAR (1)       NULL,
    [LoadMethod]     CHAR (10)      NULL,
    [ColCount]       INT            NULL,
    [PopColCount]    INT            NULL,
    [DependencyID]   BIGINT         NULL,
    CONSTRAINT [PK_BIViewInfo] PRIMARY KEY CLUSTERED ([DBName] ASC, [SchemaName] ASC, [ViewName] ASC)
);


GO
PRINT N'Creating [mdr].[BIViewDistinctValues]...';


GO
CREATE TABLE [mdr].[BIViewDistinctValues] (
    [ID]           INT           IDENTITY (1, 1) NOT NULL,
    [DBName]       VARCHAR (50)  NULL,
    [SchemaName]   VARCHAR (50)  NULL,
    [ViewName]     VARCHAR (500) NULL,
    [ColumnName]   VARCHAR (100) NULL,
    [ColValue]     VARCHAR (200) NULL,
    [ViewColumnID] NCHAR (10)    NULL,
    [ValueCount]   INT           NULL
);


GO
PRINT N'Creating [mdr].[BIViewColumnInfo]...';


GO
CREATE TABLE [mdr].[BIViewColumnInfo] (
    [ID]                 INT            IDENTITY (1, 1) NOT NULL,
    [DBName]             VARCHAR (50)   NOT NULL,
    [SchemaName]         VARCHAR (50)   NULL,
    [ViewName]           VARCHAR (100)  NOT NULL,
    [ColumnName]         VARCHAR (100)  NOT NULL,
    [ColOrder]           INT            NULL,
    [NewColumnName]      VARCHAR (100)  NULL,
    [DataType]           VARCHAR (50)   NULL,
    [ChangeDateFlag]     CHAR (1)       NULL,
    [Length]             INT            NULL,
    [Scale]              INT            NULL,
    [Precision]          INT            NULL,
    [Description]        VARCHAR (300)  NULL,
    [ETLNotes]           VARCHAR (8000) NULL,
    [DistinctValueCount] INT            NULL,
    [NullRowsCount]      INT            NULL,
    [NullPCT]            DECIMAL (5, 2) NULL,
    [PKSeq]              INT            NULL,
    [MaxVal]             VARCHAR (200)  NULL,
    [MinVal]             VARCHAR (200)  NULL,
    [KeySeq]             INT            NULL,
    [DestDataType]       VARCHAR (50)   NULL,
    [IncludeExclude]     CHAR (1)       NULL,
    [ColumnCount]        INT            NULL,
    [CommonColumnID]     VARCHAR (50)   NULL,
    [Object_id]          VARCHAR (50)   NULL,
    [ViewID]             INT            NULL,
    CONSTRAINT [PK_BIColumnViewInfo] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [mdr].[BITableInfo]...';


GO
CREATE TABLE [mdr].[BITableInfo] (
    [ID]                      INT            IDENTITY (1, 1) NOT NULL,
    [DBName]                  VARCHAR (50)   NOT NULL,
    [SchemaName]              VARCHAR (50)   NOT NULL,
    [TableName]               VARCHAR (500)  NOT NULL,
    [NewTableName]            VARCHAR (500)  NULL,
    [TableType]               VARCHAR (50)   NULL,
    [TableCategory]           VARCHAR (50)   NULL,
    [NumRows]                 INT            NULL,
    [Description]             VARCHAR (300)  NULL,
    [ETLNotes]                VARCHAR (8000) NULL,
    [HasPK]                   VARCHAR (3)    NULL,
    [IncludeExclude]          CHAR (1)       NULL,
    [LoadMethod]              CHAR (10)      NULL,
    [ColCount]                INT            NULL,
    [PopColCount]             INT            NULL,
    [ParentInConstraintCount] INT            NULL,
    [ChildInConstraintCount]  INT            NULL,
    [MaxDate]                 DATE           NULL,
    [NumberOfDependencies]    INT            NULL,
    CONSTRAINT [PK_BITableInfo] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [mdr].[BIForeignKeyInfo]...';


GO
CREATE TABLE [mdr].[BIForeignKeyInfo] (
    [DBName]           VARCHAR (500) NOT NULL,
    [SchemaName]       VARCHAR (500) NULL,
    [name]             VARCHAR (500) NOT NULL,
    [childtable]       VARCHAR (500) NOT NULL,
    [childcolumnname]  VARCHAR (500) NULL,
    [parenttable]      VARCHAR (500) NOT NULL,
    [parentcolumnname] VARCHAR (500) NULL
);


GO
PRINT N'Creating [mdr].[BIFindDistinctValues]...';


GO
CREATE TABLE [mdr].[BIFindDistinctValues] (
    [ID]         INT           IDENTITY (1, 1) NOT NULL,
    [DBName]     VARCHAR (50)  NULL,
    [SchemaName] VARCHAR (50)  NULL,
    [TableName]  VARCHAR (50)  NULL,
    [ColumnName] VARCHAR (50)  NULL,
    [ColValue]   VARCHAR (200) NULL
);


GO
PRINT N'Creating [mdr].[BIDistinctValues]...';


GO
CREATE TABLE [mdr].[BIDistinctValues] (
    [ID]         INT           IDENTITY (1, 1) NOT NULL,
    [DBName]     VARCHAR (50)  NULL,
    [SchemaName] VARCHAR (50)  NULL,
    [TableName]  VARCHAR (100) NULL,
    [ColumnName] VARCHAR (100) NULL,
    [ColValue]   VARCHAR (200) NULL,
    [ValueCount] INT           NULL,
    [ColumnID]   INT           NULL
);


GO
PRINT N'Creating [mdr].[BIDependencies]...';


GO
CREATE TABLE [mdr].[BIDependencies] (
    [DBname]               VARCHAR (50)   NOT NULL,
    [ObjectID]             BIGINT         NULL,
    [ObjectName]           [sysname]      NOT NULL,
    [ObjectType]           NVARCHAR (60)  NULL,
    [ReferencedObject]     [sysname]      NOT NULL,
    [ReferencedObjectType] NVARCHAR (60)  NULL,
    [ReferencedField]      NVARCHAR (128) NULL,
    [SelectAll]            BIT            NOT NULL,
    [Updated]              BIT            NOT NULL,
    [SelectSpecific]       BIT            NOT NULL
);


GO
PRINT N'Creating [mdr].[BIColumnInfo]...';


GO
CREATE TABLE [mdr].[BIColumnInfo] (
    [ID]                 INT            IDENTITY (1, 1) NOT NULL,
    [DBName]             VARCHAR (50)   NOT NULL,
    [SchemaName]         VARCHAR (50)   NOT NULL,
    [TableName]          VARCHAR (500)  NOT NULL,
    [ColumnName]         VARCHAR (100)  NOT NULL,
    [ColOrder]           INT            NULL,
    [NewColumnName]      VARCHAR (100)  NULL,
    [DataType]           VARCHAR (50)   NULL,
    [ChangeDateFlag]     CHAR (1)       NULL,
    [Length]             INT            NULL,
    [Scale]              INT            NULL,
    [Precision]          INT            NULL,
    [Description]        VARCHAR (300)  NULL,
    [ETLNotes]           VARCHAR (8000) NULL,
    [DistinctValueCount] INT            NULL,
    [NullRowsCount]      INT            NULL,
    [NullPCT]            DECIMAL (5, 2) NULL,
    [PKSeq]              INT            NULL,
    [MaxVal]             VARCHAR (200)  NULL,
    [MinVal]             VARCHAR (200)  NULL,
    [KeySeq]             INT            NULL,
    [DestDataType]       VARCHAR (50)   NULL,
    [IncludeExclude]     CHAR (1)       NULL,
    [ColumnCount]        INT            NULL,
    [CommonColumnID]     VARCHAR (50)   NULL,
    [MaxDate]            DATE           NULL,
    [TableID]            INT            NULL,
    CONSTRAINT [PK_BIColumnInfo] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [mdr].[RSMLogit]...';


GO
CREATE TABLE [mdr].[RSMLogit] (
    [RunTS]        DATETIME      NOT NULL,
    [RunProcess]   VARCHAR (100) NULL,
    [RunUser]      VARCHAR (100) NULL,
    [RunInt1]      INT           NULL,
    [RunIntName1]  VARCHAR (100) NULL,
    [RunInt2]      INT           NULL,
    [RunIntName2]  VARCHAR (100) NULL,
    [RunInt3]      INT           NULL,
    [RunIntName3]  VARCHAR (100) NULL,
    [RunChar1]     VARCHAR (100) NULL,
    [RunCharName1] VARCHAR (100) NULL,
    [RunChar2]     VARCHAR (100) NULL,
    [RunCharName2] VARCHAR (100) NULL,
    [RunChar3]     VARCHAR (100) NULL,
    [RunCharName3] VARCHAR (100) NULL,
    [RunDate1]     DATE          NULL,
    [RunDateName1] VARCHAR (100) NULL,
    [RunDate2]     DATE          NULL,
    [RunDateName2] VARCHAR (100) NULL,
    [RunDate3]     DATE          NULL,
    [RunDateName3] VARCHAR (100) NULL
);


GO
PRINT N'Creating [mdr].[DataEntityFields]...';


GO
CREATE TABLE [mdr].[DataEntityFields] (
    [Name]                 NVARCHAR (255) NULL,
    [Public]               NVARCHAR (255) NULL,
    [PublicCollectionName] NVARCHAR (255) NULL,
    [StagingTable]         NVARCHAR (255) NULL,
    [EntityCategory]       NVARCHAR (255) NULL,
    [TableGroup]           NVARCHAR (255) NULL,
    [Field_Name]           NVARCHAR (255) NULL,
    [Field_Binding]        NVARCHAR (255) NULL,
    [D365Table]            NVARCHAR (255) NULL
);


GO
PRINT N'Creating [mdr].[DataEntities]...';


GO
CREATE TABLE [mdr].[DataEntities] (
    [Name]                 NVARCHAR (255) NULL,
    [DataSource]           NVARCHAR (255) NULL,
    [Public]               NVARCHAR (255) NULL,
    [PublicCollectionName] NVARCHAR (255) NULL,
    [StagingTable]         NVARCHAR (255) NULL,
    [EntityCategory]       NVARCHAR (255) NULL,
    [TableGroup]           NVARCHAR (255) NULL,
    [Fields]               NVARCHAR (MAX) NULL
);


GO
PRINT N'Creating [research].[Compounds]...';


GO
CREATE TABLE [research].[Compounds] (
    [CompoundNumber]   INT      NOT NULL,
    [ISISCreationDate] DATETIME NULL,
    [DateCreated]      DATETIME NULL,
    PRIMARY KEY CLUSTERED ([CompoundNumber] ASC)
);


GO
PRINT N'Creating [research].[CompoundGeneTerms]...';


GO
CREATE TABLE [research].[CompoundGeneTerms] (
    [CompoundNumber]      VARCHAR (50)   NULL,
    [CompoundTerm]        VARCHAR (50)   NULL,
    [CompoundTermType]    VARCHAR (50)   NULL,
    [CompoundTermStatus]  VARCHAR (50)   NULL,
    [EnsemblID]           VARCHAR (50)   NULL,
    [Species]             VARCHAR (50)   NULL,
    [TargetType]          VARCHAR (50)   NULL,
    [TargetObsolete]      BIT            NULL,
    [GeneTerm]            VARCHAR (1000) NULL,
    [GeneTermType]        VARCHAR (50)   NULL,
    [GeneTermStatus]      VARCHAR (50)   NULL,
    [CompoundGeneTermsID] INT            IDENTITY (1, 1) NOT NULL
);


GO
PRINT N'Creating [research].[CompoundGeneTerms].[idx_CompoundTerm_CompoundGeneTerms]...';


GO
CREATE NONCLUSTERED INDEX [idx_CompoundTerm_CompoundGeneTerms]
    ON [research].[CompoundGeneTerms]([CompoundTerm] ASC);


GO
PRINT N'Creating [research].[CompoundGeneTerms].[idx_CompoundNumber_CompoundGeneTerms]...';


GO
CREATE NONCLUSTERED INDEX [idx_CompoundNumber_CompoundGeneTerms]
    ON [research].[CompoundGeneTerms]([CompoundNumber] ASC);


GO
PRINT N'Creating [research].[CompoundGeneTerms].[idx_EnsemblID_CompoundGeneTerms]...';


GO
CREATE NONCLUSTERED INDEX [idx_EnsemblID_CompoundGeneTerms]
    ON [research].[CompoundGeneTerms]([EnsemblID] ASC);


GO
PRINT N'Creating [research].[CompoundGeneTerms].[idx_GeneTerm_CompoundGeneTerms]...';


GO
CREATE NONCLUSTERED INDEX [idx_GeneTerm_CompoundGeneTerms]
    ON [research].[CompoundGeneTerms]([GeneTerm] ASC);


GO
PRINT N'Creating [research].[GeneNames]...';


GO
CREATE TABLE [research].[GeneNames] (
    [EnsemblID]      VARCHAR (50)   NULL,
    [GeneName]       VARCHAR (1000) NULL,
    [Species]        VARCHAR (50)   NULL,
    [GeneNameStatus] VARCHAR (50)   NULL,
    [DateCreated]    DATETIME       NULL,
    [DateModified]   DATETIME       NULL,
    [GeneNamesID]    INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_GeneNames] PRIMARY KEY CLUSTERED ([GeneNamesID] ASC)
);


GO
PRINT N'Creating [research].[CompoundNames]...';


GO
CREATE TABLE [research].[CompoundNames] (
    [CompoundName]       VARCHAR (50) NULL,
    [CompoundNameType]   VARCHAR (50) NULL,
    [CompoundNameStatus] VARCHAR (50) NULL,
    [DateCreated]        DATETIME     NULL,
    [DateModified]       DATETIME     NULL,
    [CompoundNamesID]    INT          IDENTITY (1, 1) NOT NULL,
    [CompoundNumber]     INT          NULL,
    CONSTRAINT [PK_CompoundNames] PRIMARY KEY CLUSTERED ([CompoundNamesID] ASC)
);


GO
PRINT N'Creating [research].[CompoundGenes]...';


GO
CREATE TABLE [research].[CompoundGenes] (
    [EnsemblID]       VARCHAR (50) NULL,
    [Species]         VARCHAR (50) NULL,
    [SpeciesName]     VARCHAR (50) NULL,
    [TargetType]      VARCHAR (50) NULL,
    [ReleaseNum]      INT          NULL,
    [Obsolete]        BIT          NULL,
    [DateCreated]     DATETIME     NULL,
    [DateModified]    DATETIME     NULL,
    [CompoundGenesID] INT          IDENTITY (1, 1) NOT NULL,
    [CompoundNumber]  INT          NULL
);


GO
PRINT N'Creating [research].[MTIDGenes]...';


GO
CREATE TABLE [research].[MTIDGenes] (
    [MTID]         VARCHAR (50) NOT NULL,
    [EnsemblID]    VARCHAR (50) NOT NULL,
    [DateModified] DATETIME     NULL,
    [DateCreated]  DATETIME     NULL
);


GO
PRINT N'Creating [research].[GeneSymbols]...';


GO
CREATE TABLE [research].[GeneSymbols] (
    [EnsemblID]        VARCHAR (50)  NULL,
    [GeneSymbol]       VARCHAR (500) NULL,
    [Species]          VARCHAR (50)  NULL,
    [GeneSymbolStatus] VARCHAR (50)  NULL,
    [DateCreated]      DATETIME      NULL,
    [DateModified]     DATETIME      NULL,
    [GeneSymbolsID]    INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_GeneSymbols] PRIMARY KEY CLUSTERED ([GeneSymbolsID] ASC)
);


GO
PRINT N'Creating [shared].[LocationInfo]...';


GO
CREATE TABLE [shared].[LocationInfo] (
    [LocationType]   VARCHAR (2000) NULL,
    [LocationInfoID] INT            IDENTITY (1, 1) NOT NULL,
    [PersonID]       INT            NULL,
    [ClinicalSiteID] INT            NULL,
    [OrganizationID] INT            NULL,
    CONSTRAINT [PK_LocationInfo] PRIMARY KEY CLUSTERED ([LocationInfoID] ASC)
);


GO
PRINT N'Creating [shared].[PhoneNumber]...';


GO
CREATE TABLE [shared].[PhoneNumber] (
    [CountryCode]    INT          NULL,
    [AreaCode]       INT          NULL,
    [Number]         VARCHAR (50) NULL,
    [Extension]      INT          NULL,
    [StartDate]      DATETIME     NULL,
    [EndDate]        DATETIME     NULL,
    [PhoneNumberID]  INT          IDENTITY (1, 1) NOT NULL,
    [LocationInfoID] INT          NOT NULL,
    CONSTRAINT [PK_PhoneNumber] PRIMARY KEY CLUSTERED ([PhoneNumberID] ASC)
);


GO
PRINT N'Creating [shared].[Person]...';


GO
CREATE TABLE [shared].[Person] (
    [FirstName]              VARCHAR (2000) NULL,
    [LastName]               VARCHAR (2000) NULL,
    [MiddleName]             VARCHAR (2000) NULL,
    [Title]                  VARCHAR (2000) NULL,
    [FirstNameOrigencoding]  VARCHAR (2000) NULL,
    [LastNameOrigencoding]   VARCHAR (2000) NULL,
    [MiddleNameOrigencoding] VARCHAR (2000) NULL,
    [TitleOrigencoding]      VARCHAR (2000) NULL,
    [PersonID]               INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_Person] PRIMARY KEY CLUSTERED ([PersonID] ASC)
);


GO
PRINT N'Creating [shared].[EmailAddress]...';


GO
CREATE TABLE [shared].[EmailAddress] (
    [Email]          VARCHAR (2000) NULL,
    [StartDate]      DATETIME       NULL,
    [EndDate]        DATETIME       NULL,
    [EmailAddressID] INT            IDENTITY (1, 1) NOT NULL,
    [LocationInfoID] INT            NOT NULL,
    CONSTRAINT [PK_EmailAddress] PRIMARY KEY CLUSTERED ([EmailAddressID] ASC)
);


GO
PRINT N'Creating [shared].[Address]...';


GO
CREATE TABLE [shared].[Address] (
    [ID]                          INT            NULL,
    [AddresseeName]               VARCHAR (1000) NULL,
    [StreetAddress1]              VARCHAR (2000) NULL,
    [StreetAddress2]              VARCHAR (2000) NULL,
    [City]                        VARCHAR (2000) NULL,
    [StateProvince]               VARCHAR (2000) NULL,
    [Country]                     VARCHAR (2000) NULL,
    [PostalCode]                  VARCHAR (2000) NULL,
    [AddresseeNameOrigencoding]   VARCHAR (2000) NULL,
    [Street_Address1Origencoding] VARCHAR (2000) NULL,
    [Street_Address2Origencoding] VARCHAR (2000) NULL,
    [CityOrigencoding]            VARCHAR (2000) NULL,
    [StateProvinceOrigencoding]   VARCHAR (2000) NULL,
    [CountryOrigencoding]         VARCHAR (2000) NULL,
    [PostalCodeOrigencoding]      VARCHAR (2000) NULL,
    [StartDate]                   DATETIME       NULL,
    [EndDate]                     DATETIME       NULL,
    [AddressID]                   INT            IDENTITY (1, 1) NOT NULL,
    [LocationInfoID]              INT            NULL,
    CONSTRAINT [PK_Address] PRIMARY KEY CLUSTERED ([AddressID] ASC)
);


GO
PRINT N'Creating [shared].[NameSynonyms]...';


GO
CREATE TABLE [shared].[NameSynonyms] (
    [NameGroup] INT            NOT NULL,
    [Name]      VARCHAR (1000) NOT NULL,
    CONSTRAINT [PK_Name_Group] PRIMARY KEY CLUSTERED ([NameGroup] ASC, [Name] ASC)
);


GO
PRINT N'Creating [shared].[Organization]...';


GO
CREATE TABLE [shared].[Organization] (
    [OrgName]                VARCHAR (2000) NULL,
    [SupplierKey]            VARCHAR (2000) NULL,
    [OrganizationID]         INT            IDENTITY (1, 1) NOT NULL,
    [ClinicalOrganizationID] INT            NULL,
    CONSTRAINT [PK_Organization] PRIMARY KEY CLUSTERED ([OrganizationID] ASC)
);


GO
PRINT N'Creating [dbo].[ActiveEmployees]...';


GO
CREATE TABLE [dbo].[ActiveEmployees] (
    [RowID]                INT             NOT NULL,
    [EmployeeID]           VARCHAR (15)    NOT NULL,
    [LastName]             VARCHAR (30)    NOT NULL,
    [FirstName]            VARCHAR (30)    NULL,
    [NickName]             NVARCHAR (30)   NULL,
    [MiddleName]           NVARCHAR (30)   NULL,
    [WorkPhone]            VARCHAR (41)    NULL,
    [CellPhone]            VARCHAR (41)    NULL,
    [Email]                VARCHAR (30)    NULL,
    [Title]                VARCHAR (80)    NULL,
    [ReportsToEmployeeID]  VARCHAR (15)    NULL,
    [CompanyCode]          VARCHAR (15)    NULL,
    [Department]           VARCHAR (80)    NULL,
    [Building]             VARCHAR (15)    NULL,
    [DepartmentCode]       VARCHAR (15)    NULL,
    [EndDate]              DATETIME        NULL,
    [ExemptStatus]         VARCHAR (15)    NOT NULL,
    [FullTimeEquivalent]   NUMERIC (19, 4) NOT NULL,
    [PersonJobStartDate]   DATETIME        NOT NULL,
    [StatusCode]           VARCHAR (15)    NOT NULL,
    [WorkStatus]           VARCHAR (15)    NULL,
    [Picture]              IMAGE           NULL,
    [StockLevelCode]       VARCHAR (15)    NULL,
    [JobCode]              VARCHAR (20)    NULL,
    [JobDescription]       VARCHAR (55)    NULL,
    [Inserted]             DATETIME        NOT NULL,
    [StatusStartDate]      DATETIME        NULL,
    [EEOEstablishmentName] VARCHAR (72)    NULL,
    PRIMARY KEY CLUSTERED ([RowID] ASC)
);


GO
PRINT N'Creating [dbo].[ActiveEmployeesAsOf]...';


GO
CREATE TABLE [dbo].[ActiveEmployeesAsOf] (
    [Entity]         CHAR (4)     NULL,
    [ActiveAsOf]     DATE         NULL,
    [EmployeeNumber] VARCHAR (50) NULL
);


GO
PRINT N'Creating [dbo].[ActiveEmployeesCurrent]...';


GO
CREATE TABLE [dbo].[ActiveEmployeesCurrent] (
    [RowID]                INT             NOT NULL,
    [EmployeeID]           VARCHAR (15)    NOT NULL,
    [LastName]             VARCHAR (30)    NOT NULL,
    [FirstName]            VARCHAR (30)    NULL,
    [NickName]             NVARCHAR (30)   NULL,
    [MiddleName]           NVARCHAR (30)   NULL,
    [WorkPhone]            VARCHAR (41)    NULL,
    [CellPhone]            VARCHAR (41)    NULL,
    [Email]                VARCHAR (30)    NULL,
    [Title]                VARCHAR (80)    NULL,
    [ReportsToEmployeeID]  VARCHAR (15)    NULL,
    [CompanyCode]          VARCHAR (15)    NULL,
    [Department]           VARCHAR (80)    NULL,
    [Building]             VARCHAR (15)    NULL,
    [DepartmentCode]       VARCHAR (15)    NULL,
    [EndDate]              DATETIME        NULL,
    [ExemptStatus]         VARCHAR (15)    NOT NULL,
    [FullTimeEquivalent]   NUMERIC (19, 4) NOT NULL,
    [PersonJobStartDate]   DATETIME        NOT NULL,
    [StatusCode]           VARCHAR (15)    NOT NULL,
    [WorkStatus]           VARCHAR (15)    NULL,
    [StockLevelCode]       VARCHAR (15)    NULL,
    [JobCode]              VARCHAR (20)    NULL,
    [JobDescription]       VARCHAR (55)    NULL,
    [StatusStartDate]      DATETIME        NULL,
    [EEOEstablishmentName] VARCHAR (72)    NULL
);


GO
PRINT N'Creating [dbo].[ActiveEmployeesDeleted]...';


GO
CREATE TABLE [dbo].[ActiveEmployeesDeleted] (
    [RowID]                INT             NOT NULL,
    [EmployeeID]           VARCHAR (15)    NOT NULL,
    [LastName]             VARCHAR (30)    NOT NULL,
    [FirstName]            VARCHAR (30)    NULL,
    [NickName]             NVARCHAR (30)   NULL,
    [MiddleName]           NVARCHAR (30)   NULL,
    [WorkPhone]            VARCHAR (41)    NULL,
    [CellPhone]            VARCHAR (41)    NULL,
    [Email]                VARCHAR (30)    NULL,
    [Title]                VARCHAR (80)    NULL,
    [ReportsToEmployeeID]  VARCHAR (15)    NULL,
    [CompanyCode]          VARCHAR (15)    NULL,
    [Department]           VARCHAR (80)    NULL,
    [Building]             VARCHAR (15)    NULL,
    [DepartmentCode]       VARCHAR (15)    NULL,
    [EndDate]              DATETIME        NULL,
    [ExemptStatus]         VARCHAR (15)    NOT NULL,
    [FullTimeEquivalent]   NUMERIC (19, 4) NOT NULL,
    [PersonJobStartDate]   DATETIME        NOT NULL,
    [StatusCode]           VARCHAR (15)    NOT NULL,
    [WorkStatus]           VARCHAR (15)    NULL,
    [StockLevelCode]       VARCHAR (15)    NULL,
    [JobCode]              VARCHAR (20)    NULL,
    [JobDescription]       VARCHAR (55)    NULL,
    [StatusStartDate]      DATETIME        NULL,
    [EEOEstablishmentName] VARCHAR (72)    NULL
);


GO
PRINT N'Creating [dbo].[ActiveEmployeesHistory]...';


GO
CREATE TABLE [dbo].[ActiveEmployeesHistory] (
    [RowID]               INT             NOT NULL,
    [EmployeeID]          VARCHAR (15)    NOT NULL,
    [LastName]            VARCHAR (30)    NOT NULL,
    [FirstName]           VARCHAR (30)    NULL,
    [NickName]            NVARCHAR (30)   NULL,
    [MiddleName]          NVARCHAR (30)   NULL,
    [WorkPhone]           VARCHAR (41)    NULL,
    [CellPhone]           VARCHAR (41)    NULL,
    [Email]               VARCHAR (30)    NULL,
    [Title]               VARCHAR (80)    NULL,
    [ReportsToEmployeeID] VARCHAR (15)    NULL,
    [CompanyCode]         VARCHAR (15)    NULL,
    [Department]          VARCHAR (80)    NULL,
    [Building]            VARCHAR (15)    NULL,
    [DepartmentCode]      VARCHAR (15)    NULL,
    [EndDate]             DATETIME        NULL,
    [ExemptStatus]        VARCHAR (15)    NOT NULL,
    [FullTimeEquivalent]  NUMERIC (19, 4) NOT NULL,
    [PersonJobStartDate]  DATETIME        NOT NULL,
    [StatusCode]          VARCHAR (15)    NOT NULL,
    [WorkStatus]          VARCHAR (15)    NULL,
    [StockLevelCode]      VARCHAR (15)    NULL,
    [JobCode]             VARCHAR (20)    NULL,
    [JobDescription]      VARCHAR (55)    NULL,
    [StatusStartDate]     DATETIME        NULL,
    [FromDate]            DATE            NULL,
    [ToDate]              DATE            NULL
);


GO
PRINT N'Creating [dbo].[ActiveEmployeesInserted]...';


GO
CREATE TABLE [dbo].[ActiveEmployeesInserted] (
    [RowID]                INT             NOT NULL,
    [EmployeeID]           VARCHAR (15)    NOT NULL,
    [LastName]             VARCHAR (30)    NOT NULL,
    [FirstName]            VARCHAR (30)    NULL,
    [NickName]             NVARCHAR (30)   NULL,
    [MiddleName]           NVARCHAR (30)   NULL,
    [WorkPhone]            VARCHAR (41)    NULL,
    [CellPhone]            VARCHAR (41)    NULL,
    [Email]                VARCHAR (30)    NULL,
    [Title]                VARCHAR (80)    NULL,
    [ReportsToEmployeeID]  VARCHAR (15)    NULL,
    [CompanyCode]          VARCHAR (15)    NULL,
    [Department]           VARCHAR (80)    NULL,
    [Building]             VARCHAR (15)    NULL,
    [DepartmentCode]       VARCHAR (15)    NULL,
    [EndDate]              DATETIME        NULL,
    [ExemptStatus]         VARCHAR (15)    NOT NULL,
    [FullTimeEquivalent]   NUMERIC (19, 4) NOT NULL,
    [PersonJobStartDate]   DATETIME        NOT NULL,
    [StatusCode]           VARCHAR (15)    NOT NULL,
    [WorkStatus]           VARCHAR (15)    NULL,
    [StockLevelCode]       VARCHAR (15)    NULL,
    [JobCode]              VARCHAR (20)    NULL,
    [JobDescription]       VARCHAR (55)    NULL,
    [StatusStartDate]      DATETIME        NULL,
    [EEOEstablishmentName] VARCHAR (72)    NULL
);


GO
PRINT N'Creating [dbo].[ActiveEmployeesPrevious]...';


GO
CREATE TABLE [dbo].[ActiveEmployeesPrevious] (
    [RowID]                INT             NOT NULL,
    [EmployeeID]           VARCHAR (15)    NOT NULL,
    [LastName]             VARCHAR (30)    NOT NULL,
    [FirstName]            VARCHAR (30)    NULL,
    [NickName]             NVARCHAR (30)   NULL,
    [MiddleName]           NVARCHAR (30)   NULL,
    [WorkPhone]            VARCHAR (41)    NULL,
    [CellPhone]            VARCHAR (41)    NULL,
    [Email]                VARCHAR (30)    NULL,
    [Title]                VARCHAR (80)    NULL,
    [ReportsToEmployeeID]  VARCHAR (15)    NULL,
    [CompanyCode]          VARCHAR (15)    NULL,
    [Department]           VARCHAR (80)    NULL,
    [Building]             VARCHAR (15)    NULL,
    [DepartmentCode]       VARCHAR (15)    NULL,
    [EndDate]              DATETIME        NULL,
    [ExemptStatus]         VARCHAR (15)    NOT NULL,
    [FullTimeEquivalent]   NUMERIC (19, 4) NOT NULL,
    [PersonJobStartDate]   DATETIME        NOT NULL,
    [StatusCode]           VARCHAR (15)    NOT NULL,
    [WorkStatus]           VARCHAR (15)    NULL,
    [StockLevelCode]       VARCHAR (15)    NULL,
    [JobCode]              VARCHAR (20)    NULL,
    [JobDescription]       VARCHAR (55)    NULL,
    [StatusStartDate]      DATETIME        NULL,
    [EEOEstablishmentName] VARCHAR (72)    NULL
);


GO
PRINT N'Creating [dbo].[AdaptiveRootAccounts]...';


GO
CREATE TABLE [dbo].[AdaptiveRootAccounts] (
    [id]                   INT           NULL,
    [code]                 VARCHAR (50)  NULL,
    [name]                 VARCHAR (100) NULL,
    [description]          VARCHAR (100) NULL,
    [timeStratum]          VARCHAR (50)  NULL,
    [displayAs]            VARCHAR (50)  NULL,
    [accountTypeCode]      VARCHAR (50)  NULL,
    [decimalPrecision]     INT           NULL,
    [isAssumption]         VARCHAR (50)  NULL,
    [suppressZeroes]       VARCHAR (50)  NULL,
    [isDefaultRoot]        VARCHAR (50)  NULL,
    [shortName]            VARCHAR (50)  NULL,
    [exchangeRateType]     VARCHAR (50)  NULL,
    [balanceType]          VARCHAR (50)  NULL,
    [isLinked]             VARCHAR (50)  NULL,
    [owningSheetId]        VARCHAR (50)  NULL,
    [isSystem]             VARCHAR (50)  NULL,
    [isIntercompany]       VARCHAR (50)  NULL,
    [dataEntryType]        VARCHAR (50)  NULL,
    [planBy]               VARCHAR (50)  NULL,
    [actualsBy]            VARCHAR (50)  NULL,
    [timeRollup]           VARCHAR (50)  NULL,
    [timeWeightAcctId]     VARCHAR (50)  NULL,
    [levelDimRollup]       VARCHAR (50)  NULL,
    [levelDimWeightAcctId] VARCHAR (50)  NULL,
    [rollupText]           VARCHAR (50)  NULL,
    [startExpanded]        VARCHAR (50)  NULL,
    [hasSalaryDetail]      VARCHAR (50)  NULL,
    [dataPrivacy]          VARCHAR (50)  NULL,
    [isBreakbackEligible]  VARCHAR (50)  NULL,
    [subType]              VARCHAR (50)  NULL,
    [enableActuals]        VARCHAR (50)  NULL,
    [isGroup]              VARCHAR (50)  NULL,
    [hasFormula]           VARCHAR (50)  NULL,
    [parentId]             INT           NULL,
    [parentCode]           VARCHAR (50)  NULL
);


GO
PRINT N'Creating [dbo].[AliceTempLongShortEmails]...';


GO
CREATE TABLE [dbo].[AliceTempLongShortEmails] (
    [EmployeeNumber]     VARCHAR (50) NULL,
    [PreferredFirstName] VARCHAR (50) NULL,
    [LastName]           VARCHAR (50) NULL,
    [EmployeeEmail]      VARCHAR (50) NULL,
    [FinalEmployeeEmail] VARCHAR (50) NULL
);


GO
PRINT N'Creating [dbo].[AliceTempSecurity]...';


GO
CREATE TABLE [dbo].[AliceTempSecurity] (
    [UserName]     VARCHAR (500) NULL,
    [FullName]     VARCHAR (500) NULL,
    [DepartmentID] INT           NULL,
    [Entity]       VARCHAR (50)  NULL,
    [NetworkAlias] VARCHAR (500) NULL
);


GO
PRINT N'Creating [dbo].[AllEmployees]...';


GO
CREATE TABLE [dbo].[AllEmployees] (
    [EmployeeID]            VARCHAR (15)    NOT NULL,
    [LastName]              VARCHAR (30)    NOT NULL,
    [FirstName]             VARCHAR (30)    NULL,
    [NickName]              NVARCHAR (30)   NULL,
    [MiddleName]            NVARCHAR (30)   NULL,
    [PhoneType]             VARCHAR (50)    NULL,
    [WorkPhone]             VARCHAR (41)    NULL,
    [CellPhone]             VARCHAR (41)    NULL,
    [Email]                 VARCHAR (100)   NULL,
    [OriginalHireDate]      DATETIME        NULL,
    [LastHireDate]          DATETIME        NULL,
    [JobCode]               VARCHAR (20)    NULL,
    [StockLevelDescription] VARCHAR (100)   NULL,
    [Title]                 VARCHAR (80)    NULL,
    [ReportsToEmployeeID]   VARCHAR (15)    NULL,
    [CompanyCode]           VARCHAR (15)    NULL,
    [Department]            VARCHAR (80)    NULL,
    [Building]              VARCHAR (15)    NULL,
    [DepartmentCode]        VARCHAR (15)    NULL,
    [EndDate]               DATETIME        NULL,
    [ExemptStatus]          VARCHAR (15)    NULL,
    [FullTimeEquivalent]    NUMERIC (19, 2) NULL,
    [WorkStatus]            VARCHAR (15)    NULL,
    [StatusCode]            VARCHAR (15)    NULL,
    [PersonJobStartDate]    DATETIME        NULL,
    [AnticipatedEndDate]    DATETIME        NULL,
    [EEOEstablishmentName]  VARCHAR (72)    NULL,
    [ProjectCode]           VARCHAR (50)    NULL,
    [Project]               VARCHAR (100)   NULL
);


GO
PRINT N'Creating [dbo].[AllEmployees_Snapshot]...';


GO
CREATE TABLE [dbo].[AllEmployees_Snapshot] (
    [PeriodDate]         DATE            NOT NULL,
    [Department]         CHAR (3)        NOT NULL,
    [EmployeeID]         VARCHAR (15)    NOT NULL,
    [EmployeeName]       VARCHAR (100)   NOT NULL,
    [Title]              VARCHAR (80)    NULL,
    [ReportsToName]      VARCHAR (100)   NULL,
    [CompanyCode]        VARCHAR (15)    NULL,
    [FullTimeEquivalent] NUMERIC (19, 2) NULL
);


GO
PRINT N'Creating [dbo].[AllEmployees_TmpImport]...';


GO
CREATE TABLE [dbo].[AllEmployees_TmpImport] (
    [EmployeeID]            VARCHAR (15)    NOT NULL,
    [EmployeeConverted]     VARCHAR (15)    NOT NULL,
    [LastName]              VARCHAR (30)    NOT NULL,
    [FirstName]             VARCHAR (30)    NULL,
    [NickName]              NVARCHAR (30)   NULL,
    [MiddleName]            NVARCHAR (30)   NULL,
    [PhoneType]             VARCHAR (50)    NULL,
    [WorkPhone]             VARCHAR (41)    NULL,
    [CellPhone]             VARCHAR (41)    NULL,
    [Email]                 VARCHAR (100)   NULL,
    [OriginalHireDate]      DATETIME        NULL,
    [LastHireDate]          DATETIME        NULL,
    [JobCode]               VARCHAR (20)    NULL,
    [StockLevelDescription] VARCHAR (100)   NULL,
    [Title]                 VARCHAR (80)    NULL,
    [ReportsToEmployeeID]   VARCHAR (15)    NULL,
    [CompanyCode]           VARCHAR (15)    NULL,
    [Department]            VARCHAR (80)    NULL,
    [Building]              VARCHAR (15)    NULL,
    [DepartmentCode]        VARCHAR (15)    NULL,
    [EndDate]               DATETIME        NULL,
    [ExemptStatus]          VARCHAR (15)    NULL,
    [FullTimeEquivalent]    NUMERIC (19, 2) NULL,
    [WorkStatus]            VARCHAR (15)    NULL,
    [StatusCode]            VARCHAR (15)    NULL,
    [AnticipatedEndDate]    DATETIME        NULL,
    [EEOEstablishmentName]  VARCHAR (72)    NULL,
    [ProjectCode]           VARCHAR (50)    NULL,
    [Project]               VARCHAR (100)   NULL,
    [UserKey]               INT             NULL,
    [ReportsToUserKey]      INT             NULL,
    [DepartmentKey]         INT             NULL,
    [ImportStatus]          INT             NULL,
    [Notes]                 VARCHAR (50)    NULL,
    [DateInserted]          DATETIME        NULL,
    [UserNameDerived]       VARCHAR (100)   NULL
);


GO
PRINT N'Creating [dbo].[AssetFixedAssetStaging]...';


GO
CREATE TABLE [dbo].[AssetFixedAssetStaging] (
    [CONTACTNAME]                                       NVARCHAR (100)  NOT NULL,
    [RESPONSIBLENAME]                                   NVARCHAR (100)  NOT NULL,
    [DEFINITIONGROUP]                                   NVARCHAR (60)   NOT NULL,
    [EXECUTIONID]                                       NVARCHAR (90)   NOT NULL,
    [ISSELECTED]                                        INT             NOT NULL,
    [TRANSFERSTATUS]                                    INT             NOT NULL,
    [AGENT]                                             NVARCHAR (60)   NOT NULL,
    [ACTIVITYCODE]                                      NVARCHAR (10)   NOT NULL,
    [ACTIVITYCODEDESCRIPTION]                           NVARCHAR (60)   NOT NULL,
    [ASSETCONDITIONID]                                  NVARCHAR (20)   NOT NULL,
    [ASSETCONDITIONDESCRIPTION]                         NVARCHAR (60)   NOT NULL,
    [BARCODE]                                           NVARCHAR (20)   NOT NULL,
    [COMMENTS]                                          NVARCHAR (MAX)  NULL,
    [CONTACTPERSONNELNUMBER]                            NVARCHAR (25)   NOT NULL,
    [DEPARTMENTOPERATINGUNITNUMBER]                     NVARCHAR (30)   NOT NULL,
    [DEPARTMENTSEARCHNAME]                              NVARCHAR (60)   NOT NULL,
    [DISPOSALRESTRICTIONS]                              NVARCHAR (1000) NOT NULL,
    [DOCUMENTLOCATION]                                  NVARCHAR (259)  NOT NULL,
    [FIXEDASSETGROUPID]                                 NVARCHAR (10)   NOT NULL,
    [FIXEDASSETNUMBER]                                  NVARCHAR (20)   NOT NULL,
    [GISREFERENCENUMBER]                                NVARCHAR (50)   NOT NULL,
    [GUARANTEEDATE]                                     DATETIME        NOT NULL,
    [INFORMATION1]                                      NVARCHAR (254)  NOT NULL,
    [INFORMATION2]                                      NVARCHAR (254)  NOT NULL,
    [INFORMATION3]                                      NVARCHAR (MAX)  NULL,
    [INSURANCEDATE1]                                    DATETIME        NOT NULL,
    [INSURANCEDATE2]                                    DATETIME        NOT NULL,
    [INSURANCEVENDOR]                                   NVARCHAR (20)   NOT NULL,
    [INSUREDATFAIRMARKETVALUE]                          INT             NOT NULL,
    [INSUREDVALUE]                                      NUMERIC (32, 6) NOT NULL,
    [LASTPERIODICVALUECOSTUPDATE]                       DATETIME        NOT NULL,
    [LASTMAINTENANCE]                                   DATETIME        NOT NULL,
    [LEASENOTE]                                         NVARCHAR (1000) NOT NULL,
    [ASSETLOCATIONID]                                   NVARCHAR (10)   NOT NULL,
    [ASSETLOCATIONNAME]                                 NVARCHAR (30)   NOT NULL,
    [LOCATIONID]                                        NVARCHAR (30)   NOT NULL,
    [LOCATIONMEMO]                                      NVARCHAR (1000) NOT NULL,
    [MAJORTYPEID]                                       NVARCHAR (20)   NOT NULL,
    [MAJORTYPEDESCRIPTION]                              NVARCHAR (60)   NOT NULL,
    [MAKE]                                              NVARCHAR (60)   NOT NULL,
    [MISSINGASSET]                                      INT             NOT NULL,
    [MODEL]                                             NVARCHAR (60)   NOT NULL,
    [MODELYEAR]                                         NVARCHAR (10)   NOT NULL,
    [NAME]                                              NVARCHAR (30)   NOT NULL,
    [NEXTMAINTENANCE]                                   DATETIME        NOT NULL,
    [PARCELID]                                          NVARCHAR (50)   NOT NULL,
    [PHYSICALINVENTORY]                                 DATETIME        NOT NULL,
    [POLICYAMOUNT]                                      NUMERIC (32, 6) NOT NULL,
    [POLICYEXPIRATIONDATE]                              DATETIME        NOT NULL,
    [POLICYNUMBER]                                      NVARCHAR (20)   NOT NULL,
    [PROPERTYGROUPID]                                   NVARCHAR (10)   NOT NULL,
    [PROPERTYGROUPDESCRIPTION]                          NVARCHAR (60)   NOT NULL,
    [PROPERTYTYPE]                                      INT             NOT NULL,
    [QUANTITY]                                          NUMERIC (32, 6) NOT NULL,
    [REFERENCE]                                         NVARCHAR (254)  NOT NULL,
    [REPLACEMENTCOST]                                   NUMERIC (32, 6) NOT NULL,
    [RESPONSIBLEPERSONNELNUMBER]                        NVARCHAR (25)   NOT NULL,
    [ROOMNUMBER]                                        NVARCHAR (20)   NOT NULL,
    [SEARCHNAME]                                        NVARCHAR (60)   NOT NULL,
    [SERIALNUMBER]                                      NVARCHAR (25)   NOT NULL,
    [SORTFIELD1ID]                                      NVARCHAR (10)   NOT NULL,
    [SORTFIELD1SORTING]                                 INT             NOT NULL,
    [SORTFIELD1DESCRIPTION]                             NVARCHAR (60)   NOT NULL,
    [SORTFIELD2ID]                                      NVARCHAR (10)   NOT NULL,
    [SORTFIELD2SORTING]                                 INT             NOT NULL,
    [SORTFIELD2DESCRIPTION]                             NVARCHAR (60)   NOT NULL,
    [SORTFIELD3ID]                                      NVARCHAR (10)   NOT NULL,
    [SORTFIELD3SORTING]                                 INT             NOT NULL,
    [SORTFIELD3DESCRIPTION]                             NVARCHAR (60)   NOT NULL,
    [TECHNICALINFORMATION1]                             NVARCHAR (254)  NOT NULL,
    [TECHNICALINFORMATION2]                             NVARCHAR (254)  NOT NULL,
    [TECHNICALINFORMATION3]                             NVARCHAR (254)  NOT NULL,
    [TITLEHOLDER]                                       NVARCHAR (60)   NOT NULL,
    [TYPE]                                              INT             NOT NULL,
    [UNITCOST]                                          NUMERIC (32, 6) NOT NULL,
    [UNITOFMEASURE]                                     NVARCHAR (10)   NOT NULL,
    [ACCELERATEDDEPRECIATIONFIXEDASSETEQUIPMENTGROUPID] NVARCHAR (10)   NOT NULL,
    [ASSETCLASSIFICATION]                               INT             NOT NULL,
    [EXCEPTIONTAXATIONCODE]                             NVARCHAR (10)   NOT NULL,
    [DEFERREDTYPE]                                      INT             NOT NULL,
    [EXCEPTIONTAXATIONRATEDENOMINATOR]                  NUMERIC (32, 6) NOT NULL,
    [EXCEPTIONTAXATIONRATE]                             NUMERIC (32, 6) NOT NULL,
    [ISSECONDHAND]                                      INT             NOT NULL,
    [ASSETTYPEOFMAJORTYPE]                              INT             NOT NULL,
    [NAMEOFTHELENDER]                                   NVARCHAR (60)   NOT NULL,
    [ISRENTED]                                          INT             NOT NULL,
    [RESOURCE_]                                         NVARCHAR (10)   NOT NULL,
    [PHYSICALASSETNUMBER]                               NVARCHAR (30)   NOT NULL,
    [LONGTERMRECEIVABLETAX]                             INT             NOT NULL,
    [OUTGOINGICMS]                                      INT             NOT NULL,
    [ICMSCREDITINSTALLMENTS]                            INT             NOT NULL,
    [TRANSFERREDFROMINVENTORY]                          INT             NOT NULL,
    [TAXATIONCODEFORCOFINS]                             NVARCHAR (3)    NOT NULL,
    [APPROPRIATIONMETHOD]                               INT             NOT NULL,
    [FIXEDASSETCREDITGROUP]                             INT             NOT NULL,
    [TAXCREDITSINSTALLMENTS]                            INT             NOT NULL,
    [TAXCREDITPURPOSE]                                  INT             NOT NULL,
    [TAXATIONCODEFORPIS]                                NVARCHAR (3)    NOT NULL,
    [FISCALESTABLISHMENTID]                             NVARCHAR (10)   NOT NULL,
    [SOURCETYPEID]                                      NVARCHAR (10)   NOT NULL,
    [MAINASSETID]                                       NVARCHAR (20)   NOT NULL,
    [PARTITION]                                         NVARCHAR (20)   NOT NULL,
    [DATAAREAID]                                        NVARCHAR (4)    NOT NULL,
    [SYNCSTARTDATETIME]                                 DATETIME        NOT NULL,
    CONSTRAINT [PK_AssetFixedAssetStaging] PRIMARY KEY CLUSTERED ([EXECUTIONID] ASC, [FIXEDASSETGROUPID] ASC, [FIXEDASSETNUMBER] ASC, [DATAAREAID] ASC, [PARTITION] ASC)
);


GO
PRINT N'Creating [dbo].[AssetJournalEntityStaging]...';


GO
CREATE TABLE [dbo].[AssetJournalEntityStaging] (
    [DEFINITIONGROUP]              NVARCHAR (60)    NOT NULL,
    [EXECUTIONID]                  NVARCHAR (90)    NOT NULL,
    [ISSELECTED]                   INT              NOT NULL,
    [TRANSFERSTATUS]               INT              NOT NULL,
    [CREDITAMOUNT]                 NUMERIC (32, 6)  NOT NULL,
    [DEBITAMOUNT]                  NUMERIC (32, 6)  NOT NULL,
    [JOURNALBATCHNUMBER]           NVARCHAR (60)    NOT NULL,
    [ACCOUNTDISPLAYVALUE]          NVARCHAR (500)   NOT NULL,
    [OFFSETACCOUNTTYPE]            INT              NOT NULL,
    [OFFSETACCOUNTDISPLAYVALUE]    NVARCHAR (500)   NOT NULL,
    [TRANSDATE]                    DATETIME         NOT NULL,
    [TEXT]                         NVARCHAR (512)   NOT NULL,
    [VOUCHER]                      NVARCHAR (60)    NOT NULL,
    [CURRENCYCODE]                 NVARCHAR (3)     NOT NULL,
    [POSTINGLAYER]                 INT              NOT NULL,
    [JOURNALNAMEID]                NVARCHAR (10)    NOT NULL,
    [LINENUMBER]                   NUMERIC (32, 16) NOT NULL,
    [ISPOSTED]                     INT              NOT NULL,
    [DESCRIPTION]                  NVARCHAR (60)    NOT NULL,
    [VALUEMODELID]                 NVARCHAR (10)    NOT NULL,
    [TRANSACTIONTYPE]              INT              NOT NULL,
    [ACCOUNTTYPE]                  INT              NOT NULL,
    [CONSUMPTIONUNITS]             NUMERIC (32, 6)  NOT NULL,
    [EXCHANGERATE]                 NUMERIC (32, 16) NOT NULL,
    [CHINESEVOUCHERTYPE]           NVARCHAR (10)    NOT NULL,
    [CHINESEVOUCHER]               NVARCHAR (60)    NOT NULL,
    [DEFAULTDIMENSIONDISPLAYVALUE] NVARCHAR (500)   NOT NULL,
    [PARTITION]                    NVARCHAR (20)    NOT NULL,
    [DATAAREAID]                   NVARCHAR (4)     NOT NULL,
    [SYNCSTARTDATETIME]            DATETIME         NOT NULL,
    CONSTRAINT [PK_AssetJournalEntityStaging] PRIMARY KEY CLUSTERED ([EXECUTIONID] ASC, [JOURNALBATCHNUMBER] ASC, [LINENUMBER] ASC, [DATAAREAID] ASC, [PARTITION] ASC)
);


GO
PRINT N'Creating [dbo].[BudgetRegisterEntryStaging]...';


GO
CREATE TABLE [dbo].[BudgetRegisterEntryStaging] (
    [BUDGETMODELID]             NVARCHAR (10)    NOT NULL,
    [STATUS]                    INT              NOT NULL,
    [DIMENSIONACCOUNTSTRUCTURE] NVARCHAR (60)    NOT NULL,
    [DIMENSIONDISPLAYVALUE]     NVARCHAR (500)   NOT NULL,
    [ENTRYNUMBER]               NVARCHAR (20)    NOT NULL,
    [REASONCODE]                NVARCHAR (10)    NOT NULL,
    [REASONCOMMENT]             NVARCHAR (60)    NOT NULL,
    [DEFINITIONGROUP]           NVARCHAR (60)    NOT NULL,
    [EXECUTIONID]               NVARCHAR (90)    NOT NULL,
    [ISSELECTED]                INT              NOT NULL,
    [TRANSFERSTATUS]            INT              NOT NULL,
    [ACCOUNTINGCURRENCYAMOUNT]  NUMERIC (32, 6)  NOT NULL,
    [AMOUNTTYPE]                INT              NOT NULL,
    [BUDGETCODE]                NVARCHAR (20)    NOT NULL,
    [BUDGETTYPE]                INT              NOT NULL,
    [COMMENT_]                  NVARCHAR (60)    NOT NULL,
    [CURRENCYCODE]              NVARCHAR (3)     NOT NULL,
    [DATE]                      DATETIME         NOT NULL,
    [INCLUDEINCASHFLOWFORECAST] INT              NOT NULL,
    [LEGALENTITYID]             NVARCHAR (4)     NOT NULL,
    [LINENUMBER]                NUMERIC (32, 16) NOT NULL,
    [ONETIMEREVISION]           INT              NOT NULL,
    [PRICE]                     NUMERIC (32, 6)  NOT NULL,
    [QUANTITY]                  NUMERIC (32, 6)  NOT NULL,
    [TRANSACTIONCURRENCYAMOUNT] NUMERIC (32, 6)  NOT NULL,
    [LINEWORKFLOWSTATUS]        INT              NOT NULL,
    [DOCUMENTWORKFLOWSTATUS]    INT              NOT NULL,
    [PARTITION]                 NVARCHAR (20)    NOT NULL,
    [DATAAREAID]                NVARCHAR (4)     NOT NULL,
    [SYNCSTARTDATETIME]         DATETIME         NOT NULL,
    [RECID]                     BIGINT           NOT NULL,
    CONSTRAINT [PK_BudgetRegisterEntryStaging] PRIMARY KEY CLUSTERED ([ENTRYNUMBER] ASC, [EXECUTIONID] ASC, [TRANSFERSTATUS] ASC, [LEGALENTITYID] ASC, [LINENUMBER] ASC, [DATAAREAID] ASC, [PARTITION] ASC)
);


GO
PRINT N'Creating [dbo].[BuildingAccessActivity]...';


GO
CREATE TABLE [dbo].[BuildingAccessActivity] (
    [RecordId]               INT           IDENTITY (1, 1) NOT NULL,
    [BuildingAccessReportId] INT           NOT NULL,
    [BadgeNumber]            VARCHAR (50)  NOT NULL,
    [FirstName]              VARCHAR (100) NOT NULL,
    [LastName]               VARCHAR (100) NULL,
    [TerminalName]           VARCHAR (100) NULL,
    [HistoryType]            VARCHAR (50)  NULL,
    [IssueLevel]             VARCHAR (50)  NULL,
    [ActivityDate]           DATETIME      NOT NULL,
    [IsSuperUser]            VARCHAR (10)  NULL,
    [TimedOverrid]           VARCHAR (50)  NULL,
    [DateInserted]           DATETIME      NOT NULL,
    CONSTRAINT [PK_BuildingAccessActivity_RecorId] PRIMARY KEY CLUSTERED ([RecordId] ASC)
);


GO
PRINT N'Creating [dbo].[BuildingAccessReportHist]...';


GO
CREATE TABLE [dbo].[BuildingAccessReportHist] (
    [ReportId]        INT           IDENTITY (1, 1) NOT NULL,
    [DateFileCreated] DATETIME      NOT NULL,
    [ReportFileName]  VARCHAR (100) NOT NULL,
    [ActivityFrom]    DATETIME      NOT NULL,
    [ActivityTo]      DATETIME      NOT NULL,
    [DateInserted]    DATETIME      NOT NULL,
    CONSTRAINT [PK_BuildgReport_ReportId] PRIMARY KEY CLUSTERED ([ReportId] ASC)
);


GO
PRINT N'Creating [dbo].[BuildingAccessUser]...';


GO
CREATE TABLE [dbo].[BuildingAccessUser] (
    [RecordId]     INT           IDENTITY (1, 1) NOT NULL,
    [BadgeNumber]  VARCHAR (50)  NOT NULL,
    [FirstName]    VARCHAR (100) NOT NULL,
    [LastName]     VARCHAR (100) NULL,
    [Company]      VARCHAR (100) NULL,
    [Department]   VARCHAR (50)  NULL,
    [BadgeStatus]  VARCHAR (50)  NULL,
    [DimUserKey]   INT           NULL,
    [DateModified] DATETIME      NOT NULL,
    CONSTRAINT [PK_BuildingAccessUser_RecorId] PRIMARY KEY CLUSTERED ([RecordId] ASC) WITH (FILLFACTOR = 80)
);


GO
PRINT N'Creating [dbo].[BuildingAccessUser].[IND_BuildingAccessUser_Name]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IND_BuildingAccessUser_Name]
    ON [dbo].[BuildingAccessUser]([BadgeNumber] ASC) WITH (FILLFACTOR = 80);


GO
PRINT N'Creating [dbo].[BuildingAccessUser].[IX_BuildingAccessUser_DimUserKey]...';


GO
CREATE NONCLUSTERED INDEX [IX_BuildingAccessUser_DimUserKey]
    ON [dbo].[BuildingAccessUser]([DimUserKey] ASC) WITH (FILLFACTOR = 80);


GO
PRINT N'Creating [dbo].[CompoundsAndGeneSymbols]...';


GO
CREATE TABLE [dbo].[CompoundsAndGeneSymbols] (
    [compound_num]       VARCHAR (50)  NOT NULL,
    [term]               VARCHAR (100) NOT NULL,
    [term_type]          VARCHAR (50)  NOT NULL,
    [target_type]        VARCHAR (50)  NULL,
    [status]             VARCHAR (50)  NOT NULL,
    [gene_symbol_status] VARCHAR (50)  NULL,
    [gene_symbol]        VARCHAR (50)  NOT NULL,
    [ensembl_id]         VARCHAR (100) NOT NULL,
    [species]            VARCHAR (256) NULL
);


GO
PRINT N'Creating [dbo].[CompoundsAndGeneSymbols].[idx_compoundNum_CompoundsAndGeneSymbols]...';


GO
CREATE NONCLUSTERED INDEX [idx_compoundNum_CompoundsAndGeneSymbols]
    ON [dbo].[CompoundsAndGeneSymbols]([compound_num] ASC);


GO
PRINT N'Creating [dbo].[CompoundsAndGeneSymbols].[idx_term_CompoundsAndGeneSymbols]...';


GO
CREATE NONCLUSTERED INDEX [idx_term_CompoundsAndGeneSymbols]
    ON [dbo].[CompoundsAndGeneSymbols]([term] ASC);


GO
PRINT N'Creating [dbo].[CompoundsAndGeneSymbols].[idx_termType_CompoundsAndGeneSymbols]...';


GO
CREATE NONCLUSTERED INDEX [idx_termType_CompoundsAndGeneSymbols]
    ON [dbo].[CompoundsAndGeneSymbols]([term_type] ASC);


GO
PRINT N'Creating [dbo].[CompoundsAndGeneSymbols].[idx_targetType_CompoundsAndGeneSymbols]...';


GO
CREATE NONCLUSTERED INDEX [idx_targetType_CompoundsAndGeneSymbols]
    ON [dbo].[CompoundsAndGeneSymbols]([target_type] ASC);


GO
PRINT N'Creating [dbo].[CompoundsAndGeneSymbols].[idx_status_CompoundsAndGeneSymbols]...';


GO
CREATE NONCLUSTERED INDEX [idx_status_CompoundsAndGeneSymbols]
    ON [dbo].[CompoundsAndGeneSymbols]([status] ASC);


GO
PRINT N'Creating [dbo].[CompoundsAndGeneSymbols].[idx_geneSymbolStatus_CompoundsAndGeneSymbols]...';


GO
CREATE NONCLUSTERED INDEX [idx_geneSymbolStatus_CompoundsAndGeneSymbols]
    ON [dbo].[CompoundsAndGeneSymbols]([gene_symbol_status] ASC);


GO
PRINT N'Creating [dbo].[CompoundsAndGeneSymbols].[idx_ensumbl_CompoundsAndGeneSymbols]...';


GO
CREATE NONCLUSTERED INDEX [idx_ensumbl_CompoundsAndGeneSymbols]
    ON [dbo].[CompoundsAndGeneSymbols]([ensembl_id] ASC);


GO
PRINT N'Creating [dbo].[CompoundsAndGeneSymbols].[idx_species_CompoundsAndGeneSymbols]...';


GO
CREATE NONCLUSTERED INDEX [idx_species_CompoundsAndGeneSymbols]
    ON [dbo].[CompoundsAndGeneSymbols]([species] ASC);


GO
PRINT N'Creating [dbo].[CoupaPOHeader]...';


GO
CREATE TABLE [dbo].[CoupaPOHeader] (
    [ID]               INT           NULL,
    [PO_Number]        VARCHAR (20)  NULL,
    [Supplier]         VARCHAR (100) NULL,
    [Exported]         BIT           NULL,
    [Last_Exported_At] DATETIME      NULL,
    [Status]           VARCHAR (50)  NULL,
    [Created_At]       DATETIME      NULL,
    [Updated_At]       DATETIME      NULL,
    [Refreshed_At]     DATETIME      NULL,
    [Version]          INT           NULL,
    [CapitalID]        VARCHAR (50)  NULL,
    [CapitalItem]      VARCHAR (500) NULL
);


GO
PRINT N'Creating [dbo].[CoupaPOLine]...';


GO
CREATE TABLE [dbo].[CoupaPOLine] (
    [ID]                        INT             NULL,
    [Order_Header_ID]           INT             NULL,
    [Order_Header_Number]       VARCHAR (20)    NULL,
    [Department]                VARCHAR (100)   NULL,
    [Account]                   VARCHAR (500)   NULL,
    [Line_Num]                  VARCHAR (255)   NULL,
    [Description]               VARCHAR (500)   NULL,
    [Contract]                  VARCHAR (100)   NULL,
    [Supplier_Order_Number]     VARCHAR (50)    NULL,
    [Supplier_Site_ID]          VARCHAR (50)    NULL,
    [Item]                      VARCHAR (500)   NULL,
    [UOM]                       VARCHAR (20)    NULL,
    [Source_Part_Num]           VARCHAR (500)   NULL,
    [Commodity]                 VARCHAR (200)   NULL,
    [Accounting_Total]          DECIMAL (32, 4) NULL,
    [Accounting_Total_Currency] VARCHAR (20)    NULL,
    [Reporting_Total]           DECIMAL (32, 4) NULL,
    [Total]                     DECIMAL (32, 4) NULL,
    [Currency]                  VARCHAR (20)    NULL,
    [Bulk_Price]                DECIMAL (32, 4) NULL,
    [Price]                     DECIMAL (30, 6) NULL,
    [Quantity]                  DECIMAL (30, 6) NULL,
    [Invoiced]                  DECIMAL (30, 6) NULL,
    [Period]                    VARCHAR (20)    NULL,
    [Received]                  DECIMAL (30, 6) NULL,
    [Receiving_Warehouse]       VARCHAR (100)   NULL,
    [Type]                      VARCHAR (100)   NULL,
    [Version]                   INT             NULL
);


GO
PRINT N'Creating [dbo].[D365Admins]...';


GO
CREATE TABLE [dbo].[D365Admins] (
    [NetworkAlias] VARCHAR (50) NULL,
    [Entity]       VARCHAR (50) NULL
);


GO
PRINT N'Creating [dbo].[D365Security]...';


GO
CREATE TABLE [dbo].[D365Security] (
    [Entity]        NVARCHAR (50) NULL,
    [NetworkAlias]  NVARCHAR (50) NULL,
    [Department]    VARCHAR (100) NULL,
    [EntityKey]     INT           NULL,
    [DepartmentKey] INT           NULL,
    [SecurityKey]   INT           NULL
);


GO
PRINT N'Creating [dbo].[D365SecurityMaster]...';


GO
CREATE TABLE [dbo].[D365SecurityMaster] (
    [SecurityMasterID] INT           IDENTITY (1, 1) NOT NULL,
    [DepartmentNumber] NVARCHAR (30) NOT NULL,
    [DepartmentKey]    INT           NOT NULL,
    [EntityID]         NVARCHAR (4)  NOT NULL,
    [EntityKey]        INT           NOT NULL,
    CONSTRAINT [PK_D365SecurityMaster] PRIMARY KEY CLUSTERED ([SecurityMasterID] ASC)
);


GO
PRINT N'Creating [dbo].[D365SecurityMaster].[IX_D365SecurityMaster]...';


GO
CREATE NONCLUSTERED INDEX [IX_D365SecurityMaster]
    ON [dbo].[D365SecurityMaster]([EntityKey] ASC, [DepartmentKey] ASC);


GO
PRINT N'Creating [dbo].[D365User]...';


GO
CREATE TABLE [dbo].[D365User] (
    [NetworkAlias] NVARCHAR (50) NULL
);


GO
PRINT N'Creating [dbo].[DBBuild]...';


GO
CREATE TABLE [dbo].[DBBuild] (
    [ReleaseId]    VARCHAR (100) NOT NULL,
    [ReleaseName]  VARCHAR (100) NOT NULL,
    [BuildNumber]  VARCHAR (100) NOT NULL,
    [SourceBranch] VARCHAR (100) NOT NULL,
    [UpdatedAt]    DATETIME      NOT NULL
);


GO
PRINT N'Creating [dbo].[DimAccount]...';


GO
CREATE TABLE [dbo].[DimAccount] (
    [AccountKey]                     INT           IDENTITY (1, 1) NOT NULL,
    [MainAccountNumber]              NVARCHAR (20) NOT NULL,
    [MainAccountDescription]         NVARCHAR (60) NOT NULL,
    [MainAccountNumberDescription]   NVARCHAR (83) NOT NULL,
    [MainAccountDescriptionNumber]   NVARCHAR (83) NOT NULL,
    [MainAccountType]                VARCHAR (15)  NULL,
    [MainAccountCategoryDescription] NVARCHAR (60) NOT NULL,
    [level5]                         NVARCHAR (20) NULL,
    [level5Description]              NVARCHAR (60) NULL,
    [level4]                         NVARCHAR (20) NULL,
    [level4Description]              NVARCHAR (60) NULL,
    [level3]                         NVARCHAR (20) NULL,
    [level3Description]              NVARCHAR (60) NULL,
    [Level2]                         NVARCHAR (20) NULL,
    [Level2Description]              NVARCHAR (60) NULL,
    [Level1]                         NVARCHAR (20) NULL,
    [Level1Description]              NVARCHAR (60) NULL,
    [IsGAAP]                         INT           NULL,
    [IsControlled]                   INT           NULL,
    [IsFTE]                          INT           NULL,
    [PARTITION]                      NVARCHAR (20) NOT NULL,
    [IsActive]                       INT           NULL,
    CONSTRAINT [PK_DimAccount] PRIMARY KEY CLUSTERED ([AccountKey] ASC)
);


GO
PRINT N'Creating [dbo].[DimAccount].[IX1_DimAccount]...';


GO
CREATE NONCLUSTERED INDEX [IX1_DimAccount]
    ON [dbo].[DimAccount]([MainAccountNumber] ASC);


GO
PRINT N'Creating [dbo].[DimDepartment]...';


GO
CREATE TABLE [dbo].[DimDepartment] (
    [DepartmentKey]               INT           IDENTITY (1, 1) NOT NULL,
    [DepartmentNumber]            NVARCHAR (30) NOT NULL,
    [DepartmentDescription]       NVARCHAR (60) NOT NULL,
    [DepartmentNumberDescription] NVARCHAR (93) NOT NULL,
    [DepartmentDescriptionNumber] NVARCHAR (93) NOT NULL,
    [DepartmentIsActive]          INT           NULL,
    CONSTRAINT [PK_DimDepartment] PRIMARY KEY CLUSTERED ([DepartmentKey] ASC)
);


GO
PRINT N'Creating [dbo].[DimDepartment].[IX_DimDepartment]...';


GO
CREATE NONCLUSTERED INDEX [IX_DimDepartment]
    ON [dbo].[DimDepartment]([DepartmentNumber] ASC);


GO
PRINT N'Creating [dbo].[DimDepartment].[IX1_DimDepartment]...';


GO
CREATE NONCLUSTERED INDEX [IX1_DimDepartment]
    ON [dbo].[DimDepartment]([DepartmentKey] ASC);


GO
PRINT N'Creating [dbo].[DimEmployee]...';


GO
CREATE TABLE [dbo].[DimEmployee] (
    [RowID]               INT             NOT NULL,
    [EmployeeID]          VARCHAR (15)    NOT NULL,
    [LastName]            VARCHAR (30)    NOT NULL,
    [FirstName]           VARCHAR (30)    NULL,
    [NickName]            NVARCHAR (30)   NULL,
    [MiddleName]          NVARCHAR (30)   NULL,
    [WorkPhone]           VARCHAR (41)    NULL,
    [CellPhone]           VARCHAR (41)    NULL,
    [Email]               VARCHAR (30)    NULL,
    [Title]               VARCHAR (80)    NULL,
    [ReportsToEmployeeID] VARCHAR (15)    NULL,
    [CompanyCode]         VARCHAR (15)    NULL,
    [Department]          VARCHAR (80)    NULL,
    [Building]            VARCHAR (15)    NULL,
    [DepartmentCode]      VARCHAR (15)    NULL,
    [EndDate]             DATETIME        NULL,
    [ExemptStatus]        VARCHAR (15)    NOT NULL,
    [FullTimeEquivalent]  NUMERIC (19, 4) NOT NULL,
    [PersonJobStartDate]  DATETIME        NOT NULL,
    [StatusCode]          VARCHAR (15)    NOT NULL,
    [WorkStatus]          VARCHAR (15)    NULL,
    [StockLevelCode]      VARCHAR (15)    NULL,
    [JobCode]             VARCHAR (20)    NULL,
    [JobDescription]      VARCHAR (55)    NULL,
    [StatusStartDate]     DATETIME        NULL,
    [MonthNumer]          INT             NULL,
    [MonthName]           NVARCHAR (30)   NULL,
    [Year]                INT             NULL,
    [FiscalPeriodKey]     INT             NOT NULL
);


GO
PRINT N'Creating [dbo].[DimEntity]...';


GO
CREATE TABLE [dbo].[DimEntity] (
    [EntityKey]           INT           IDENTITY (1, 1) NOT NULL,
    [EntityID]            NVARCHAR (4)  NOT NULL,
    [EntityDescription]   NVARCHAR (60) NULL,
    [EntityDescriptionID] NVARCHAR (67) NOT NULL,
    [EntityIDDescription] NVARCHAR (67) NOT NULL,
    CONSTRAINT [PK_DimEntity] PRIMARY KEY CLUSTERED ([EntityKey] ASC)
);


GO
PRINT N'Creating [dbo].[DimEntity].[IX_DimEntity]...';


GO
CREATE NONCLUSTERED INDEX [IX_DimEntity]
    ON [dbo].[DimEntity]([EntityID] ASC);


GO
PRINT N'Creating [dbo].[DimFinancialCalendar]...';


GO
CREATE TABLE [dbo].[DimFinancialCalendar] (
    [FiscalPeriodKey] INT           IDENTITY (1, 1) NOT NULL,
    [EntityKey]       INT           NULL,
    [FiscalMonth]     INT           NOT NULL,
    [MonthNumer]      INT           NULL,
    [MonthName]       NVARCHAR (30) NULL,
    [DayNumber]       INT           NULL,
    [Year]            INT           NULL,
    [FullDate]        DATE          NULL,
    [Quarter]         VARCHAR (2)   NULL,
    [FiscalYear]      NVARCHAR (10) NOT NULL,
    [PeriodName]      NVARCHAR (60) NOT NULL,
    [ShortName]       NVARCHAR (8)  NOT NULL,
    [StartDate]       DATETIME      NOT NULL,
    [EndDate]         DATETIME      NOT NULL,
    [Type]            INT           NOT NULL,
    [Calendar]        NVARCHAR (10) NOT NULL,
    [CalendarType]    INT           NOT NULL,
    [Days]            INT           NOT NULL,
    [CYTDFlag]        INT           NULL,
    [PYTDFlag]        INT           NULL,
    [CYQuarterToDate] INT           NULL,
    [PYQuarterToDate] INT           NULL,
    [CYMonthToDate]   INT           NULL,
    [PYMonthToDate]   INT           NULL,
    [Rolling12Closed] INT           NULL,
    [OpenClosed]      VARCHAR (50)  NULL,
    [LastClosedMonth] INT           NULL,
    [PQuarterToDate]  INT           NULL,
    CONSTRAINT [PK_DimFinancialCalendar] PRIMARY KEY CLUSTERED ([FiscalPeriodKey] ASC)
);


GO
PRINT N'Creating [dbo].[DimFinancialCalendar].[IX_DimFinancialCalendar]...';


GO
CREATE NONCLUSTERED INDEX [IX_DimFinancialCalendar]
    ON [dbo].[DimFinancialCalendar]([FullDate] ASC, [EntityKey] ASC);


GO
PRINT N'Creating [dbo].[DimFinancialDimensions]...';


GO
CREATE TABLE [dbo].[DimFinancialDimensions] (
    [LedgerDimension]        BIGINT         NULL,
    [DepartmentValue]        VARCHAR (1000) NULL,
    [DepartmentDescription]  VARCHAR (1000) NULL,
    [LegalEntityValue]       VARCHAR (1000) NULL,
    [LegalEntityDescription] VARCHAR (1000) NULL,
    [MainAccountValue]       VARCHAR (1000) NULL,
    [MainAccountDescription] VARCHAR (1000) NULL,
    [PROJECTValue]           VARCHAR (1000) NULL,
    [PROJECTDescription]     VARCHAR (1000) NULL,
    [TASKValue]              VARCHAR (1000) NULL,
    [TASKDescription]        VARCHAR (1000) NULL
);


GO
PRINT N'Creating [dbo].[DimHierarchy]...';


GO
CREATE TABLE [dbo].[DimHierarchy] (
    [HierarchyDepth]                     INT            NULL,
    [HierarchyType]                      VARCHAR (50)   NULL,
    [RootPartyNumber]                    VARCHAR (50)   NULL,
    [RootPartyNumberNameAlias]           NVARCHAR (20)  NULL,
    [RootPartyOriganizationName]         NVARCHAR (100) NULL,
    [LeafPartyNumber]                    VARCHAR (50)   NULL,
    [LeafPartyNumberNameAlias]           NVARCHAR (20)  NULL,
    [LeafPartyNumberOriganizationName]   NVARCHAR (100) NULL,
    [LeafOperatingUnit]                  VARCHAR (50)   NULL,
    [Level1PartyNumber]                  VARCHAR (50)   NULL,
    [Level1PartyNumberNameAlias]         NVARCHAR (20)  NULL,
    [Level1PartyNumberOriganizationName] NVARCHAR (100) NULL,
    [Level2PartyNumber]                  VARCHAR (50)   NULL,
    [Level2PartyNumberNameAlias]         NVARCHAR (20)  NULL,
    [Level2PartyNumberOriganizationName] NVARCHAR (100) NULL,
    [Level3PartyNumber]                  VARCHAR (50)   NULL,
    [Level3PartyNumberNameAlias]         NVARCHAR (20)  NULL,
    [Level3PartyNumberOriganizationName] NVARCHAR (100) NULL,
    [Level4PartyNumber]                  VARCHAR (50)   NULL,
    [Level4PartyNumberNameAlias]         NVARCHAR (20)  NULL,
    [Level4PartyNumberOriganizationName] NVARCHAR (100) NULL,
    [DepartmentKey]                      BIGINT         NOT NULL
);


GO
PRINT N'Creating [dbo].[DimJobLevelCode]...';


GO
CREATE TABLE [dbo].[DimJobLevelCode] (
    [JobLevelCodeDimKey] INT             NOT NULL,
    [JobLevelCode]       VARCHAR (10)    NOT NULL,
    [ApprovalLevel]      VARCHAR (3)     NULL,
    [Expenses]           DECIMAL (38, 2) NULL,
    [Agreements]         DECIMAL (38, 2) NULL,
    [Entity]             VARCHAR (5)     NOT NULL,
    [CreatedBy]          VARCHAR (50)    NULL,
    [CreatedDate]        DATE            NULL,
    [UpdatedBy]          VARCHAR (50)    NULL,
    [UpdatedDate]        DATE            NULL
);


GO
PRINT N'Creating [dbo].[DimProject]...';


GO
CREATE TABLE [dbo].[DimProject] (
    [ProjectKey]               INT           IDENTITY (1, 1) NOT NULL,
    [ProjectNumber]            VARCHAR (10)  NULL,
    [ProjectDescription]       NVARCHAR (60) NULL,
    [ProjectNumberDescription] NVARCHAR (73) NOT NULL,
    [ProjectDescriptionNumber] NVARCHAR (73) NOT NULL,
    [Partition]                VARCHAR (20)  NULL,
    [DataAreaID]               VARCHAR (4)   NULL,
    [ProjectID]                INT           NULL,
    [ProjectIsActive]          INT           NULL,
    CONSTRAINT [PK_DimProject] PRIMARY KEY CLUSTERED ([ProjectKey] ASC)
);


GO
PRINT N'Creating [dbo].[DimProject].[IX_DimProject]...';


GO
CREATE NONCLUSTERED INDEX [IX_DimProject]
    ON [dbo].[DimProject]([ProjectNumber] ASC, [DataAreaID] ASC);


GO
PRINT N'Creating [dbo].[DimScenario]...';


GO
CREATE TABLE [dbo].[DimScenario] (
    [ScenarioKey]     INT          IDENTITY (1, 1) NOT NULL,
    [ScenarioTypeKey] INT          NOT NULL,
    [SubScenario]     VARCHAR (50) NOT NULL,
    [Official]        BIT          NOT NULL,
    CONSTRAINT [PK_DimScenario] PRIMARY KEY CLUSTERED ([ScenarioKey] ASC)
);


GO
PRINT N'Creating [dbo].[DimScenarioType]...';


GO
CREATE TABLE [dbo].[DimScenarioType] (
    [ScenarioTypeKey] INT          IDENTITY (1, 1) NOT NULL,
    [ScenarioType]    VARCHAR (50) NOT NULL,
    [RichWasHere]     VARCHAR (50) NULL,
    [ScenarioKey]     INT          NULL,
    CONSTRAINT [PK_DimScenarioType] PRIMARY KEY CLUSTERED ([ScenarioTypeKey] ASC)
);


GO
PRINT N'Creating [dbo].[DimSupplier]...';


GO
CREATE TABLE [dbo].[DimSupplier] (
    [SupplierKey]     INT           IDENTITY (1, 1) NOT NULL,
    [SupplierName]    VARCHAR (250) NULL,
    [CoupaSupplierID] INT           NULL,
    [Entity]          VARCHAR (10)  NULL,
    [SupplierID]      VARCHAR (20)  NULL,
    [LastUpdated]     DATETIME      NULL,
    [D365SupplierID]  VARCHAR (20)  NULL,
    CONSTRAINT [PK_DimSupplier] PRIMARY KEY CLUSTERED ([SupplierKey] ASC)
);


GO
PRINT N'Creating [dbo].[DimTask]...';


GO
CREATE TABLE [dbo].[DimTask] (
    [TaskKey]               INT           IDENTITY (1, 1) NOT NULL,
    [TaskNumber]            VARCHAR (10)  NULL,
    [TaskDescription]       NVARCHAR (60) NULL,
    [TaskNumberDescription] NVARCHAR (73) NOT NULL,
    [TaskDescriptionNumber] NVARCHAR (73) NOT NULL,
    [Partition]             VARCHAR (20)  NULL,
    [DataAreaID]            VARCHAR (4)   NULL,
    CONSTRAINT [PK_DimTask] PRIMARY KEY CLUSTERED ([TaskKey] ASC)
);


GO
PRINT N'Creating [dbo].[DimTask].[IX_DimTask]...';


GO
CREATE NONCLUSTERED INDEX [IX_DimTask]
    ON [dbo].[DimTask]([TaskNumber] ASC, [DataAreaID] ASC);


GO
PRINT N'Creating [dbo].[DimUser]...';


GO
CREATE TABLE [dbo].[DimUser] (
    [UserKey]           INT            IDENTITY (1, 1) NOT NULL,
    [UserName]          VARCHAR (100)  NULL,
    [CoupaUserID]       INT            NULL,
    [EmployeeNumber]    VARCHAR (50)   NULL,
    [Email]             VARCHAR (100)  NULL,
    [ManagerKey]        INT            NULL,
    [DepartmentKey]     INT            NULL,
    [FirstName]         VARCHAR (100)  NULL,
    [LastName]          VARCHAR (100)  NULL,
    [FullName]          VARCHAR (200)  NULL,
    [StockLevelCode]    VARCHAR (15)   NULL,
    [UserType]          VARCHAR (20)   NULL,
    [Active]            BIT            NULL,
    [CompanyCode]       VARCHAR (10)   NULL,
    [DateInserted]      DATETIME       NULL,
    [DateModified]      DATETIME       NULL,
    [PubsUserId]        INT            NULL,
    [Notes]             VARCHAR (100)  NULL,
    [FTE]               DECIMAL (5, 2) NULL,
    [JobTitle]          VARCHAR (100)  NULL,
    [TerminationDate]   DATETIME       NULL,
    [OriginalHireDate]  DATETIME       NULL,
    [LatestHireDate]    DATETIME       NULL,
    [FirstNameFormal]   VARCHAR (30)   NULL,
    [ExemptStatus]      VARCHAR (15)   NULL,
    [WorkplaceLocation] VARCHAR (15)   NULL,
    [WorkplaceName]     VARCHAR (80)   NULL,
    [EmployeeId]        VARCHAR (20)   NULL,
    [EmailUltiPro]      VARCHAR (100)  NULL,
    [WorkPhone]         VARCHAR (50)   NULL,
    [CellPhone]         VARCHAR (50)   NULL,
    CONSTRAINT [PK_DimUser] PRIMARY KEY CLUSTERED ([UserKey] ASC)
);


GO
PRINT N'Creating [dbo].[DimUser_BadUsersBackup_08282020]...';


GO
CREATE TABLE [dbo].[DimUser_BadUsersBackup_08282020] (
    [UserKey]           INT            IDENTITY (1, 1) NOT NULL,
    [UserName]          VARCHAR (100)  NULL,
    [CoupaUserID]       INT            NULL,
    [EmployeeNumber]    VARCHAR (50)   NULL,
    [Email]             VARCHAR (100)  NULL,
    [ManagerKey]        INT            NULL,
    [DepartmentKey]     INT            NULL,
    [FirstName]         VARCHAR (100)  NULL,
    [LastName]          VARCHAR (100)  NULL,
    [FullName]          VARCHAR (200)  NULL,
    [StockLevelCode]    VARCHAR (15)   NULL,
    [UserType]          VARCHAR (20)   NULL,
    [Active]            BIT            NULL,
    [CompanyCode]       VARCHAR (10)   NULL,
    [DateInserted]      DATETIME       NULL,
    [DateModified]      DATETIME       NULL,
    [PubsUserId]        INT            NULL,
    [Notes]             VARCHAR (100)  NULL,
    [FTE]               DECIMAL (5, 2) NULL,
    [JobTitle]          VARCHAR (100)  NULL,
    [TerminationDate]   DATETIME       NULL,
    [OriginalHireDate]  DATETIME       NULL,
    [LatestHireDate]    DATETIME       NULL,
    [FirstNameFormal]   VARCHAR (30)   NULL,
    [ExemptStatus]      VARCHAR (15)   NULL,
    [WorkplaceLocation] VARCHAR (15)   NULL,
    [WorkplaceName]     VARCHAR (80)   NULL,
    [EmployeeId]        VARCHAR (20)   NULL,
    [EmailUltiPro]      VARCHAR (100)  NULL,
    [WorkPhone]         VARCHAR (50)   NULL,
    [CellPhone]         VARCHAR (50)   NULL
);


GO
PRINT N'Creating [dbo].[DirPartyV2Staging]...';


GO
CREATE TABLE [dbo].[DirPartyV2Staging] (
    [DEFINITIONGROUP]                   NVARCHAR (60)   NOT NULL,
    [EXECUTIONID]                       NVARCHAR (90)   NOT NULL,
    [ISSELECTED]                        INT             NOT NULL,
    [TRANSFERSTATUS]                    INT             NOT NULL,
    [PARTYNUMBER]                       NVARCHAR (40)   NOT NULL,
    [PARTYTYPE]                         NVARCHAR (13)   NOT NULL,
    [NAMEALIAS]                         NVARCHAR (20)   NOT NULL,
    [KNOWNAS]                           NVARCHAR (100)  NOT NULL,
    [LANGUAGEID]                        NVARCHAR (7)    NOT NULL,
    [ADDRESSBOOKS]                      NVARCHAR (200)  NOT NULL,
    [ORGANIZATIONNAME]                  NVARCHAR (100)  NOT NULL,
    [ORGANIZATIONABCCODE]               INT             NOT NULL,
    [ORGANIZATIONNUMOFEMPLOYEES]        INT             NOT NULL,
    [ORGANIZATIONNUMBER]                NVARCHAR (25)   NOT NULL,
    [ORGANIZATIONPHONETICNAME]          NVARCHAR (100)  NOT NULL,
    [PERSONFIRSTNAME]                   NVARCHAR (25)   NOT NULL,
    [PERSONMIDDLENAME]                  NVARCHAR (25)   NOT NULL,
    [PERSONLASTNAMEPREFIX]              NVARCHAR (25)   NOT NULL,
    [PERSONLASTNAME]                    NVARCHAR (25)   NOT NULL,
    [PERSONINITIALS]                    NVARCHAR (10)   NOT NULL,
    [PERSONPERSONALSUFFIX]              NVARCHAR (50)   NOT NULL,
    [PERSONPERSONALTITLE]               NVARCHAR (50)   NOT NULL,
    [PERSONPROFESSIONALTITLE]           NVARCHAR (50)   NOT NULL,
    [PERSONPROFESSIONALSUFFIX]          NVARCHAR (50)   NOT NULL,
    [PERSONPHONETICFIRSTNAME]           NVARCHAR (25)   NOT NULL,
    [PERSONPHONETICLASTNAME]            NVARCHAR (25)   NOT NULL,
    [PERSONPHONETICMIDDLENAME]          NVARCHAR (25)   NOT NULL,
    [PERSONGENDER]                      INT             NOT NULL,
    [PERSONMARITALSTATUS]               INT             NOT NULL,
    [PERSONHOBBIES]                     NVARCHAR (150)  NOT NULL,
    [PERSONCHILDRENNAMES]               NVARCHAR (150)  NOT NULL,
    [PERSONANNIVERSARYDAY]              INT             NOT NULL,
    [PERSONANNIVERSARYMONTH]            INT             NOT NULL,
    [PERSONANNIVERSARYYEAR]             INT             NOT NULL,
    [PERSONBIRTHDAY]                    INT             NOT NULL,
    [PERSONBIRTHMONTH]                  INT             NOT NULL,
    [PERSONBIRTHYEAR]                   INT             NOT NULL,
    [LEGALENTITYDATAAREA]               NVARCHAR (4)    NOT NULL,
    [OPERATINGUNITNUMBER]               NVARCHAR (30)   NOT NULL,
    [OPERATINGUNITTYPE]                 INT             NOT NULL,
    [OPERATINGUNITTYPESTR]              NVARCHAR (60)   NOT NULL,
    [TEAMTYPE]                          NVARCHAR (60)   NOT NULL,
    [TEAMDESCRIPTION]                   NVARCHAR (60)   NOT NULL,
    [FULLPRIMARYADDRESS]                NVARCHAR (250)  NOT NULL,
    [ADDRESSZIPCODE]                    NVARCHAR (10)   NOT NULL,
    [ADDRESSCOUNTRYREGIONID]            NVARCHAR (10)   NOT NULL,
    [ADDRESSCOUNTRYREGIONISOCODE]       NVARCHAR (2)    NOT NULL,
    [ADDRESSSTREET]                     NVARCHAR (250)  NOT NULL,
    [ADDRESSCITY]                       NVARCHAR (60)   NOT NULL,
    [ADDRESSCOUNTY]                     NVARCHAR (10)   NOT NULL,
    [ADDRESSDISTRICTNAME]               NVARCHAR (60)   NOT NULL,
    [ADDRESSSTATE]                      NVARCHAR (10)   NOT NULL,
    [ADDRESSLATITUDE]                   NUMERIC (32, 6) NOT NULL,
    [ADDRESSLONGITUDE]                  NUMERIC (32, 6) NOT NULL,
    [ADDRESSTIMEZONE]                   INT             NOT NULL,
    [ADDRESSVALIDFROM]                  DATETIME        NOT NULL,
    [ADDRESSVALIDTO]                    DATETIME        NOT NULL,
    [ADDRESSLOCATIONID]                 NVARCHAR (30)   NOT NULL,
    [ADDRESSLOCATIONROLES]              NVARCHAR (100)  NOT NULL,
    [ADDRESSISPRIVATE]                  INT             NOT NULL,
    [ADDRESSDESCRIPTION]                NVARCHAR (60)   NOT NULL,
    [PRIMARYCONTACTEMAIL]               NVARCHAR (255)  NOT NULL,
    [PRIMARYCONTACTEMAILDESCRIPTION]    NVARCHAR (60)   NOT NULL,
    [PRIMARYCONTACTEMAILISIM]           INT             NOT NULL,
    [PRIMARYCONTACTEMAILISPRIVATE]      INT             NOT NULL,
    [PRIMARYCONTACTEMAILPURPOSE]        NVARCHAR (100)  NOT NULL,
    [PRIMARYCONTACTFAX]                 NVARCHAR (255)  NOT NULL,
    [PRIMARYCONTACTFAXDESCRIPTION]      NVARCHAR (60)   NOT NULL,
    [PRIMARYCONTACTFAXEXTENSION]        NVARCHAR (10)   NOT NULL,
    [PRIMARYCONTACTFAXISPRIVATE]        INT             NOT NULL,
    [PRIMARYCONTACTFAXPURPOSE]          NVARCHAR (100)  NOT NULL,
    [PRIMARYCONTACTPHONE]               NVARCHAR (255)  NOT NULL,
    [PRIMARYCONTACTPHONEDESCRIPTION]    NVARCHAR (60)   NOT NULL,
    [PRIMARYCONTACTPHONEEXTENSION]      NVARCHAR (10)   NOT NULL,
    [PRIMARYCONTACTPHONEISMOBILE]       INT             NOT NULL,
    [PRIMARYCONTACTPHONEISPRIVATE]      INT             NOT NULL,
    [PRIMARYCONTACTPHONEPURPOSE]        NVARCHAR (100)  NOT NULL,
    [PRIMARYCONTACTTELEX]               NVARCHAR (255)  NOT NULL,
    [PRIMARYCONTACTTELEXDESCRIPTION]    NVARCHAR (60)   NOT NULL,
    [PRIMARYCONTACTTELEXISPRIVATE]      INT             NOT NULL,
    [PRIMARYCONTACTTELEXPURPOSE]        NVARCHAR (100)  NOT NULL,
    [PRIMARYCONTACTURL]                 NVARCHAR (255)  NOT NULL,
    [PRIMARYCONTACTURLDESCRIPTION]      NVARCHAR (60)   NOT NULL,
    [PRIMARYCONTACTURLISPRIVATE]        INT             NOT NULL,
    [PRIMARYCONTACTURLPURPOSE]          NVARCHAR (100)  NOT NULL,
    [PRIMARYCONTACTFACEBOOK]            NVARCHAR (255)  NOT NULL,
    [PRIMARYCONTACTFACEBOOKDESCRIPTION] NVARCHAR (60)   NOT NULL,
    [PRIMARYCONTACTFACEBOOKISPRIVATE]   INT             NOT NULL,
    [PRIMARYCONTACTFACEBOOKPURPOSE]     NVARCHAR (100)  NOT NULL,
    [PRIMARYCONTACTLINKEDIN]            NVARCHAR (255)  NOT NULL,
    [PRIMARYCONTACTLINKEDINDESCRIPTION] NVARCHAR (60)   NOT NULL,
    [PRIMARYCONTACTLINKEDINISPRIVATE]   INT             NOT NULL,
    [PRIMARYCONTACTLINKEDINPURPOSE]     NVARCHAR (100)  NOT NULL,
    [PRIMARYCONTACTTWITTER]             NVARCHAR (255)  NOT NULL,
    [PRIMARYCONTACTTWITTERDESCRIPTION]  NVARCHAR (60)   NOT NULL,
    [PRIMARYCONTACTTWITTERISPRIVATE]    INT             NOT NULL,
    [PRIMARYCONTACTTWITTERPURPOSE]      NVARCHAR (100)  NOT NULL,
    [ELECTRONICLOCATIONID]              NVARCHAR (30)   NOT NULL,
    [ISPRIMARYADDRESSLOCATIONOWNER]     INT             NOT NULL,
    [PARTITION]                         NVARCHAR (20)   NOT NULL,
    [SYNCSTARTDATETIME]                 DATETIME        NOT NULL,
    [RECID]                             BIGINT          NOT NULL,
    CONSTRAINT [PK_DirPartyV2Staging] PRIMARY KEY CLUSTERED ([EXECUTIONID] ASC, [PARTYNUMBER] ASC, [PARTITION] ASC)
);


GO
PRINT N'Creating [dbo].[DirPartyV2Staging].[nci_wi_DirPartyV2Staging_6A45374A9DC364E9A6E760702E17806D]...';


GO
CREATE NONCLUSTERED INDEX [nci_wi_DirPartyV2Staging_6A45374A9DC364E9A6E760702E17806D]
    ON [dbo].[DirPartyV2Staging]([PARTYNUMBER] ASC)
    INCLUDE([ORGANIZATIONNAME]);


GO
PRINT N'Creating [dbo].[DisplayValueExplosion]...';


GO
CREATE TABLE [dbo].[DisplayValueExplosion] (
    [DisplayValue] VARCHAR (100) NULL,
    [MainAccount]  VARCHAR (10)  NULL,
    [Department]   VARCHAR (10)  NULL,
    [Project]      VARCHAR (10)  NULL,
    [Task]         VARCHAR (10)  NULL,
    [Partition]    VARCHAR (20)  NULL,
    [DataAreaID]   VARCHAR (4)   NULL
);


GO
PRINT N'Creating [dbo].[DisplayValueExplosion].[IX_DisplayValueExplosion]...';


GO
CREATE NONCLUSTERED INDEX [IX_DisplayValueExplosion]
    ON [dbo].[DisplayValueExplosion]([DisplayValue] ASC, [DataAreaID] ASC, [Partition] ASC);


GO
PRINT N'Creating [dbo].[Employee_Snapshot]...';


GO
CREATE TABLE [dbo].[Employee_Snapshot] (
    [UserKey]            INT             NOT NULL,
    [FiscalPeriod]       VARCHAR (7)     NOT NULL,
    [Department]         CHAR (3)        NOT NULL,
    [EmployeeName]       VARCHAR (100)   NOT NULL,
    [Title]              VARCHAR (80)    NULL,
    [ReportsToName]      VARCHAR (100)   NULL,
    [CompanyCode]        VARCHAR (15)    NULL,
    [FullTimeEquivalent] NUMERIC (19, 2) NULL,
    [AnnualSal]          NVARCHAR (50)   NULL,
    CONSTRAINT [UQ_UserAndPeriod] UNIQUE NONCLUSTERED ([UserKey] ASC, [FiscalPeriod] ASC)
);


GO
PRINT N'Creating [dbo].[Employee_Snapshot].[idx_EmployeeSnapshot_EmployeeName]...';


GO
CREATE NONCLUSTERED INDEX [idx_EmployeeSnapshot_EmployeeName]
    ON [dbo].[Employee_Snapshot]([EmployeeName] ASC) WITH (FILLFACTOR = 80);


GO
PRINT N'Creating [dbo].[EmployeeHierarchy]...';


GO
CREATE TABLE [dbo].[EmployeeHierarchy] (
    [ReportsToEMail]    VARCHAR (500) NULL,
    [EmployeeFullName]  VARCHAR (100) NULL,
    [Department_Number] INT           NULL,
    [SecurityKey]       VARCHAR (151) NULL
);


GO
PRINT N'Creating [dbo].[ExchangeRateEntityStaging]...';


GO
CREATE TABLE [dbo].[ExchangeRateEntityStaging] (
    [DEFINITIONGROUP]        NVARCHAR (60)    NOT NULL,
    [EXECUTIONID]            NVARCHAR (90)    NOT NULL,
    [ISSELECTED]             INT              NOT NULL,
    [TRANSFERSTATUS]         INT              NOT NULL,
    [EXCHANGERATEFORSTORAGE] NUMERIC (32, 16) NOT NULL,
    [STARTDATE]              DATETIME         NOT NULL,
    [ENDDATE]                DATETIME         NOT NULL,
    [CONVERSIONFACTOR]       INT              NOT NULL,
    [FROMCURRENCY]           NVARCHAR (3)     NOT NULL,
    [TOCURRENCY]             NVARCHAR (3)     NOT NULL,
    [RATETYPEDESCRIPTION]    NVARCHAR (60)    NOT NULL,
    [RATETYPENAME]           NVARCHAR (20)    NOT NULL,
    [RATE]                   NUMERIC (32, 16) NOT NULL,
    [PARTITION]              NVARCHAR (20)    NOT NULL,
    [SYNCSTARTDATETIME]      DATETIME         NOT NULL,
    [RECID]                  BIGINT           NOT NULL,
    CONSTRAINT [PK_ExchangeRateEntityStaging] PRIMARY KEY CLUSTERED ([EXECUTIONID] ASC, [STARTDATE] ASC, [FROMCURRENCY] ASC, [TOCURRENCY] ASC, [RATETYPENAME] ASC, [PARTITION] ASC)
);


GO
PRINT N'Creating [dbo].[FactAccountingSourceExplorer]...';


GO
CREATE TABLE [dbo].[FactAccountingSourceExplorer] (
    [SubLedgerSource]                    VARCHAR (50)    NULL,
    [JournalNumber]                      NVARCHAR (20)   NOT NULL,
    [AccountingDate]                     DATETIME        NOT NULL,
    [VOUCHER]                            NVARCHAR (20)   NOT NULL,
    [DocumentNumber]                     NVARCHAR (20)   NOT NULL,
    [DocumentDate]                       DATETIME        NOT NULL,
    [JournalCategory]                    INT             NOT NULL,
    [PostingType]                        INT             NOT NULL,
    [SubLedgerDocumentDescription]       NVARCHAR (60)   NOT NULL,
    [LedgerAccount]                      NVARCHAR (500)  NOT NULL,
    [SubLedgerTransactionCurrency]       NVARCHAR (3)    NOT NULL,
    [LedgerDimension]                    BIGINT          NOT NULL,
    [FactTransactionKey]                 BIGINT          NOT NULL,
    [IsCorrection]                       INT             NOT NULL,
    [Side]                               INT             NOT NULL,
    [SubLedgerAccountingCurrencyAmount]  NUMERIC (32, 6) NOT NULL,
    [SubLedgerReportingCurrencyAmount]   NUMERIC (32, 6) NOT NULL,
    [SubLedgerTransactionCurrencyAmount] NUMERIC (32, 6) NOT NULL,
    [MonetaryAmount]                     INT             NULL,
    [AccountingDistributionRecId]        BIGINT          NOT NULL,
    [DestinationCompany]                 NVARCHAR (1000) NULL,
    [TypeEnumName]                       VARCHAR (1000)  NULL,
    [SourceDocumentRecId]                BIGINT          NOT NULL,
    [SourceRelationType]                 VARCHAR (1000)  NULL,
    [MainAccountId]                      BIGINT          NOT NULL,
    [MainAccountName]                    VARCHAR (1000)  NULL,
    [SubLedgerPartyNumber]               NVARCHAR (1000) NULL,
    [SubLedgerPartyName]                 NVARCHAR (1000) NULL,
    [LINEDOCUMENTREFERENCE]              NVARCHAR (1000) NULL
);


GO
PRINT N'Creating [dbo].[FactTransaction]...';


GO
CREATE TABLE [dbo].[FactTransaction] (
    [AccountString]            NVARCHAR (500)  NOT NULL,
    [TransactionDate]          DATETIME        NOT NULL,
    [Scenario]                 VARCHAR (60)    NULL,
    [TransactionDescription]   NVARCHAR (60)   NOT NULL,
    [BudgetAmount]             NUMERIC (32, 6) NULL,
    [IsAllocated]              VARCHAR (30)    NULL,
    [RecID]                    BIGINT          NOT NULL,
    [Partition]                NVARCHAR (20)   NOT NULL,
    [AccountKey]               INT             NULL,
    [DepartmentKey]            INT             NULL,
    [ProjectKey]               INT             NULL,
    [TaskKey]                  INT             NULL,
    [FiscalPeriodKey]          INT             NOT NULL,
    [EntityKey]                INT             NULL,
    [TransactionAmount]        MONEY           NULL,
    [ReportingCurrencyAmount]  MONEY           NULL,
    [AccountingCurrencyAmount] MONEY           NULL,
    [ReportingCurrencyCode]    VARCHAR (10)    NULL,
    [AccountingCurrencyCode]   VARCHAR (10)    NULL,
    [TransactionCurrencyCode]  VARCHAR (10)    NULL,
    [InvoiceNumber]            VARCHAR (50)    NULL,
    [SecurityKey]              INT             NULL,
    [Voucher]                  VARCHAR (50)    NULL,
    [SubScenario]              VARCHAR (60)    NULL,
    [FCastQ1Amount]            MONEY           NULL,
    [FCastQ2Amount]            MONEY           NULL,
    [FCastQ3Amount]            MONEY           NULL,
    [FCastQ4Amount]            MONEY           NULL,
    [PostingTypeDescription]   VARCHAR (500)   NULL
);


GO
PRINT N'Creating [dbo].[FactTransaction].[IX_FactTransaction]...';


GO
CREATE NONCLUSTERED INDEX [IX_FactTransaction]
    ON [dbo].[FactTransaction]([EntityKey] ASC, [DepartmentKey] ASC);


GO
PRINT N'Creating [dbo].[FactTransaction].[IX1_FactTransaction]...';


GO
CREATE NONCLUSTERED INDEX [IX1_FactTransaction]
    ON [dbo].[FactTransaction]([AccountKey] ASC);


GO
PRINT N'Creating [dbo].[FactTransaction_v2]...';


GO
CREATE TABLE [dbo].[FactTransaction_v2] (
    [EntityKey]              INT            NOT NULL,
    [TransactionDate]        DATETIME       NOT NULL,
    [ScenarioKey]            INT            NOT NULL,
    [AccountString]          NVARCHAR (500) NOT NULL,
    [DepartmentKey]          INT            NOT NULL,
    [AccountKey]             INT            NOT NULL,
    [ProjectKey]             INT            NOT NULL,
    [TaskKey]                INT            NOT NULL,
    [FiscalPeriodKey]        INT            NOT NULL,
    [TransactionDescription] NVARCHAR (60)  NULL,
    [TransactionAmount]      MONEY          NOT NULL
);


GO
PRINT N'Creating [dbo].[FactTransactionPL]...';


GO
CREATE TABLE [dbo].[FactTransactionPL] (
    [AccountString]            NVARCHAR (500)  NOT NULL,
    [TransactionDate]          DATETIME        NOT NULL,
    [Scenario]                 VARCHAR (60)    NULL,
    [TransactionDescription]   NVARCHAR (60)   NOT NULL,
    [BudgetAmount]             NUMERIC (32, 6) NULL,
    [IsAllocated]              VARCHAR (30)    NULL,
    [RecID]                    BIGINT          NOT NULL,
    [Partition]                NVARCHAR (20)   NOT NULL,
    [AccountKey]               INT             NULL,
    [DepartmentKey]            INT             NULL,
    [ProjectKey]               INT             NULL,
    [TaskKey]                  INT             NULL,
    [FiscalPeriodKey]          INT             NOT NULL,
    [EntityKey]                INT             NULL,
    [TransactionAmount]        MONEY           NULL,
    [ReportingCurrencyAmount]  MONEY           NULL,
    [AccountingCurrencyAmount] MONEY           NULL,
    [ReportingCurrencyCode]    VARCHAR (10)    NULL,
    [AccountingCurrencyCode]   VARCHAR (10)    NULL,
    [TransactionCurrencyCode]  VARCHAR (10)    NULL,
    [InvoiceNumber]            VARCHAR (50)    NULL,
    [SecurityKey]              INT             NULL,
    [Voucher]                  VARCHAR (50)    NULL
);


GO
PRINT N'Creating [dbo].[FinancialDimensionValueEntityStaging]...';


GO
CREATE TABLE [dbo].[FinancialDimensionValueEntityStaging] (
    [DEFINITIONGROUP]         NVARCHAR (60) NOT NULL,
    [EXECUTIONID]             NVARCHAR (90) NOT NULL,
    [ISSELECTED]              INT           NOT NULL,
    [TRANSFERSTATUS]          INT           NOT NULL,
    [FINANCIALDIMENSION]      NVARCHAR (60) NOT NULL,
    [LEGALENTITYID]           NVARCHAR (4)  NOT NULL,
    [DIMENSIONVALUE]          NVARCHAR (30) NOT NULL,
    [DESCRIPTION]             NVARCHAR (60) NOT NULL,
    [ACTIVEFROM]              DATETIME      NOT NULL,
    [ACTIVETO]                DATETIME      NOT NULL,
    [ISSUSPENDED]             INT           NOT NULL,
    [ISTOTAL]                 INT           NOT NULL,
    [ISBLOCKEDFORMANUALENTRY] INT           NOT NULL,
    [GROUPDIMENSION]          NVARCHAR (10) NOT NULL,
    [OWNER]                   NVARCHAR (25) NOT NULL,
    [ISBALANCING_PSN]         INT           NOT NULL,
    [PARTITION]               NVARCHAR (20) NOT NULL,
    [SYNCSTARTDATETIME]       DATETIME      NOT NULL,
    CONSTRAINT [PK_FinancialDimensionValueEntityStaging] PRIMARY KEY CLUSTERED ([EXECUTIONID] ASC, [FINANCIALDIMENSION] ASC, [LEGALENTITYID] ASC, [DIMENSIONVALUE] ASC, [PARTITION] ASC)
);


GO
PRINT N'Creating [dbo].[FiscalPeriodStaging]...';


GO
CREATE TABLE [dbo].[FiscalPeriodStaging] (
    [DEFINITIONGROUP]   NVARCHAR (60) NOT NULL,
    [EXECUTIONID]       NVARCHAR (90) NOT NULL,
    [ISSELECTED]        INT           NOT NULL,
    [TRANSFERSTATUS]    INT           NOT NULL,
    [COMMENTS]          NVARCHAR (60) NOT NULL,
    [ENDDATE]           DATETIME      NOT NULL,
    [MONTH]             INT           NOT NULL,
    [PERIODNAME]        NVARCHAR (60) NOT NULL,
    [QUARTER]           INT           NOT NULL,
    [SHORTNAME]         NVARCHAR (8)  NOT NULL,
    [STARTDATE]         DATETIME      NOT NULL,
    [TYPE]              INT           NOT NULL,
    [CALENDAR]          NVARCHAR (10) NOT NULL,
    [FISCALYEAR]        NVARCHAR (10) NOT NULL,
    [CALENDARTYPE]      INT           NOT NULL,
    [DAYS]              INT           NOT NULL,
    [PARTITION]         NVARCHAR (20) NOT NULL,
    [SYNCSTARTDATETIME] DATETIME      NOT NULL,
    [RECID]             BIGINT        NOT NULL,
    CONSTRAINT [PK_FiscalPeriodStaging] PRIMARY KEY CLUSTERED ([EXECUTIONID] ASC, [ENDDATE] ASC, [PERIODNAME] ASC, [STARTDATE] ASC, [CALENDAR] ASC, [FISCALYEAR] ASC, [PARTITION] ASC)
);


GO
PRINT N'Creating [dbo].[GeneralJournalAccountEntryStaging]...';


GO
CREATE TABLE [dbo].[GeneralJournalAccountEntryStaging] (
    [DEFINITIONGROUP]                 NVARCHAR (60)   NOT NULL,
    [EXECUTIONID]                     NVARCHAR (90)   NOT NULL,
    [ISSELECTED]                      INT             NOT NULL,
    [TRANSFERSTATUS]                  INT             NOT NULL,
    [JOURNALNUMBER]                   NVARCHAR (20)   NOT NULL,
    [VOUCHER]                         NVARCHAR (20)   NOT NULL,
    [ACCOUNTINGDATE]                  DATETIME        NOT NULL,
    [POSTINGLAYER]                    INT             NOT NULL,
    [LEDGERACCOUNT]                   NVARCHAR (500)  NOT NULL,
    [TRANSACTIONCURRENCYCODE]         NVARCHAR (3)    NOT NULL,
    [TRANSACTIONCURRENCYCREDITAMOUNT] NUMERIC (32, 6) NOT NULL,
    [TRANSACTIONCURRENCYDEBITAMOUNT]  NUMERIC (32, 6) NOT NULL,
    [TRANSACTIONCURRENCYAMOUNT]       NUMERIC (32, 6) NOT NULL,
    [ACCOUNTINGCURRENCYAMOUNT]        NUMERIC (32, 6) NOT NULL,
    [REPORTINGCURRENCYAMOUNT]         NUMERIC (32, 6) NOT NULL,
    [DESCRIPTION]                     NVARCHAR (60)   NOT NULL,
    [QUANTITY]                        NUMERIC (32, 6) NOT NULL,
    [POSTINGTYPE]                     INT             NOT NULL,
    [JOURNALCATEGORY]                 INT             NOT NULL,
    [ISCORRECTION]                    INT             NOT NULL,
    [ISCREDIT]                        INT             NOT NULL,
    [ACKNOWLEDGEMENTDATE]             DATETIME        NOT NULL,
    [DOCUMENTDATE]                    DATETIME        NOT NULL,
    [DOCUMENTNUMBER]                  NVARCHAR (20)   NOT NULL,
    [LEDGERNAME]                      NVARCHAR (20)   NOT NULL,
    [GENERALJOURNALACCOUNTENTRYRECID] BIGINT          NOT NULL,
    [ACCOUNTDISPLAYVALUE]             NVARCHAR (500)  NOT NULL,
    [PARTITION]                       NVARCHAR (20)   NOT NULL,
    [DATAAREAID]                      NVARCHAR (4)    NOT NULL,
    [SYNCSTARTDATETIME]               DATETIME        NOT NULL,
    [RECID]                           BIGINT          NOT NULL,
    CONSTRAINT [PK_GeneralJournalAccountEntryStaging] PRIMARY KEY CLUSTERED ([EXECUTIONID] ASC, [GENERALJOURNALACCOUNTENTRYRECID] ASC, [DATAAREAID] ASC, [PARTITION] ASC)
);


GO
PRINT N'Creating [dbo].[GeneralJournalAccountEntryStaging].[nci_wi_GeneralJournalAccountEntryStaging_3D8C31357D386CD9A92D9A77B00E2B55]...';


GO
CREATE NONCLUSTERED INDEX [nci_wi_GeneralJournalAccountEntryStaging_3D8C31357D386CD9A92D9A77B00E2B55]
    ON [dbo].[GeneralJournalAccountEntryStaging]([DATAAREAID] ASC, [EXECUTIONID] ASC);


GO
PRINT N'Creating [dbo].[InvoiceHeader]...';


GO
CREATE TABLE [dbo].[InvoiceHeader] (
    [Entity]         VARCHAR (4)   NOT NULL,
    [InvoiceID]      INT           NOT NULL,
    [InvoiceNumber]  VARCHAR (100) NULL,
    [InvoiceDate]    DATETIME      NULL,
    [SupplierKey]    INT           NULL,
    [Status]         VARCHAR (100) NULL,
    [Created_By]     VARCHAR (100) NULL,
    [Created_At]     DATETIME      NULL,
    [Updated_By]     VARCHAR (100) NULL,
    [Updated_At]     DATETIME      NULL,
    [WH_Created]     DATETIME      NULL,
    [PaymentDate]    DATETIME      NULL,
    [HandlingAmount] FLOAT (53)    NULL,
    [MiscAmount]     FLOAT (53)    NULL,
    [ShippingAmount] FLOAT (53)    NULL,
    [TaxAmount]      FLOAT (53)    NULL
);


GO
PRINT N'Creating [dbo].[InvoiceHeader].[IX_InvoiceHeader]...';


GO
CREATE NONCLUSTERED INDEX [IX_InvoiceHeader]
    ON [dbo].[InvoiceHeader]([InvoiceID] ASC);


GO
PRINT N'Creating [dbo].[InvoiceLine]...';


GO
CREATE TABLE [dbo].[InvoiceLine] (
    [InvoiceLineID]  INT           NOT NULL,
    [InvoiceID]      INT           NOT NULL,
    [Description]    VARCHAR (500) NULL,
    [PO_ID]          INT           NULL,
    [PO_Number]      VARCHAR (25)  NULL,
    [PO_Line_Number] INT           NULL,
    [Price]          FLOAT (53)    NULL,
    [Total]          FLOAT (53)    NULL
);


GO
PRINT N'Creating [dbo].[InvoiceLine].[IX_InvoiceLine]...';


GO
CREATE NONCLUSTERED INDEX [IX_InvoiceLine]
    ON [dbo].[InvoiceLine]([InvoiceID] ASC);


GO
PRINT N'Creating [dbo].[InvoiceLineAllocation]...';


GO
CREATE TABLE [dbo].[InvoiceLineAllocation] (
    [InvoiceLineID]     INT        NOT NULL,
    [InvoiceID]         INT        NOT NULL,
    [DepartmentKey]     INT        NULL,
    [AccountKey]        INT        NULL,
    [ProjectKey]        INT        NULL,
    [TaskKey]           INT        NULL,
    [AllocationPercent] FLOAT (53) NULL,
    [Amount]            FLOAT (53) NULL
);


GO
PRINT N'Creating [dbo].[InvoiceLineAllocation].[IX_InvoiceLineAllocation]...';


GO
CREATE NONCLUSTERED INDEX [IX_InvoiceLineAllocation]
    ON [dbo].[InvoiceLineAllocation]([InvoiceID] ASC);


GO
PRINT N'Creating [dbo].[IonisUsers]...';


GO
CREATE TABLE [dbo].[IonisUsers] (
    [UserName]     VARCHAR (50) NULL,
    [FullName]     VARCHAR (50) NULL,
    [DepartmentID] VARCHAR (50) NULL,
    [Entity]       VARCHAR (50) NULL
);


GO
PRINT N'Creating [dbo].[IonisUsersV2]...';


GO
CREATE TABLE [dbo].[IonisUsersV2] (
    [UserName]     VARCHAR (50) NULL,
    [FullName]     VARCHAR (50) NULL,
    [DepartmentID] VARCHAR (50) NULL,
    [Entity]       VARCHAR (50) NULL
);


GO
PRINT N'Creating [dbo].[LedgerAccountStructureStaging]...';


GO
CREATE TABLE [dbo].[LedgerAccountStructureStaging] (
    [DESCRIPTION]          NVARCHAR (60) NOT NULL,
    [STATUS]               INT           NOT NULL,
    [SEGMENTNAME01]        NVARCHAR (60) NOT NULL,
    [SEGMENTNAME02]        NVARCHAR (60) NOT NULL,
    [SEGMENTNAME03]        NVARCHAR (60) NOT NULL,
    [SEGMENTNAME04]        NVARCHAR (60) NOT NULL,
    [SEGMENTNAME05]        NVARCHAR (60) NOT NULL,
    [SEGMENTNAME06]        NVARCHAR (60) NOT NULL,
    [SEGMENTNAME07]        NVARCHAR (60) NOT NULL,
    [SEGMENTNAME08]        NVARCHAR (60) NOT NULL,
    [SEGMENTNAME09]        NVARCHAR (60) NOT NULL,
    [SEGMENTNAME10]        NVARCHAR (60) NOT NULL,
    [SEGMENTNAME11]        NVARCHAR (60) NOT NULL,
    [DEFINITIONGROUP]      NVARCHAR (60) NOT NULL,
    [EXECUTIONID]          NVARCHAR (90) NOT NULL,
    [ISSELECTED]           INT           NOT NULL,
    [TRANSFERSTATUS]       INT           NOT NULL,
    [ACCOUNTSTRUCTURENAME] NVARCHAR (60) NOT NULL,
    [PARTITION]            NVARCHAR (20) NOT NULL,
    [SYNCSTARTDATETIME]    DATETIME      NOT NULL,
    [RECID]                BIGINT        NOT NULL,
    CONSTRAINT [PK_LedgerAccountStructureStaging] PRIMARY KEY CLUSTERED ([STATUS] ASC, [EXECUTIONID] ASC, [ACCOUNTSTRUCTURENAME] ASC, [PARTITION] ASC)
);


GO
PRINT N'Creating [dbo].[LedgerEntityStaging]...';


GO
CREATE TABLE [dbo].[LedgerEntityStaging] (
    [ACCOUNTSTRUCTURENAME1]             NVARCHAR (60) NOT NULL,
    [ACCOUNTSTRUCTURENAME2]             NVARCHAR (60) NOT NULL,
    [ACCOUNTSTRUCTURENAME3]             NVARCHAR (60) NOT NULL,
    [ACCOUNTSTRUCTURENAME4]             NVARCHAR (60) NOT NULL,
    [ACCOUNTSTRUCTURENAME5]             NVARCHAR (60) NOT NULL,
    [ACCOUNTSTRUCTURENAME6]             NVARCHAR (60) NOT NULL,
    [ACCOUNTSTRUCTURENAME7]             NVARCHAR (60) NOT NULL,
    [ACCOUNTSTRUCTURENAME8]             NVARCHAR (60) NOT NULL,
    [ACCOUNTSTRUCTURENAME9]             NVARCHAR (60) NOT NULL,
    [ACCOUNTSTRUCTURENAME10]            NVARCHAR (60) NOT NULL,
    [ACCOUNTSTRUCTURENAME11]            NVARCHAR (60) NOT NULL,
    [ACCOUNTSTRUCTURENAME12]            NVARCHAR (60) NOT NULL,
    [ACCOUNTSTRUCTURENAME13]            NVARCHAR (60) NOT NULL,
    [ACCOUNTSTRUCTURENAME14]            NVARCHAR (60) NOT NULL,
    [ACCOUNTSTRUCTURENAME15]            NVARCHAR (60) NOT NULL,
    [ACCOUNTSTRUCTURENAME16]            NVARCHAR (60) NOT NULL,
    [ACCOUNTSTRUCTURENAME17]            NVARCHAR (60) NOT NULL,
    [ACCOUNTSTRUCTURENAME18]            NVARCHAR (60) NOT NULL,
    [ACCOUNTSTRUCTURENAME19]            NVARCHAR (60) NOT NULL,
    [ACCOUNTSTRUCTURENAME20]            NVARCHAR (60) NOT NULL,
    [MAINACCOUNTIDREALIZEDGAIN]         NVARCHAR (20) NOT NULL,
    [MAINACCOUNTIDREALIZEDLOSS]         NVARCHAR (20) NOT NULL,
    [MAINACCOUNTIDUNREALIZEDGAIN]       NVARCHAR (20) NOT NULL,
    [MAINACCOUNTIDUNREALIZEDLOSS]       NVARCHAR (20) NOT NULL,
    [MAINACCOUNTIDFINANCIALGAIN]        NVARCHAR (20) NOT NULL,
    [MAINACCOUNTIDFINANCIALLOSS]        NVARCHAR (20) NOT NULL,
    [BUDGETEXCHANGERATETYPE]            NVARCHAR (20) NOT NULL,
    [DEFINITIONGROUP]                   NVARCHAR (60) NOT NULL,
    [EXECUTIONID]                       NVARCHAR (90) NOT NULL,
    [ISSELECTED]                        INT           NOT NULL,
    [TRANSFERSTATUS]                    INT           NOT NULL,
    [ACCOUNTINGCURRENCY]                NVARCHAR (3)  NOT NULL,
    [REPORTINGCURRENCY]                 NVARCHAR (3)  NOT NULL,
    [DESCRIPTION]                       NVARCHAR (60) NOT NULL,
    [FISCALCALENDAR]                    NVARCHAR (10) NOT NULL,
    [EXCHANGERATETYPE]                  NVARCHAR (20) NOT NULL,
    [ISBUDGETCONTROLENABLED]            INT           NOT NULL,
    [CHARTOFACCOUNTS]                   NVARCHAR (60) NOT NULL,
    [CHARTOFACCOUNTSRECID]              BIGINT        NOT NULL,
    [NAME]                              NVARCHAR (20) NOT NULL,
    [LEGALENTITYID]                     NVARCHAR (4)  NOT NULL,
    [BALANCINGFINANCIALDIMENSION]       NVARCHAR (60) NOT NULL,
    [LEDGERRECID]                       BIGINT        NOT NULL,
    [REPORTINGCURRENCYEXCHANGERATETYPE] NVARCHAR (20) NOT NULL,
    [PARTITION]                         NVARCHAR (20) NOT NULL,
    [SYNCSTARTDATETIME]                 DATETIME      NOT NULL,
    [RECID]                             BIGINT        NOT NULL,
    CONSTRAINT [PK_LedgerEntityStaging] PRIMARY KEY CLUSTERED ([EXECUTIONID] ASC, [LEGALENTITYID] ASC, [PARTITION] ASC)
);


GO
PRINT N'Creating [dbo].[LedgerFiscalPeriodStaging]...';


GO
CREATE TABLE [dbo].[LedgerFiscalPeriodStaging] (
    [DEFINITIONGROUP]             NVARCHAR (60) NOT NULL,
    [EXECUTIONID]                 NVARCHAR (90) NOT NULL,
    [ISSELECTED]                  INT           NOT NULL,
    [TRANSFERSTATUS]              INT           NOT NULL,
    [PERIODSTATUS]                INT           NOT NULL,
    [PERIODNAME]                  NVARCHAR (60) NOT NULL,
    [YEARNAME]                    NVARCHAR (10) NOT NULL,
    [CALENDAR]                    NVARCHAR (10) NOT NULL,
    [LEDGERNAME]                  NVARCHAR (20) NOT NULL,
    [LEDGERACCESSLEVEL]           INT           NOT NULL,
    [LEDGERUSERGROUPINFO]         NVARCHAR (10) NOT NULL,
    [TAXACCESSLEVEL]              INT           NOT NULL,
    [TAXUSERGROUPINFO]            NVARCHAR (10) NOT NULL,
    [BANKACCESSLEVEL]             INT           NOT NULL,
    [BANKUSERGROUPINFO]           NVARCHAR (10) NOT NULL,
    [CUSTACCESSLEVEL]             INT           NOT NULL,
    [CUSTUSERGROUPINFO]           NVARCHAR (10) NOT NULL,
    [VENDACCESSLEVEL]             INT           NOT NULL,
    [VENDUSERGROUPINFO]           NVARCHAR (10) NOT NULL,
    [SALESACCESSLEVEL]            INT           NOT NULL,
    [SALESUSERGROUPINFO]          NVARCHAR (10) NOT NULL,
    [PURCHACCESSLEVEL]            INT           NOT NULL,
    [PURCHUSERGROUPINFO]          NVARCHAR (10) NOT NULL,
    [INVENTACCESSLEVEL]           INT           NOT NULL,
    [INVENTUSERGROUPINFO]         NVARCHAR (10) NOT NULL,
    [PRODACCESSLEVEL]             INT           NOT NULL,
    [PRODUSERGROUPINFO]           NVARCHAR (10) NOT NULL,
    [PROJECTACCESSLEVEL]          INT           NOT NULL,
    [PROJECTUSERGROUPINFO]        NVARCHAR (10) NOT NULL,
    [FIXEDASSETSACCESSLEVEL]      INT           NOT NULL,
    [FIXEDASSETSUSERGROUPINFO]    NVARCHAR (10) NOT NULL,
    [PAYROLLACCESSLEVEL]          INT           NOT NULL,
    [PAYROLLUSERGROUPINFO]        NVARCHAR (10) NOT NULL,
    [EXPENSEACCESSLEVEL]          INT           NOT NULL,
    [EXPENSEUSERGROUPINFO]        NVARCHAR (10) NOT NULL,
    [FIXEDASSETS_RUACCESSLEVEL]   INT           NOT NULL,
    [FIXEDASSETS_RUUSERGROUPINFO] NVARCHAR (10) NOT NULL,
    [RETAILACCESSLEVEL]           INT           NOT NULL,
    [RETAILUSERGROUPINFO]         NVARCHAR (10) NOT NULL,
    [LEGALENTITYID]               NVARCHAR (4)  NOT NULL,
    [PARTITION]                   NVARCHAR (20) NOT NULL,
    [SYNCSTARTDATETIME]           DATETIME      NOT NULL,
    [RECID]                       BIGINT        NOT NULL,
    CONSTRAINT [PK_LedgerFiscalPeriodStaging] PRIMARY KEY CLUSTERED ([EXECUTIONID] ASC, [PERIODNAME] ASC, [YEARNAME] ASC, [CALENDAR] ASC, [LEDGERNAME] ASC, [PARTITION] ASC)
);


GO
PRINT N'Creating [dbo].[MainAccountStaging]...';


GO
CREATE TABLE [dbo].[MainAccountStaging] (
    [OFFSETACCOUNTDISPLAYVALUE]                 NVARCHAR (500) NOT NULL,
    [PARENTMAINACCOUNTID]                       NVARCHAR (20)  NOT NULL,
    [DEFINITIONGROUP]                           NVARCHAR (60)  NOT NULL,
    [EXECUTIONID]                               NVARCHAR (90)  NOT NULL,
    [ISSELECTED]                                INT            NOT NULL,
    [TRANSFERSTATUS]                            INT            NOT NULL,
    [MAINACCOUNTCATEGORY]                       NVARCHAR (20)  NOT NULL,
    [CLOSING]                                   INT            NOT NULL,
    [DEFAULTCONSOLIDATIONACCOUNT]               NVARCHAR (10)  NOT NULL,
    [DEFAULTCURRENCY]                           NVARCHAR (3)   NOT NULL,
    [BALANCECONTROL]                            INT            NOT NULL,
    [DEBITCREDITREQUIREMENT]                    INT            NOT NULL,
    [DEBITCREDITDEFAULT]                        INT            NOT NULL,
    [FOREIGNCURRENCYREVALUATION]                INT            NOT NULL,
    [FINANCIALREPORTINGCURRENCYTRANSLATIONTYPE] INT            NOT NULL,
    [CHARTOFACCOUNTSRECID]                      BIGINT         NOT NULL,
    [MAINACCOUNTID]                             NVARCHAR (20)  NOT NULL,
    [MANDATORYPAYMENTREFERENCE]                 INT            NOT NULL,
    [MONETARY]                                  INT            NOT NULL,
    [NAME]                                      NVARCHAR (60)  NOT NULL,
    [POSTINGTYPE]                               INT            NOT NULL,
    [SRUCODE]                                   NVARCHAR (4)   NOT NULL,
    [MAINACCOUNTTYPE]                           INT            NOT NULL,
    [USER_]                                     NVARCHAR (20)  NOT NULL,
    [VALIDATECURRENCY]                          INT            NOT NULL,
    [VALIDATEPOSTINGTYPE]                       INT            NOT NULL,
    [VALIDATEUSER]                              INT            NOT NULL,
    [OPENINGACCOUNTID]                          NVARCHAR (20)  NOT NULL,
    [CHARTOFACCOUNTS]                           NVARCHAR (60)  NOT NULL,
    [REPORTINGACCOUNTTYPE]                      INT            NOT NULL,
    [FINANCIALREPORTINGEXCHANGERATETYPE]        NVARCHAR (20)  NOT NULL,
    [DONOTALLOWMANUALENTRY]                     INT            NOT NULL,
    [ISSUSPENDED]                               INT            NOT NULL,
    [ACTIVEFROM]                                DATETIME       NOT NULL,
    [ACTIVETO]                                  DATETIME       NOT NULL,
    [MAINACCOUNTRECID]                          BIGINT         NOT NULL,
    [ACCOUNTCATEGORYDESCRIPTION]                NVARCHAR (60)  NOT NULL,
    [ADJUSTMENTMETHOD]                          INT            NOT NULL,
    [INFLATIONADJUSTMENT]                       INT            NOT NULL,
    [REPOMOTYPE]                                INT            NOT NULL,
    [EXCHANGEADJUSTMENTRATETYPE]                NVARCHAR (20)  NOT NULL,
    [REPORTINGEXCHANGEADJUSTMENTRATETYPE]       NVARCHAR (20)  NOT NULL,
    [PARTITION]                                 NVARCHAR (20)  NOT NULL,
    [SYNCSTARTDATETIME]                         DATETIME       NOT NULL,
    [RECID]                                     BIGINT         NOT NULL,
    CONSTRAINT [PK_MainAccountStaging] PRIMARY KEY CLUSTERED ([EXECUTIONID] ASC, [MAINACCOUNTID] ASC, [CHARTOFACCOUNTS] ASC, [PARTITION] ASC)
);


GO
PRINT N'Creating [dbo].[MainAccountTotalAccountIntervalEntityStaging]...';


GO
CREATE TABLE [dbo].[MainAccountTotalAccountIntervalEntityStaging] (
    [DEFINITIONGROUP]   NVARCHAR (60) NOT NULL,
    [EXECUTIONID]       NVARCHAR (90) NOT NULL,
    [ISSELECTED]        INT           NOT NULL,
    [TRANSFERSTATUS]    INT           NOT NULL,
    [MAINACCOUNTID]     NVARCHAR (20) NOT NULL,
    [CHARTOFACCOUNTS]   NVARCHAR (60) NOT NULL,
    [FROMVALUE]         NVARCHAR (30) NOT NULL,
    [TOVALUE]           NVARCHAR (30) NOT NULL,
    [INVERTTOTALSIGN]   INT           NOT NULL,
    [PARTITION]         NVARCHAR (20) NOT NULL,
    [SYNCSTARTDATETIME] DATETIME      NOT NULL,
    [RECID]             BIGINT        NOT NULL,
    CONSTRAINT [PK_MainAccountTotalAccountIntervalEntityStaging] PRIMARY KEY CLUSTERED ([EXECUTIONID] ASC, [MAINACCOUNTID] ASC, [CHARTOFACCOUNTS] ASC, [FROMVALUE] ASC, [TOVALUE] ASC, [PARTITION] ASC)
);


GO
PRINT N'Creating [dbo].[mdm_compound_genes]...';


GO
CREATE TABLE [dbo].[mdm_compound_genes] (
    [compound_num] VARCHAR (50)  NOT NULL,
    [ensembl_id]   VARCHAR (100) NOT NULL,
    [species]      VARCHAR (256) NOT NULL,
    [species_name] VARCHAR (64)  NOT NULL,
    [target_type]  VARCHAR (50)  NULL,
    [release_num]  VARCHAR (16)  NOT NULL,
    [obsolete]     BIT           NOT NULL,
    [DateCreated]  DATETIME      NOT NULL,
    [DateModified] DATETIME      NULL
);


GO
PRINT N'Creating [dbo].[mdm_compound_genes].[idx_compound_num_compoundgenes]...';


GO
CREATE NONCLUSTERED INDEX [idx_compound_num_compoundgenes]
    ON [dbo].[mdm_compound_genes]([compound_num] ASC);


GO
PRINT N'Creating [dbo].[mdm_compound_genes].[idx_ensembl_id_compoundgenes]...';


GO
CREATE NONCLUSTERED INDEX [idx_ensembl_id_compoundgenes]
    ON [dbo].[mdm_compound_genes]([ensembl_id] ASC);


GO
PRINT N'Creating [dbo].[mdm_compound_names]...';


GO
CREATE TABLE [dbo].[mdm_compound_names] (
    [compound_num]         VARCHAR (50)  NOT NULL,
    [compound_name]        VARCHAR (100) NOT NULL,
    [compound_name_type]   VARCHAR (50)  NOT NULL,
    [compound_name_status] VARCHAR (50)  NOT NULL,
    [DateCreated]          DATETIME      NOT NULL,
    [DateModified]         DATETIME      NULL
);


GO
PRINT N'Creating [dbo].[mdm_compound_names].[idx_compoundname_compoundnames]...';


GO
CREATE NONCLUSTERED INDEX [idx_compoundname_compoundnames]
    ON [dbo].[mdm_compound_names]([compound_num] ASC);


GO
PRINT N'Creating [dbo].[mdm_compound_names].[idx_compoundnum_compoundnames]...';


GO
CREATE NONCLUSTERED INDEX [idx_compoundnum_compoundnames]
    ON [dbo].[mdm_compound_names]([compound_name] ASC);


GO
PRINT N'Creating [dbo].[mdm_compounds]...';


GO
CREATE TABLE [dbo].[mdm_compounds] (
    [compound_num]     VARCHAR (50) NOT NULL,
    [DateCreated]      DATETIME     NOT NULL,
    [IsisCreationDate] DATETIME     NULL,
    PRIMARY KEY CLUSTERED ([compound_num] ASC)
);


GO
PRINT N'Creating [dbo].[mdm_CompoundTerms]...';


GO
CREATE TABLE [dbo].[mdm_CompoundTerms] (
    [compound_num] VARCHAR (50)  NOT NULL,
    [term]         VARCHAR (100) NOT NULL,
    [gene_symbol]  VARCHAR (50)  NOT NULL,
    [ensembl_id]   VARCHAR (100) NOT NULL,
    [species]      VARCHAR (100) NOT NULL,
    [term_type]    VARCHAR (50)  NOT NULL,
    [status]       VARCHAR (50)  NOT NULL,
    [DateCreated]  DATETIME      NOT NULL
);


GO
PRINT N'Creating [dbo].[mdm_CompoundTerms].[idx_gene_compoundtermsTbl]...';


GO
CREATE NONCLUSTERED INDEX [idx_gene_compoundtermsTbl]
    ON [dbo].[mdm_CompoundTerms]([gene_symbol] ASC) WITH (FILLFACTOR = 80);


GO
PRINT N'Creating [dbo].[mdm_CompoundTerms].[idx_term_compoundtermsTbl]...';


GO
CREATE NONCLUSTERED INDEX [idx_term_compoundtermsTbl]
    ON [dbo].[mdm_CompoundTerms]([term] ASC) WITH (FILLFACTOR = 80);


GO
PRINT N'Creating [dbo].[mdm_CompoundTerms].[idx_status_compoundtermsTbl]...';


GO
CREATE NONCLUSTERED INDEX [idx_status_compoundtermsTbl]
    ON [dbo].[mdm_CompoundTerms]([status] ASC) WITH (FILLFACTOR = 80);


GO
PRINT N'Creating [dbo].[mdm_CompoundTerms].[idx_compoundNum_compoundtermsTbl]...';


GO
CREATE NONCLUSTERED INDEX [idx_compoundNum_compoundtermsTbl]
    ON [dbo].[mdm_CompoundTerms]([compound_num] ASC) WITH (FILLFACTOR = 80);


GO
PRINT N'Creating [dbo].[mdm_gene_names]...';


GO
CREATE TABLE [dbo].[mdm_gene_names] (
    [ensembl_id]       VARCHAR (100)  NOT NULL,
    [gene_name]        VARCHAR (1024) NULL,
    [species]          VARCHAR (100)  NOT NULL,
    [gene_name_status] VARCHAR (50)   NULL,
    [DateCreated]      DATETIME       NOT NULL,
    [DateModified]     DATETIME       NULL
);


GO
PRINT N'Creating [dbo].[mdm_gene_names].[idx_ensembl_id_genenames]...';


GO
CREATE NONCLUSTERED INDEX [idx_ensembl_id_genenames]
    ON [dbo].[mdm_gene_names]([ensembl_id] ASC);


GO
PRINT N'Creating [dbo].[mdm_gene_names].[idx_gene_name_genenames]...';


GO
CREATE NONCLUSTERED INDEX [idx_gene_name_genenames]
    ON [dbo].[mdm_gene_names]([gene_name] ASC);


GO
PRINT N'Creating [dbo].[mdm_gene_symbols]...';


GO
CREATE TABLE [dbo].[mdm_gene_symbols] (
    [ensembl_id]         VARCHAR (100) NOT NULL,
    [gene_symbol]        VARCHAR (50)  NOT NULL,
    [species]            VARCHAR (100) NOT NULL,
    [gene_symbol_status] VARCHAR (50)  NULL,
    [DateCreated]        DATETIME      NOT NULL,
    [DateModified]       DATETIME      NULL
);


GO
PRINT N'Creating [dbo].[mdm_gene_symbols].[idx_ensembl_id_genesymbols]...';


GO
CREATE NONCLUSTERED INDEX [idx_ensembl_id_genesymbols]
    ON [dbo].[mdm_gene_symbols]([ensembl_id] ASC);


GO
PRINT N'Creating [dbo].[mdm_gene_symbols].[idx_gene_symbol_genesymbols]...';


GO
CREATE NONCLUSTERED INDEX [idx_gene_symbol_genesymbols]
    ON [dbo].[mdm_gene_symbols]([gene_symbol] ASC);


GO
PRINT N'Creating [dbo].[mdm_gene_symbols].[idx_gene_symbol_status]...';


GO
CREATE NONCLUSTERED INDEX [idx_gene_symbol_status]
    ON [dbo].[mdm_gene_symbols]([gene_symbol_status] ASC);


GO
PRINT N'Creating [dbo].[mdm_GeneTerms]...';


GO
CREATE TABLE [dbo].[mdm_GeneTerms] (
    [ensembl_id]    VARCHAR (100)  NOT NULL,
    [term]          VARCHAR (1024) NOT NULL,
    [primarysymbol] VARCHAR (100)  NULL,
    [primaryname]   VARCHAR (500)  NULL,
    [species]       VARCHAR (100)  NOT NULL,
    [status]        VARCHAR (50)   NOT NULL,
    [term_type]     VARCHAR (6)    NOT NULL,
    [DateCreated]   DATETIME       NOT NULL
);


GO
PRINT N'Creating [dbo].[mdm_GeneTerms].[idx_ensembl_genetermsTbl]...';


GO
CREATE NONCLUSTERED INDEX [idx_ensembl_genetermsTbl]
    ON [dbo].[mdm_GeneTerms]([ensembl_id] ASC);


GO
PRINT N'Creating [dbo].[mdm_GeneTerms].[idx_primarysymbol_genetermstbl]...';


GO
CREATE NONCLUSTERED INDEX [idx_primarysymbol_genetermstbl]
    ON [dbo].[mdm_GeneTerms]([primarysymbol] ASC);


GO
PRINT N'Creating [dbo].[mdm_GeneTerms].[idx_term_genetermsTbl]...';


GO
CREATE NONCLUSTERED INDEX [idx_term_genetermsTbl]
    ON [dbo].[mdm_GeneTerms]([term] ASC);


GO
PRINT N'Creating [dbo].[mdm_GeneTerms].[idx_species_genetermsTbl]...';


GO
CREATE NONCLUSTERED INDEX [idx_species_genetermsTbl]
    ON [dbo].[mdm_GeneTerms]([species] ASC);


GO
PRINT N'Creating [dbo].[OMOrganizationHierarchyPublishedV2Staging]...';


GO
CREATE TABLE [dbo].[OMOrganizationHierarchyPublishedV2Staging] (
    [DEFINITIONGROUP]               NVARCHAR (60)  NOT NULL,
    [EXECUTIONID]                   NVARCHAR (90)  NOT NULL,
    [ISSELECTED]                    INT            NOT NULL,
    [TRANSFERSTATUS]                INT            NOT NULL,
    [VALIDFROM]                     DATETIME       NOT NULL,
    [VALIDTO]                       DATETIME       NOT NULL,
    [HIERARCHYTYPE]                 NVARCHAR (60)  NOT NULL,
    [CHILDORGANIZATIONNAME]         NVARCHAR (100) NOT NULL,
    [CHILDORGANIZATIONPARTYNUMBER]  NVARCHAR (40)  NOT NULL,
    [PARENTORGANIZATIONNAME]        NVARCHAR (100) NOT NULL,
    [PARENTORGANIZATIONPARTYNUMBER] NVARCHAR (40)  NOT NULL,
    [RELATIONSHIPTYPE]              NVARCHAR (20)  NOT NULL,
    [PARTITION]                     NVARCHAR (20)  NOT NULL,
    [SYNCSTARTDATETIME]             DATETIME       NOT NULL,
    [RECID]                         BIGINT         NOT NULL,
    CONSTRAINT [PK_OMOrganizationHierarchyPublishedV2Staging] PRIMARY KEY CLUSTERED ([EXECUTIONID] ASC, [VALIDFROM] ASC, [HIERARCHYTYPE] ASC, [CHILDORGANIZATIONPARTYNUMBER] ASC, [PARTITION] ASC)
);


GO
PRINT N'Creating [dbo].[OrganizationHierarchy]...';


GO
CREATE TABLE [dbo].[OrganizationHierarchy] (
    [HierarchyDepth]    INT          NULL,
    [HierarchyType]     VARCHAR (50) NULL,
    [RootPartyNumber]   VARCHAR (50) NULL,
    [LeafPartyNumber]   VARCHAR (50) NULL,
    [LeafOperatingUnit] VARCHAR (50) NULL,
    [Level1PartyNumber] VARCHAR (50) NULL,
    [Level2PartyNumber] VARCHAR (50) NULL,
    [Level3PartyNumber] VARCHAR (50) NULL,
    [Level4PartyNumber] VARCHAR (50) NULL,
    [Level5PartyNumber] VARCHAR (50) NULL,
    [Level6PartyNumber] VARCHAR (50) NULL,
    [Level7PartyNumber] VARCHAR (50) NULL
);


GO
PRINT N'Creating [dbo].[PL_Crosswalk]...';


GO
CREATE TABLE [dbo].[PL_Crosswalk] (
    [TotalingAccount]            NVARCHAR (20) NOT NULL,
    [TotalingAccountDescription] NVARCHAR (60) NULL,
    [mainAccount]                NVARCHAR (20) NOT NULL,
    [AccountKey]                 INT           NOT NULL,
    [DepartmentKey]              INT           NOT NULL,
    [DepartmentNumber]           NVARCHAR (30) NOT NULL,
    [PLType]                     VARCHAR (17)  NOT NULL,
    [PLGroup]                    NVARCHAR (60) NULL,
    [PLOrder]                    INT           NULL,
    [Factor]                     INT           NULL
);


GO
PRINT N'Creating [dbo].[PL_Crosswalk_AKCEA]...';


GO
CREATE TABLE [dbo].[PL_Crosswalk_AKCEA] (
    [TotalingAccount]            NVARCHAR (20) NOT NULL,
    [TotalingAccountDescription] NVARCHAR (60) NULL,
    [mainAccount]                NVARCHAR (20) NOT NULL,
    [AccountKey]                 INT           NOT NULL,
    [DepartmentKey]              INT           NOT NULL,
    [DepartmentNumber]           NVARCHAR (30) NOT NULL,
    [PLType]                     VARCHAR (17)  NOT NULL,
    [PLGroup]                    NVARCHAR (60) NULL,
    [PLOrder]                    INT           NULL,
    [Factor]                     INT           NULL
);


GO
PRINT N'Creating [dbo].[PLExclusionAccount]...';


GO
CREATE TABLE [dbo].[PLExclusionAccount] (
    [Account]       INT          NOT NULL,
    [DescriptionGL] VARCHAR (40) NOT NULL,
    [Class]         VARCHAR (6)  NOT NULL,
    [Include]       VARCHAR (1)  NOT NULL
);


GO
PRINT N'Creating [dbo].[PLExclusionDepartment]...';


GO
CREATE TABLE [dbo].[PLExclusionDepartment] (
    [DepartmentNumber] INT          NOT NULL,
    [DescriptionFPA]   VARCHAR (40) NOT NULL,
    [FSLI]             VARCHAR (3)  NOT NULL,
    [function_]        VARCHAR (15) NOT NULL,
    [Country]          VARCHAR (14) NOT NULL,
    [Region]           VARCHAR (6)  NOT NULL,
    [Include]          VARCHAR (1)  NOT NULL
);


GO
PRINT N'Creating [dbo].[PLStage]...';


GO
CREATE TABLE [dbo].[PLStage] (
    [TotalingAccount]            NVARCHAR (20) NOT NULL,
    [TotalingAccountDescription] NVARCHAR (60) NULL,
    [MainAccount]                NVARCHAR (20) NOT NULL,
    [AccountKey]                 INT           NOT NULL,
    [DepartmentKey]              INT           NOT NULL,
    [DepartmentNumber]           NVARCHAR (30) NOT NULL
);


GO
PRINT N'Creating [dbo].[POHeader]...';


GO
CREATE TABLE [dbo].[POHeader] (
    [Entity]           VARCHAR (4)   NOT NULL,
    [ID]               INT           NOT NULL,
    [PO_Number]        VARCHAR (20)  NULL,
    [Version]          INT           NULL,
    [Requisition_ID]   INT           NULL,
    [Prior_PO_Number]  VARCHAR (200) NULL,
    [GMP_PO]           VARCHAR (10)  NULL,
    [DepartmentKey]    INT           NULL,
    [Capital_ID]       VARCHAR (50)  NULL,
    [Capital_Item]     VARCHAR (500) NULL,
    [RequesterKey]     INT           NULL,
    [Order_Date]       DATETIME      NULL,
    [SupplierKey]      INT           NULL,
    [Status]           VARCHAR (100) NULL,
    [Budgeted]         VARCHAR (10)  NULL,
    [Exported]         VARCHAR (10)  NULL,
    [Last_Exported_At] DATETIME      NULL,
    [Created_By]       VARCHAR (100) NULL,
    [Created_At]       DATETIME      NULL,
    [Updated_By]       VARCHAR (100) NULL,
    [Updated_At]       DATETIME      NULL,
    [WH_Created]       DATETIME      NULL
);


GO
PRINT N'Creating [dbo].[POLine]...';


GO
CREATE TABLE [dbo].[POLine] (
    [ID]                  INT           NOT NULL,
    [Created_By]          VARCHAR (100) NULL,
    [Created_At]          DATETIME      NULL,
    [Updated_By]          VARCHAR (100) NULL,
    [Updated_At]          DATETIME      NULL,
    [Accounting_Total]    FLOAT (53)    NULL,
    [Accounting_Currency] CHAR (3)      NULL,
    [Description]         VARCHAR (500) NULL,
    [Invoiced_Quantity]   FLOAT (53)    NULL,
    [PO_Line_Number]      INT           NOT NULL,
    [PO_ID]               INT           NOT NULL,
    [PO_Number]           VARCHAR (25)  NULL,
    [Price]               FLOAT (53)    NULL,
    [Received_Quantity]   FLOAT (53)    NULL,
    [Source_Part_Number]  VARCHAR (500) NULL,
    [Status]              VARCHAR (50)  NULL,
    [Total]               FLOAT (53)    NULL,
    [Reporting_Total]     FLOAT (53)    NULL
);


GO
PRINT N'Creating [dbo].[POLineAllocation]...';


GO
CREATE TABLE [dbo].[POLineAllocation] (
    [PO_Line_ID]        INT          NOT NULL,
    [DepartmentKey]     INT          NULL,
    [AccountKey]        INT          NULL,
    [ProjectKey]        INT          NULL,
    [TaskKey]           INT          NULL,
    [AllocationPercent] FLOAT (53)   NULL,
    [Amount]            FLOAT (53)   NULL,
    [PO_Number]         VARCHAR (25) NULL
);


GO
PRINT N'Creating [dbo].[PostingTypeCrossReference]...';


GO
CREATE TABLE [dbo].[PostingTypeCrossReference] (
    [PostingType]            VARCHAR (50)  NULL,
    [PostingTypeDescription] VARCHAR (500) NULL
);


GO
PRINT N'Creating [dbo].[ProjectAllocation]...';


GO
CREATE TABLE [dbo].[ProjectAllocation] (
    [StartDate]            DATE             NOT NULL,
    [EndDate]              DATE             NOT NULL,
    [Department]           INT              NOT NULL,
    [Project]              VARCHAR (50)     NULL,
    [DataAreaID]           NVARCHAR (50)    NOT NULL,
    [AllocationPercentage] DECIMAL (18, 10) NULL
);


GO
PRINT N'Creating [dbo].[PubsApprovalTasks]...';


GO
CREATE TABLE [dbo].[PubsApprovalTasks] (
    [TaskID]        INT           NOT NULL,
    [PubsKey]       INT           NULL,
    [ApprovalRole]  VARCHAR (255) NOT NULL,
    [Status]        VARCHAR (255) NOT NULL,
    [AssignedToKey] INT           NULL,
    [TaskCompleted] VARCHAR (50)  NULL,
    [TaskOutcome]   VARCHAR (50)  NULL,
    [DelegateAdded] VARCHAR (50)  NULL,
    [DelegateKey]   INT           NULL,
    [TaskComments]  VARCHAR (MAX) NULL,
    [UserComments]  VARCHAR (MAX) NULL,
    [Created]       DATETIME      NULL,
    [Modified]      DATETIME      NULL,
    [DateCreated]   DATETIME      NOT NULL,
    [DateModified]  DATETIME      NULL,
    [PubsID]        INT           NULL,
    CONSTRAINT [PK_PubsApprovalTasks] PRIMARY KEY CLUSTERED ([TaskID] ASC) WITH (FILLFACTOR = 80)
);


GO
PRINT N'Creating [dbo].[PubsApprovalTasks].[idx_PubsKey_PubsApprovalTasks]...';


GO
CREATE NONCLUSTERED INDEX [idx_PubsKey_PubsApprovalTasks]
    ON [dbo].[PubsApprovalTasks]([PubsKey] ASC) WITH (FILLFACTOR = 80);


GO
PRINT N'Creating [dbo].[PubsFranchise]...';


GO
CREATE TABLE [dbo].[PubsFranchise] (
    [PubsFranchiseID] INT           NOT NULL,
    [Franchise]       VARCHAR (255) NOT NULL,
    [Created]         DATETIME      NOT NULL,
    [Modified]        DATETIME      NULL,
    [DateCreated]     DATETIME      NOT NULL,
    [DateModified]    DATETIME      NULL,
    [Notes]           VARCHAR (100) NULL,
    [LegacyID]        INT           NULL,
    CONSTRAINT [PK_PubsFranchiseID] PRIMARY KEY CLUSTERED ([PubsFranchiseID] ASC)
);


GO
PRINT N'Creating [dbo].[PubsFunctionalArea]...';


GO
CREATE TABLE [dbo].[PubsFunctionalArea] (
    [PubsFunctionalAreaID] INT           NOT NULL,
    [Functional]           VARCHAR (255) NOT NULL,
    [Created]              DATETIME      NOT NULL,
    [Modified]             DATETIME      NULL,
    [DateCreated]          DATETIME      NOT NULL,
    [DateModified]         DATETIME      NULL,
    CONSTRAINT [PK_PubsFunctionalAreaID] PRIMARY KEY CLUSTERED ([PubsFunctionalAreaID] ASC)
);


GO
PRINT N'Creating [dbo].[PubsJournals]...';


GO
CREATE TABLE [dbo].[PubsJournals] (
    [JournalID]        INT           NOT NULL,
    [JournalTitle]     VARCHAR (255) NULL,
    [URLLink]          VARCHAR (MAX) NULL,
    [URLDescription]   VARCHAR (MAX) NULL,
    [ISDN]             VARCHAR (255) NULL,
    [AddedBy]          VARCHAR (255) NULL,
    [Abbreviation]     VARCHAR (255) NULL,
    [Created]          DATETIME      NOT NULL,
    [Modified]         DATETIME      NULL,
    [CreatedByUserKey] INT           NULL,
    [DateCreated]      DATETIME      NOT NULL,
    [DateModified]     DATETIME      NULL,
    CONSTRAINT [PK_JournalID] PRIMARY KEY CLUSTERED ([JournalID] ASC)
);


GO
PRINT N'Creating [dbo].[PubsLegacyCompoundsTemp]...';


GO
CREATE TABLE [dbo].[PubsLegacyCompoundsTemp] (
    [Compound]        VARCHAR (100) NOT NULL,
    [PrimaryGeneTerm] VARCHAR (100) NULL,
    [DateCreated]     DATETIME      NOT NULL,
    [ProcessedVal]    INT           NULL,
    [Ensembl_Id]      VARCHAR (50)  NULL,
    CONSTRAINT [PK_PubsLegacyCompoundsTempCompound] PRIMARY KEY CLUSTERED ([Compound] ASC)
);


GO
PRINT N'Creating [dbo].[PubsLegacyLookup]...';


GO
CREATE TABLE [dbo].[PubsLegacyLookup] (
    [PubsId]         INT      NOT NULL,
    [SpLegacyListId] INT      NOT NULL,
    [PubsKey]        INT      NULL,
    [DateCreated]    DATETIME NOT NULL,
    CONSTRAINT [PK_PubsLegacyLookup_PubsKey] PRIMARY KEY CLUSTERED ([PubsId] ASC)
);


GO
PRINT N'Creating [dbo].[PubsLegacyRecordCompound]...';


GO
CREATE TABLE [dbo].[PubsLegacyRecordCompound] (
    [ID]             INT           NOT NULL,
    [PubsId]         INT           NOT NULL,
    [PubsKey]        INT           NULL,
    [CompoundNumber] VARCHAR (255) NULL,
    [DateCreated]    DATETIME      NOT NULL,
    [DateModified]   DATETIME      NULL
);


GO
PRINT N'Creating [dbo].[PubsLegacyRecordTarget]...';


GO
CREATE TABLE [dbo].[PubsLegacyRecordTarget] (
    [ID]            INT           NOT NULL,
    [PubsId]        INT           NOT NULL,
    [PubsKey]       INT           NULL,
    [Ensembl_Id]    VARCHAR (100) NOT NULL,
    [PrimarySymbol] VARCHAR (50)  NULL,
    [DateCreated]   DATETIME      NOT NULL,
    [DateModified]  DATETIME      NULL
);


GO
PRINT N'Creating [dbo].[PubsLegacyUserTemp]...';


GO
CREATE TABLE [dbo].[PubsLegacyUserTemp] (
    [FullName]        VARCHAR (100) NOT NULL,
    [DimUser_UserKey] INT           NULL,
    [DateCreated]     DATETIME      NOT NULL,
    [DateModified]    DATETIME      NULL,
    CONSTRAINT [PK_PubsLegacyUserTempPubsUserName] PRIMARY KEY CLUSTERED ([FullName] ASC)
);


GO
PRINT N'Creating [dbo].[PubsMeeting]...';


GO
CREATE TABLE [dbo].[PubsMeeting] (
    [PubsMeetingID]    INT           NOT NULL,
    [MeetingTitle]     VARCHAR (255) NOT NULL,
    [Location]         VARCHAR (255) NULL,
    [StartTime]        DATETIME      NOT NULL,
    [EndTime]          DATETIME      NOT NULL,
    [Description]      VARCHAR (MAX) NULL,
    [Category]         VARCHAR (255) NOT NULL,
    [AddedBy]          VARCHAR (255) NOT NULL,
    [MeetingLink]      VARCHAR (MAX) NULL,
    [URLDescription]   VARCHAR (MAX) NULL,
    [Created]          DATETIME      NOT NULL,
    [Modified]         DATETIME      NULL,
    [CreatedByUserKey] INT           NULL,
    [DateCreated]      DATETIME      NOT NULL,
    [DateModified]     DATETIME      NULL,
    CONSTRAINT [PK_PubsMeetingID] PRIMARY KEY CLUSTERED ([PubsMeetingID] ASC)
);


GO
PRINT N'Creating [dbo].[PubsRecord]...';


GO
CREATE TABLE [dbo].[PubsRecord] (
    [PubsKey]                       INT           IDENTITY (1, 1) NOT NULL,
    [Version]                       INT           NULL,
    [Title]                         VARCHAR (255) NOT NULL,
    [ResponsiblePartyKey]           INT           NULL,
    [PubsType]                      VARCHAR (255) NULL,
    [SubmissionDeadline]            DATETIME      NULL,
    [ExternalAuthors]               VARCHAR (MAX) NULL,
    [Comments]                      VARCHAR (MAX) NULL,
    [IonisClinicalStudyCSNum]       VARCHAR (255) NULL,
    [ClinicalTrialRegistryIDNCTNum] VARCHAR (255) NULL,
    [SubmissionContentID]           INT           NULL,
    [JournalLinkedID]               INT           NULL,
    [AssociatedRecordKey]           INT           NULL,
    [BookTitle]                     VARCHAR (255) NULL,
    [BookChapter]                   VARCHAR (255) NULL,
    [Editor]                        VARCHAR (255) NULL,
    [Edition]                       VARCHAR (255) NULL,
    [Volume]                        VARCHAR (255) NULL,
    [PresentationType]              VARCHAR (255) NULL,
    [Explain]                       VARCHAR (600) NULL,
    [MeetingLinkedID]               INT           NULL,
    [PatentsCompleted]              VARCHAR (255) NULL,
    [LastWFStartTime]               DATETIME      NULL,
    [NeedAbstract]                  VARCHAR (10)  NULL,
    [ApprovalStatus]                VARCHAR (255) NULL,
    [Presenters]                    VARCHAR (255) NULL,
    [UserComments]                  VARCHAR (MAX) NULL,
    [Expedited]                     VARCHAR (10)  NULL,
    [CreatedBy]                     INT           NULL,
    [Created]                       DATETIME      NULL,
    [Modified]                      DATETIME      NULL,
    [ModifiedBy]                    INT           NULL,
    [DateCreated]                   DATETIME      NOT NULL,
    [DateModified]                  DATETIME      NULL,
    [PubsID]                        INT           NOT NULL,
    [CompletedTime]                 DATETIME      NULL,
    CONSTRAINT [PK_PubsKey] PRIMARY KEY CLUSTERED ([PubsKey] ASC) WITH (FILLFACTOR = 80)
);


GO
PRINT N'Creating [dbo].[PubsRecord].[idx_createdby_pubsrecord]...';


GO
CREATE NONCLUSTERED INDEX [idx_createdby_pubsrecord]
    ON [dbo].[PubsRecord]([CreatedBy] ASC) WITH (FILLFACTOR = 80);


GO
PRINT N'Creating [dbo].[PubsRecordCompound]...';


GO
CREATE TABLE [dbo].[PubsRecordCompound] (
    [ID]             INT           IDENTITY (1, 1) NOT NULL,
    [PubsKey]        INT           NOT NULL,
    [CompoundNumber] VARCHAR (255) NOT NULL,
    [DateCreated]    DATETIME      NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[PubsRecordFranchise]...';


GO
CREATE TABLE [dbo].[PubsRecordFranchise] (
    [PubsKey]         INT      NOT NULL,
    [PubsFranchiseID] INT      NOT NULL,
    [DateCreated]     DATETIME NOT NULL,
    [DateModified]    DATETIME NULL,
    CONSTRAINT [PK_PubsRecordFranchiseMap] PRIMARY KEY CLUSTERED ([PubsKey] ASC, [PubsFranchiseID] ASC)
);


GO
PRINT N'Creating [dbo].[PubsRecordFunctionalArea]...';


GO
CREATE TABLE [dbo].[PubsRecordFunctionalArea] (
    [PubsKey]              INT      NOT NULL,
    [PubsFunctionalAreaID] INT      NOT NULL,
    [DateCreated]          DATETIME NOT NULL,
    [DateModified]         DATETIME NULL,
    CONSTRAINT [PK_PubsRecordFunctionalAreaMap] PRIMARY KEY CLUSTERED ([PubsKey] ASC, [PubsFunctionalAreaID] ASC)
);


GO
PRINT N'Creating [dbo].[PubsRecordIonisAuthor]...';


GO
CREATE TABLE [dbo].[PubsRecordIonisAuthor] (
    [PubsKey]        INT      NOT NULL,
    [IonisAuthorKey] INT      NOT NULL,
    [DateCreated]    DATETIME NOT NULL,
    [DateModified]   DATETIME NULL,
    CONSTRAINT [PK_PubsInoisAuthorMap] PRIMARY KEY CLUSTERED ([PubsKey] ASC, [IonisAuthorKey] ASC) WITH (FILLFACTOR = 80)
);


GO
PRINT N'Creating [dbo].[PubsRecordSubmissinContentDataType]...';


GO
CREATE TABLE [dbo].[PubsRecordSubmissinContentDataType] (
    [PubsKey]                         INT      NOT NULL,
    [PubsSubmissionContentDataTypeID] INT      NOT NULL,
    [DateCreated]                     DATETIME NOT NULL,
    [DateModified]                    DATETIME NULL,
    CONSTRAINT [PK_PubsSubmissionContentDataTypeMap] PRIMARY KEY CLUSTERED ([PubsKey] ASC, [PubsSubmissionContentDataTypeID] ASC)
);


GO
PRINT N'Creating [dbo].[PubsRecordTarget]...';


GO
CREATE TABLE [dbo].[PubsRecordTarget] (
    [ID]           INT           IDENTITY (1, 1) NOT NULL,
    [PubsKey]      INT           NOT NULL,
    [Ensembl_Id]   VARCHAR (100) NOT NULL,
    [SelectedTerm] VARCHAR (50)  NULL,
    [DateCreated]  DATETIME      NOT NULL,
    [DateModified] DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[PubsSubmissionContent]...';


GO
CREATE TABLE [dbo].[PubsSubmissionContent] (
    [SubmissionContentKey] INT           IDENTITY (1, 1) NOT NULL,
    [SubmissionContentID]  INT           NOT NULL,
    [SubmissionContent]    VARCHAR (255) NOT NULL,
    [Description]          VARCHAR (255) NULL,
    [DateCreated]          DATETIME      NOT NULL,
    [DateModified]         DATETIME      NULL,
    CONSTRAINT [PK_SubmissionContentKey] PRIMARY KEY CLUSTERED ([SubmissionContentKey] ASC)
);


GO
PRINT N'Creating [dbo].[PubsSubmissionContentDataType]...';


GO
CREATE TABLE [dbo].[PubsSubmissionContentDataType] (
    [PubsSubmissionContentDataTypeID] INT           NOT NULL,
    [Title]                           VARCHAR (255) NOT NULL,
    [Created]                         DATETIME      NOT NULL,
    [Modified]                        DATETIME      NULL,
    [DateCreated]                     DATETIME      NOT NULL,
    [DateModified]                    DATETIME      NULL,
    CONSTRAINT [PK_PubsSubmissionContentDataTypeID] PRIMARY KEY CLUSTERED ([PubsSubmissionContentDataTypeID] ASC)
);


GO
PRINT N'Creating [dbo].[PubsUser]...';


GO
CREATE TABLE [dbo].[PubsUser] (
    [PubsUserId]   INT           NOT NULL,
    [Email]        VARCHAR (80)  NOT NULL,
    [FullName]     VARCHAR (100) NULL,
    [FirstName]    VARCHAR (50)  NULL,
    [LastName]     VARCHAR (50)  NULL,
    [DateCreated]  DATETIME      NOT NULL,
    [DateModified] DATETIME      NULL,
    CONSTRAINT [PK_PubsUserId] PRIMARY KEY CLUSTERED ([PubsUserId] ASC) WITH (FILLFACTOR = 80)
);


GO
PRINT N'Creating [dbo].[RecordLog]...';


GO
CREATE TABLE [dbo].[RecordLog] (
    [RecID]       BIGINT          NULL,
    [SourceTable] VARCHAR (15)    NOT NULL,
    [Type]        VARCHAR (6)     NOT NULL,
    [AsOf]        NVARCHAR (4000) NULL
);


GO
PRINT N'Creating [dbo].[rsmAccountingDistributionStaging]...';


GO
CREATE TABLE [dbo].[rsmAccountingDistributionStaging] (
    [DEFINITIONGROUP]                   NVARCHAR (60)   NOT NULL,
    [EXECUTIONID]                       NVARCHAR (90)   NOT NULL,
    [ISSELECTED]                        INT             NOT NULL,
    [TRANSFERSTATUS]                    INT             NOT NULL,
    [ACCOUNTINGDATE]                    DATETIME        NOT NULL,
    [ALLOCATIONFACTOR]                  NUMERIC (32, 6) NOT NULL,
    [AMOUNTSOURCE]                      INT             NOT NULL,
    [MONETARYAMOUNT]                    INT             NOT NULL,
    [NUMBER_]                           BIGINT          NOT NULL,
    [REFERENCEROLE]                     INT             NOT NULL,
    [TRANSACTIONCURRENCY]               NVARCHAR (3)    NOT NULL,
    [TRANSACTIONCURRENCYAMOUNT]         NUMERIC (32, 6) NOT NULL,
    [TYPE]                              INT             NOT NULL,
    [ACCOUNTINGLEGALENTITY_PARTYNUMBER] NVARCHAR (40)   NOT NULL,
    [ACCOUNTINGLEGALENTITY_DATAAREA]    NVARCHAR (4)    NOT NULL,
    [PARENTDISTRIBUTION_NUMBER]         BIGINT          NOT NULL,
    [REFERENCEDISTRIBUTION_NUMBER]      BIGINT          NOT NULL,
    [LEDGERDIMENSIONDISPLAYVALUE]       NVARCHAR (500)  NOT NULL,
    [RECID1]                            BIGINT          NOT NULL,
    [PARTITION]                         NVARCHAR (20)   NOT NULL,
    [ACCOUNTINGEVENT]                   BIGINT          NOT NULL,
    [ACCOUNTINGLEGALENTITY]             BIGINT          NOT NULL,
    [FINALIZEACCOUNTINGEVENT]           BIGINT          NOT NULL,
    [REFERENCEDISTRIBUTION]             BIGINT          NOT NULL,
    [SOURCEDOCUMENTHEADER]              BIGINT          NOT NULL,
    [SOURCEDOCUMENTLINE]                BIGINT          NOT NULL,
    [SYNCSTARTDATETIME]                 DATETIME        NOT NULL,
    [RECID]                             BIGINT          NOT NULL,
    CONSTRAINT [PK_rsmAccountingDistributionStaging] PRIMARY KEY CLUSTERED ([EXECUTIONID] ASC, [RECID1] ASC, [PARTITION] ASC)
);


GO
PRINT N'Creating [dbo].[rsmAccountingEventStaging]...';


GO
CREATE TABLE [dbo].[rsmAccountingEventStaging] (
    [DEFINITIONGROUP]       NVARCHAR (60) NOT NULL,
    [EXECUTIONID]           NVARCHAR (90) NOT NULL,
    [ISSELECTED]            INT           NOT NULL,
    [TRANSFERSTATUS]        INT           NOT NULL,
    [ACCOUNTINGDATE]        DATETIME      NOT NULL,
    [CREATEDBY1]            NVARCHAR (20) NOT NULL,
    [CREATEDDATETIME1]      DATETIME      NOT NULL,
    [CREATEDTRANSACTIONID1] BIGINT        NOT NULL,
    [EVENTDATETIME]         DATETIME      NOT NULL,
    [MODIFIEDBY1]           NVARCHAR (20) NOT NULL,
    [MODIFIEDDATETIME1]     DATETIME      NOT NULL,
    [PARTITION1]            BIGINT        NOT NULL,
    [RECID1]                BIGINT        NOT NULL,
    [RECVERSION1]           INT           NOT NULL,
    [SOURCEDOCUMENTHEADER]  BIGINT        NOT NULL,
    [STATE]                 INT           NOT NULL,
    [TYPE]                  INT           NOT NULL,
    [PARTITION]             NVARCHAR (20) NOT NULL,
    [SYNCSTARTDATETIME]     DATETIME      NOT NULL,
    [RECID]                 BIGINT        NOT NULL,
    CONSTRAINT [PK_rsmAccountingEventStaging] PRIMARY KEY CLUSTERED ([EXECUTIONID] ASC, [RECID1] ASC, [PARTITION] ASC)
);


GO
PRINT N'Creating [dbo].[RSMCustTransStaging]...';


GO
CREATE TABLE [dbo].[RSMCustTransStaging] (
    [DEFINITIONGROUP]         NVARCHAR (60)   NOT NULL,
    [EXECUTIONID]             NVARCHAR (90)   NOT NULL,
    [ISSELECTED]              INT             NOT NULL,
    [TRANSFERSTATUS]          INT             NOT NULL,
    [CUSTOMERACCOUNTNUM]      NVARCHAR (20)   NOT NULL,
    [ACCOUNTINGEVENT]         BIGINT          NOT NULL,
    [DOCUMENTNUM]             NVARCHAR (20)   NOT NULL,
    [TRANSDATE]               DATETIME        NOT NULL,
    [TRANSTYPE]               INT             NOT NULL,
    [VOUCHER]                 NVARCHAR (20)   NOT NULL,
    [DOCUMENTDATE]            DATETIME        NOT NULL,
    [REPORTINGCURRENCYAMOUNT] NUMERIC (32, 6) NOT NULL,
    [CUSTTRANSDATAAREAID]     NVARCHAR (4)    NOT NULL,
    [CUSTTRANSRECID]          BIGINT          NOT NULL,
    [PARTITION]               NVARCHAR (20)   NOT NULL,
    [CURRENCYCODE]            NVARCHAR (3)    NOT NULL,
    [TRANSTYPECOPY1]          INT             NOT NULL,
    [TXT]                     NVARCHAR (512)  NOT NULL,
    [INVOICE]                 NVARCHAR (20)   NOT NULL,
    [DATAAREAID]              NVARCHAR (4)    NOT NULL,
    [SYNCSTARTDATETIME]       DATETIME        NOT NULL,
    [RECID]                   BIGINT          NOT NULL,
    CONSTRAINT [PK_RSMCustTransStaging] PRIMARY KEY CLUSTERED ([EXECUTIONID] ASC, [CUSTTRANSRECID] ASC, [DATAAREAID] ASC, [PARTITION] ASC)
);


GO
PRINT N'Creating [dbo].[RSMFinancialDimensionStaging]...';


GO
CREATE TABLE [dbo].[RSMFinancialDimensionStaging] (
    [DEFINITIONGROUP]      NVARCHAR (60)  NOT NULL,
    [EXECUTIONID]          NVARCHAR (90)  NOT NULL,
    [ISSELECTED]           INT            NOT NULL,
    [TRANSFERSTATUS]       INT            NOT NULL,
    [LEDGERDIMENSION]      BIGINT         NOT NULL,
    [LEVEL1]               INT            NOT NULL,
    [NUMBEROFLEVELS]       INT            NOT NULL,
    [ATTRIBUTEVALUE]       NVARCHAR (500) NOT NULL,
    [HIERARCHYNAME]        NVARCHAR (60)  NOT NULL,
    [HIERARCHYDESCRIPTION] NVARCHAR (60)  NOT NULL,
    [ATTRIBUTENAME]        NVARCHAR (60)  NOT NULL,
    [LEVEL2]               INT            NOT NULL,
    [PARTITION]            NVARCHAR (20)  NOT NULL,
    [SYNCSTARTDATETIME]    DATETIME       NOT NULL,
    [RECID]                BIGINT         NOT NULL,
    CONSTRAINT [PK_RSMFinancialDimensionStaging] PRIMARY KEY CLUSTERED ([EXECUTIONID] ASC, [LEDGERDIMENSION] ASC, [LEVEL1] ASC, [LEVEL2] ASC, [PARTITION] ASC)
);


GO
PRINT N'Creating [dbo].[RSMJournalDimensionCrosswalkStaging]...';


GO
CREATE TABLE [dbo].[RSMJournalDimensionCrosswalkStaging] (
    [DEFINITIONGROUP]             NVARCHAR (60)  NOT NULL,
    [EXECUTIONID]                 NVARCHAR (90)  NOT NULL,
    [ISSELECTED]                  INT            NOT NULL,
    [TRANSFERSTATUS]              INT            NOT NULL,
    [GENERALJOURNALLEDGERACCOUNT] NVARCHAR (500) NOT NULL,
    [GENERALJOURNALRECID]         BIGINT         NOT NULL,
    [LEDGERDIMENSION]             BIGINT         NOT NULL,
    [LEDGERDIMENSIONTYPE]         INT            NOT NULL,
    [PARTITION]                   NVARCHAR (20)  NOT NULL,
    [SYNCSTARTDATETIME]           DATETIME       NOT NULL,
    [RECID]                       BIGINT         NOT NULL,
    CONSTRAINT [PK_RSMJournalDimensionCrosswalkStaging] PRIMARY KEY CLUSTERED ([EXECUTIONID] ASC, [GENERALJOURNALRECID] ASC, [PARTITION] ASC)
);


GO
PRINT N'Creating [dbo].[rsmSourceDocumentHeaderEntStaging]...';


GO
CREATE TABLE [dbo].[rsmSourceDocumentHeaderEntStaging] (
    [DEFINITIONGROUP]    NVARCHAR (60) NOT NULL,
    [EXECUTIONID]        NVARCHAR (90) NOT NULL,
    [ISSELECTED]         INT           NOT NULL,
    [TRANSFERSTATUS]     INT           NOT NULL,
    [PARTITION]          NVARCHAR (20) NOT NULL,
    [ACCOUNTINGSTATUS]   INT           NOT NULL,
    [RECIDCOPY1]         BIGINT        NOT NULL,
    [SOURCERELATIONTYPE] INT           NOT NULL,
    [TYPEENUMNAME]       NVARCHAR (81) NOT NULL,
    [TYPEENUMVALUE]      INT           NOT NULL,
    [SYNCSTARTDATETIME]  DATETIME      NOT NULL,
    [RECID]              BIGINT        NOT NULL,
    CONSTRAINT [PK_rsmSourceDocumentHeaderEntStaging] PRIMARY KEY CLUSTERED ([EXECUTIONID] ASC, [RECIDCOPY1] ASC, [PARTITION] ASC)
);


GO
PRINT N'Creating [dbo].[rsmSourceDocumentLineReferenceIdentityStaging]...';


GO
CREATE TABLE [dbo].[rsmSourceDocumentLineReferenceIdentityStaging] (
    [DEFINITIONGROUP]                          NVARCHAR (60)    NOT NULL,
    [EXECUTIONID]                              NVARCHAR (90)    NOT NULL,
    [ISSELECTED]                               INT              NOT NULL,
    [TRANSFERSTATUS]                           INT              NOT NULL,
    [LINEDATE]                                 DATETIME         NOT NULL,
    [LINEDESCRIPTION]                          NVARCHAR (1000)  NOT NULL,
    [LINEDOCUMENTREFERENCE]                    NVARCHAR (20)    NOT NULL,
    [LINENUMBER]                               NUMERIC (32, 16) NOT NULL,
    [LINETEXT]                                 NVARCHAR (1000)  NOT NULL,
    [LOCATION]                                 NVARCHAR (20)    NOT NULL,
    [PARTITION1]                               BIGINT           NOT NULL,
    [PROCUREMENTCATEGORY]                      NVARCHAR (254)   NOT NULL,
    [PRODUCTNUMBER]                            NVARCHAR (255)   NOT NULL,
    [QUANTITY]                                 NUMERIC (32, 6)  NOT NULL,
    [RECID1]                                   BIGINT           NOT NULL,
    [RECVERSION1]                              INT              NOT NULL,
    [SOURCEDOCUMENTACCTEVENTREFERENCEIDENTITY] BIGINT           NOT NULL,
    [SOURCEDOCUMENTLINE]                       BIGINT           NOT NULL,
    [UNIT]                                     NVARCHAR (10)    NOT NULL,
    [PARTITION]                                NVARCHAR (20)    NOT NULL,
    [SYNCSTARTDATETIME]                        DATETIME         NOT NULL,
    [RECID]                                    BIGINT           NOT NULL,
    CONSTRAINT [PK_rsmSourceDocumentLineReferenceIdentityStaging] PRIMARY KEY CLUSTERED ([EXECUTIONID] ASC, [RECID1] ASC, [PARTITION] ASC)
);


GO
PRINT N'Creating [dbo].[RSMSubLedgerJournalAccountEntryDistributionStaging]...';


GO
CREATE TABLE [dbo].[RSMSubLedgerJournalAccountEntryDistributionStaging] (
    [DEFINITIONGROUP]              NVARCHAR (60)   NOT NULL,
    [EXECUTIONID]                  NVARCHAR (90)   NOT NULL,
    [ISSELECTED]                   INT             NOT NULL,
    [TRANSFERSTATUS]               INT             NOT NULL,
    [ACCOUNTINGCURRENCYAMOUNT]     NUMERIC (32, 6) NOT NULL,
    [ACCOUNTINGDISTRIBUTION]       BIGINT          NOT NULL,
    [PARENTDISTRIBUTION]           BIGINT          NOT NULL,
    [RECIDCOPY1]                   BIGINT          NOT NULL,
    [REPORTINGCURRENCYAMOUNT]      NUMERIC (32, 6) NOT NULL,
    [SUBLEDGERJOURNALACCOUNTENTRY] BIGINT          NOT NULL,
    [PARTITION]                    NVARCHAR (20)   NOT NULL,
    [SYNCSTARTDATETIME]            DATETIME        NOT NULL,
    [RECID]                        BIGINT          NOT NULL,
    CONSTRAINT [PK_RSMSubLedgerJournalAccountEntryDistributionStaging] PRIMARY KEY CLUSTERED ([EXECUTIONID] ASC, [RECIDCOPY1] ASC, [PARTITION] ASC)
);


GO
PRINT N'Creating [dbo].[RSMSubLedgerJournalAccountEntryStaging]...';


GO
CREATE TABLE [dbo].[RSMSubLedgerJournalAccountEntryStaging] (
    [DEFINITIONGROUP]            NVARCHAR (60)   NOT NULL,
    [EXECUTIONID]                NVARCHAR (90)   NOT NULL,
    [ISSELECTED]                 INT             NOT NULL,
    [TRANSFERSTATUS]             INT             NOT NULL,
    [ACCOUNTINGCURRENCYAMOUNT]   NUMERIC (32, 6) NOT NULL,
    [GENERALJOURNALACCOUNTENTRY] BIGINT          NOT NULL,
    [RECIDCOPY1]                 BIGINT          NOT NULL,
    [POSTINGTYPE]                INT             NOT NULL,
    [REPORTINGCURRENCYAMOUNT]    NUMERIC (32, 6) NOT NULL,
    [SIDE]                       INT             NOT NULL,
    [SUBLEDGERJOURNALENTRY]      BIGINT          NOT NULL,
    [TRANSACTIONCURRENCY]        NVARCHAR (3)    NOT NULL,
    [TRANSACTIONCURRENCYAMOUNT]  NUMERIC (32, 6) NOT NULL,
    [PARTITION]                  NVARCHAR (20)   NOT NULL,
    [SYNCSTARTDATETIME]          DATETIME        NOT NULL,
    [RECID]                      BIGINT          NOT NULL,
    CONSTRAINT [PK_RSMSubLedgerJournalAccountEntryStaging] PRIMARY KEY CLUSTERED ([EXECUTIONID] ASC, [RECIDCOPY1] ASC, [PARTITION] ASC)
);


GO
PRINT N'Creating [dbo].[RSMSubLedgerJournalEntryStaging]...';


GO
CREATE TABLE [dbo].[RSMSubLedgerJournalEntryStaging] (
    [DEFINITIONGROUP]                 NVARCHAR (60)  NOT NULL,
    [EXECUTIONID]                     NVARCHAR (90)  NOT NULL,
    [ISSELECTED]                      INT            NOT NULL,
    [TRANSFERSTATUS]                  INT            NOT NULL,
    [ACCOUNTINGEVENT]                 BIGINT         NOT NULL,
    [DOCUMENTDATE]                    DATETIME       NOT NULL,
    [DOCUMENTNUMBER]                  NVARCHAR (20)  NOT NULL,
    [JOURNALNUMBER]                   NVARCHAR (20)  NOT NULL,
    [LEDGER]                          BIGINT         NOT NULL,
    [POSTINGLAYER]                    INT            NOT NULL,
    [REFERENCEIDENTITYTRANSFERSTATUS] INT            NOT NULL,
    [STATUS]                          INT            NOT NULL,
    [TRANSTXT]                        NVARCHAR (512) NOT NULL,
    [TYPE]                            INT            NOT NULL,
    [VOUCHER]                         NVARCHAR (20)  NOT NULL,
    [VOUCHERDATAAREAID]               NVARCHAR (4)   NOT NULL,
    [RECIDCOPY1]                      BIGINT         NOT NULL,
    [PARTITION]                       NVARCHAR (20)  NOT NULL,
    [SYNCSTARTDATETIME]               DATETIME       NOT NULL,
    [RECID]                           BIGINT         NOT NULL,
    CONSTRAINT [PK_RSMSubLedgerJournalEntryStaging] PRIMARY KEY CLUSTERED ([EXECUTIONID] ASC, [RECIDCOPY1] ASC, [PARTITION] ASC)
);


GO
PRINT N'Creating [dbo].[RSMVendTransStaging]...';


GO
CREATE TABLE [dbo].[RSMVendTransStaging] (
    [DEFINITIONGROUP]         NVARCHAR (60)   NOT NULL,
    [EXECUTIONID]             NVARCHAR (90)   NOT NULL,
    [ISSELECTED]              INT             NOT NULL,
    [TRANSFERSTATUS]          INT             NOT NULL,
    [ACCOUNTINGEVENT]         BIGINT          NOT NULL,
    [VENDORACCOUNTNUM]        NVARCHAR (20)   NOT NULL,
    [DOCUMENTNUM]             NVARCHAR (20)   NOT NULL,
    [DOCUMENTDATE]            DATETIME        NOT NULL,
    [REPORTINGCURRENCYAMOUNT] NUMERIC (32, 6) NOT NULL,
    [TRANSDATE]               DATETIME        NOT NULL,
    [VOUCHER]                 NVARCHAR (20)   NOT NULL,
    [VENDTRANSRECID]          BIGINT          NOT NULL,
    [PARTITION]               NVARCHAR (20)   NOT NULL,
    [CURRENCYCODE]            NVARCHAR (3)    NOT NULL,
    [TRANSTYPE]               INT             NOT NULL,
    [TXT]                     NVARCHAR (60)   NOT NULL,
    [INVOICE]                 NVARCHAR (20)   NOT NULL,
    [DATAAREAID]              NVARCHAR (4)    NOT NULL,
    [SYNCSTARTDATETIME]       DATETIME        NOT NULL,
    [RECID]                   BIGINT          NOT NULL,
    CONSTRAINT [PK_RSMVendTransStaging] PRIMARY KEY CLUSTERED ([EXECUTIONID] ASC, [VENDTRANSRECID] ASC, [DATAAREAID] ASC, [PARTITION] ASC)
);


GO
PRINT N'Creating [dbo].[StageLevelExplosion]...';


GO
CREATE TABLE [dbo].[StageLevelExplosion] (
    [Level1]         NVARCHAR (20) NOT NULL,
    [Level2]         NVARCHAR (20) NULL,
    [Level3]         NVARCHAR (20) NULL,
    [Level4]         NVARCHAR (20) NULL,
    [Level1vLevel2]  NVARCHAR (20) NULL,
    [Level1vLevel3]  NVARCHAR (20) NULL,
    [Level1vLevel4]  NVARCHAR (20) NULL,
    [Level2vLevel3]  NVARCHAR (20) NULL,
    [Level2vLevel4]  NVARCHAR (20) NULL,
    [Level3vLevel4]  NVARCHAR (20) NULL,
    [Type]           VARCHAR (50)  NULL,
    [Level5]         VARCHAR (50)  NULL,
    [Level6]         VARCHAR (50)  NULL,
    [Level7]         VARCHAR (50)  NULL,
    [Level8]         VARCHAR (50)  NULL,
    [Level9]         VARCHAR (50)  NULL,
    [Level10]        VARCHAR (50)  NULL,
    [Level1vLevel5]  VARCHAR (50)  NULL,
    [Level1vLevel6]  VARCHAR (50)  NULL,
    [Level1vLevel7]  VARCHAR (50)  NULL,
    [Level1vLevel8]  VARCHAR (50)  NULL,
    [Level1vLevel9]  VARCHAR (50)  NULL,
    [Level1vLevel10] VARCHAR (50)  NULL,
    [Level2vLevel5]  VARCHAR (50)  NULL,
    [Level2vLevel6]  VARCHAR (50)  NULL,
    [Level2vLevel7]  VARCHAR (50)  NULL,
    [Level2vLevel8]  VARCHAR (50)  NULL,
    [Level2vLevel9]  VARCHAR (50)  NULL,
    [Level2vLevel10] VARCHAR (50)  NULL,
    [Level3vLevel5]  VARCHAR (50)  NULL,
    [Level3vLevel6]  VARCHAR (50)  NULL,
    [Level3vLevel7]  VARCHAR (50)  NULL,
    [Level3vLevel8]  VARCHAR (50)  NULL,
    [Level3vLevel9]  VARCHAR (50)  NULL,
    [Level3vLevel10] VARCHAR (50)  NULL,
    [Level4vLevel5]  VARCHAR (50)  NULL,
    [Level4vLevel6]  VARCHAR (50)  NULL,
    [Level4vLevel7]  VARCHAR (50)  NULL,
    [Level4vLevel8]  VARCHAR (50)  NULL,
    [Level4vLevel9]  VARCHAR (50)  NULL,
    [Level4vLevel10] VARCHAR (50)  NULL,
    [Level5vLevel6]  VARCHAR (50)  NULL,
    [Level5vLevel7]  VARCHAR (50)  NULL,
    [Level5vLevel8]  VARCHAR (50)  NULL,
    [Level5vLevel9]  VARCHAR (50)  NULL,
    [Level5vLevel10] VARCHAR (50)  NULL,
    [Level6vLevel7]  VARCHAR (50)  NULL,
    [Level6vLevel8]  VARCHAR (50)  NULL,
    [Level6vLevel9]  VARCHAR (50)  NULL,
    [Level6vLevel10] VARCHAR (50)  NULL,
    [Level7vLevel8]  VARCHAR (50)  NULL,
    [Level7vLevel9]  VARCHAR (50)  NULL,
    [Level7vLevel10] VARCHAR (50)  NULL,
    [Level8vLevel9]  VARCHAR (50)  NULL,
    [Level8vLevel10] VARCHAR (50)  NULL,
    [Level9vLevel10] VARCHAR (50)  NULL
);


GO
PRINT N'Creating [dbo].[SystemUserStaging]...';


GO
CREATE TABLE [dbo].[SystemUserStaging] (
    [PERSONNAME]                                       NVARCHAR (60)    NOT NULL,
    [DEFINITIONGROUP]                                  NVARCHAR (60)    NOT NULL,
    [EXECUTIONID]                                      NVARCHAR (90)    NOT NULL,
    [ISSELECTED]                                       INT              NOT NULL,
    [TRANSFERSTATUS]                                   INT              NOT NULL,
    [DEFAULTCOUNTRYREGION]                             NVARCHAR (10)    NOT NULL,
    [DOCUMENTHANDLINGACTIVE]                           INT              NOT NULL,
    [SHOWATTACHMENTSTATUS]                             INT              NOT NULL,
    [EMAIL]                                            NVARCHAR (80)    NOT NULL,
    [SENDALERTASEMAILMESSAGE]                          INT              NOT NULL,
    [EVENTPOLLFREQUENCY]                               INT              NOT NULL,
    [EVENTPOPUPDISPLAYWHEN]                            INT              NOT NULL,
    [EVENTPOPUPLINKDESTINATION]                        INT              NOT NULL,
    [EVENTPOPUPS]                                      INT              NOT NULL,
    [EVENTWORKFLOWSHOWPOPUP]                           INT              NOT NULL,
    [SHOWNOTIFICATIONSINTHEMICROSOFTDYNAMICSAX7CLIENT] INT              NOT NULL,
    [SENDNOTIFICATIONSINEMAIL]                         INT              NOT NULL,
    [MARKEMPTYLINKS]                                   INT              NOT NULL,
    [USERID]                                           NVARCHAR (20)    NOT NULL,
    [LANGUAGE]                                         NVARCHAR (7)     NOT NULL,
    [SQMENABLED]                                       INT              NOT NULL,
    [SQMGUID]                                          UNIQUEIDENTIFIER NOT NULL,
    [WORKFLOWLINEITEMNOTIFICATIONFORMAT]               INT              NOT NULL,
    [DENSITY]                                          INT              NOT NULL,
    [THEME]                                            INT              NOT NULL,
    [STARTPAGE]                                        NVARCHAR (60)    NOT NULL,
    [EMAILPROVIDERID]                                  NVARCHAR (10)    NOT NULL,
    [USERNAME]                                         NVARCHAR (81)    NOT NULL,
    [ENABLED]                                          INT              NOT NULL,
    [COMPANY]                                          NVARCHAR (4)     NOT NULL,
    [AUTOLOGOFF]                                       INT              NOT NULL,
    [NETWORKDOMAIN]                                    NVARCHAR (255)   NOT NULL,
    [ALIAS]                                            NVARCHAR (255)   NOT NULL,
    [EXTERNALUSER]                                     INT              NOT NULL,
    [USERINFO_LANGUAGE]                                NVARCHAR (7)     NOT NULL,
    [HELPLANGUAGE]                                     NVARCHAR (7)     NOT NULL,
    [PREFERREDTIMEZONE]                                INT              NOT NULL,
    [PREFERREDCALENDAR]                                INT              NOT NULL,
    [HOMEPAGEREFRESHDURATION]                          INT              NOT NULL,
    [GLOBALLISTPAGELINKMODE]                           INT              NOT NULL,
    [GLOBALEXCELEXPORTMODE]                            INT              NOT NULL,
    [USERINFO_DEFAULTPARTITION]                        INT              NOT NULL,
    [GLOBALEXCELEXPORTFILEPATH]                        NVARCHAR (259)   NOT NULL,
    [PREFERREDLOCALE]                                  NVARCHAR (86)    NOT NULL,
    [ACCOUNTTYPE]                                      INT              NOT NULL,
    [AUTOMATICURLUPDATE]                               INT              NOT NULL,
    [PARTITION]                                        NVARCHAR (20)    NOT NULL,
    [SYNCSTARTDATETIME]                                DATETIME         NOT NULL,
    CONSTRAINT [PK_SystemUserStaging] PRIMARY KEY CLUSTERED ([EXECUTIONID] ASC, [USERID] ASC, [PARTITION] ASC)
);


GO
PRINT N'Creating [dbo].[tblLocalMeritCalc]...';


GO
CREATE TABLE [dbo].[tblLocalMeritCalc] (
    [ID]          INT            NOT NULL,
    [Sal]         NVARCHAR (100) NOT NULL,
    [HourlyRate]  NVARCHAR (100) NULL,
    [DateCreated] DATETIME       NULL,
    CONSTRAINT [PK_tblLocalMeritCalc] PRIMARY KEY CLUSTERED ([ID] ASC) WITH (FILLFACTOR = 80)
);


GO
PRINT N'Creating [dbo].[TotalingAccountExplosion]...';


GO
CREATE TABLE [dbo].[TotalingAccountExplosion] (
    [DEFINITIONGROUP]        NVARCHAR (60) NOT NULL,
    [EXECUTIONID]            NVARCHAR (90) NOT NULL,
    [ISSELECTED]             INT           NOT NULL,
    [TRANSFERSTATUS]         INT           NOT NULL,
    [TOTALINGMAINACCOUNTID]  NVARCHAR (20) NOT NULL,
    [TOTALINGACCOUNTNAME]    NVARCHAR (60) NOT NULL,
    [CHARTOFACCOUNTS]        NVARCHAR (60) NOT NULL,
    [FROMVALUE]              NVARCHAR (30) NOT NULL,
    [TOVALUE]                NVARCHAR (30) NOT NULL,
    [INVERTTOTALSIGN]        INT           NOT NULL,
    [PARTITION]              NVARCHAR (20) NOT NULL,
    [SYNCSTARTDATETIME]      DATETIME      NOT NULL,
    [RECID]                  BIGINT        NOT NULL,
    [COMPONENTMAINACCOUNTID] NVARCHAR (20) NOT NULL,
    [COMPONENTACCOUNTNAME]   NVARCHAR (60) NOT NULL
);


GO
PRINT N'Creating [dbo].[TotalingAccountExplosion].[IX_TotalingAccountExplosion]...';


GO
CREATE NONCLUSTERED INDEX [IX_TotalingAccountExplosion]
    ON [dbo].[TotalingAccountExplosion]([TOTALINGMAINACCOUNTID] ASC);


GO
PRINT N'Creating [dbo].[TotalingAccountTree]...';


GO
CREATE TABLE [dbo].[TotalingAccountTree] (
    [LeafAccount] NVARCHAR (20) NOT NULL,
    [level1]      NVARCHAR (20) NULL,
    [level2]      NVARCHAR (20) NULL,
    [level3]      NVARCHAR (20) NULL,
    [level4]      NVARCHAR (20) NULL,
    [level5]      NVARCHAR (20) NULL
);


GO
PRINT N'Creating [dbo].[TranProjAllocation]...';


GO
CREATE TABLE [dbo].[TranProjAllocation] (
    [department]                VARCHAR (10)     NULL,
    [project]                   VARCHAR (10)     NULL,
    [ACCOUNTINGDATE]            DATETIME         NOT NULL,
    [DataAreaID]                NVARCHAR (4)     NOT NULL,
    [TRANSACTIONCURRENCYAMOUNT] NUMERIC (32, 6)  NOT NULL,
    [AllocationPercentage]      DECIMAL (18, 10) NULL,
    [NewProj]                   INT              NULL,
    [RECID]                     BIGINT           NOT NULL
);


GO
PRINT N'Creating [dbo].[VendorInvoiceLineStaging]...';


GO
CREATE TABLE [dbo].[VendorInvoiceLineStaging] (
    [DIMENSIONDISPLAYVALUE]            NVARCHAR (500)   NOT NULL,
    [MAINACCOUNTDISPLAYVALUE]          NVARCHAR (500)   NOT NULL,
    [ITEMNAME]                         NVARCHAR (120)   NOT NULL,
    [DIOTOPERATIONTYPE]                INT              NOT NULL,
    [INVENTORYSITEID]                  NVARCHAR (10)    NOT NULL,
    [INVENTORYWAREHOUSEID]             NVARCHAR (10)    NOT NULL,
    [PRODUCTSIZEID]                    NVARCHAR (10)    NOT NULL,
    [PRODUCTCOLORID]                   NVARCHAR (10)    NOT NULL,
    [PRODUCTCONFIGURATIONID]           NVARCHAR (50)    NOT NULL,
    [PRODUCTSTYLEID]                   NVARCHAR (10)    NOT NULL,
    [ITEMBATCHNUMBER]                  NVARCHAR (30)    NOT NULL,
    [ORDEREDINVENTORYSTATUSID]         NVARCHAR (10)    NOT NULL,
    [DEFINITIONGROUP]                  NVARCHAR (60)    NOT NULL,
    [EXECUTIONID]                      NVARCHAR (90)    NOT NULL,
    [ISSELECTED]                       INT              NOT NULL,
    [TRANSFERSTATUS]                   INT              NOT NULL,
    [VENDORACCOUNT]                    NVARCHAR (20)    NOT NULL,
    [CHANGEQUANTITYMANUALLY]           INT              NOT NULL,
    [CLOSEFORRECEIPT]                  INT              NOT NULL,
    [COUNTYORIGDEST]                   NVARCHAR (10)    NOT NULL,
    [CURRENCY]                         NVARCHAR (3)     NOT NULL,
    [DELIVERYNAME]                     NVARCHAR (100)   NOT NULL,
    [LINEDESCRIPTION]                  NVARCHAR (1000)  NOT NULL,
    [DIMENSIONNUMBER]                  NVARCHAR (20)    NOT NULL,
    [INVENTNOW]                        NUMERIC (32, 6)  NOT NULL,
    [INVOICEACCOUNT]                   NVARCHAR (20)    NOT NULL,
    [ITEMNUMBER]                       NVARCHAR (20)    NOT NULL,
    [NETAMOUNT]                        NUMERIC (32, 6)  NOT NULL,
    [DISCOUNT]                         NUMERIC (32, 6)  NOT NULL,
    [LINENUMBER]                       NUMERIC (32, 16) NOT NULL,
    [DISCOUNTPERCENT]                  NUMERIC (32, 6)  NOT NULL,
    [LINETYPE]                         INT              NOT NULL,
    [MULTILINEDISCOUNT]                NUMERIC (32, 6)  NOT NULL,
    [MULTILINEDISCOUNTPERCENTAGE]      NUMERIC (32, 6)  NOT NULL,
    [ADJUSTEDUNITPRICE]                NUMERIC (32, 6)  NOT NULL,
    [PDSCALCULATIONID]                 NVARCHAR (10)    NOT NULL,
    [CWUPDATE]                         NUMERIC (32, 6)  NOT NULL,
    [CWDELIVERYREMAINDER]              NUMERIC (32, 6)  NOT NULL,
    [CWREMAININGQUANTITY]              NUMERIC (32, 6)  NOT NULL,
    [PORT]                             NVARCHAR (10)    NOT NULL,
    [PRICEUNIT]                        NUMERIC (32, 12) NOT NULL,
    [RELEASEALLRETAINEDAMOUNT]         INT              NOT NULL,
    [AMOUNT]                           NUMERIC (32, 6)  NOT NULL,
    [PERCENTAGE]                       NUMERIC (32, 6)  NOT NULL,
    [RETAINAGEAMOUNT]                  NUMERIC (32, 6)  NOT NULL,
    [TOTALRETAINEDAMOUNT]              NUMERIC (32, 6)  NOT NULL,
    [RETAINPERCENTAGE]                 NUMERIC (32, 6)  NOT NULL,
    [CHARGESONPURCHASES]               NUMERIC (32, 6)  NOT NULL,
    [UNITPRICE]                        NUMERIC (32, 6)  NOT NULL,
    [UNIT]                             NVARCHAR (10)    NOT NULL,
    [RECEIVENOW]                       NUMERIC (32, 6)  NOT NULL,
    [REMAINAFTER]                      NUMERIC (32, 6)  NOT NULL,
    [REMAINAFTERINVENT]                NUMERIC (32, 6)  NOT NULL,
    [REMAINBEFORE]                     NUMERIC (32, 6)  NOT NULL,
    [REMAINBEFOREINVENT]               NUMERIC (32, 6)  NOT NULL,
    [ORIGINALDELIVERREMAINDER]         NUMERIC (32, 6)  NOT NULL,
    [VENDORINVOICELINEREVIEWSTATUS]    INT              NOT NULL,
    [STATISTICSPROCEDURE]              NVARCHAR (10)    NOT NULL,
    [PURCHASEORDER]                    NVARCHAR (20)    NOT NULL,
    [TAX1099AMOUNT]                    NUMERIC (32, 6)  NOT NULL,
    [DELIVERYSTATE]                    NVARCHAR (10)    NOT NULL,
    [TAX1099STATEAMOUNT]               NUMERIC (32, 6)  NOT NULL,
    [SALESTAXGROUP]                    NVARCHAR (10)    NOT NULL,
    [ITEMSALESTAX]                     NVARCHAR (10)    NOT NULL,
    [WITHHOLDINGTAXGROUP]              NVARCHAR (10)    NOT NULL,
    [TRANSACTIONCODE]                  NVARCHAR (10)    NOT NULL,
    [TRANSPORT]                        NVARCHAR (10)    NOT NULL,
    [COMMODITY]                        NVARCHAR (20)    NOT NULL,
    [ORIGCOUNTRYREGIONID]              NVARCHAR (10)    NOT NULL,
    [STATEOFORIGIN]                    NVARCHAR (10)    NOT NULL,
    [ACCOUNTINGDISTRIBUTIONTEMPLATEID] NVARCHAR (40)    NOT NULL,
    [PARTYID]                          NVARCHAR (40)    NOT NULL,
    [DATAAREACOMPANY]                  NVARCHAR (4)     NOT NULL,
    [PROCUREMENTCATEGORYNAME]          NVARCHAR (254)   NOT NULL,
    [PROCUREMENTCATEGORYHIERARCHYNAME] NVARCHAR (128)   NOT NULL,
    [TAX1099BOX]                       NVARCHAR (10)    NOT NULL,
    [TAX1099TYPE]                      INT              NOT NULL,
    [HEADERREFERENCE]                  NVARCHAR (20)    NOT NULL,
    [PURCHLINENUMBER]                  BIGINT           NOT NULL,
    [TAXSERVICECODE]                   NVARCHAR (10)    NOT NULL,
    [TAXWITHHOLDGROUP]                 NVARCHAR (10)    NOT NULL,
    [CFOPCODE]                         NVARCHAR (5)     NOT NULL,
    [TAXWITHHOLDITEMGROUPNAME]         NVARCHAR (60)    NOT NULL,
    [INVOICELINENUMBER]                NUMERIC (32, 16) NOT NULL,
    [BUDGETRESERVATIONLINENUMBER]      INT              NOT NULL,
    [BUDGETRESERVATIONDOCUMENTNUMBER]  NVARCHAR (20)    NOT NULL,
    [PARTITION]                        NVARCHAR (20)    NOT NULL,
    [DATAAREAID]                       NVARCHAR (4)     NOT NULL,
    [SYNCSTARTDATETIME]                DATETIME         NOT NULL,
    CONSTRAINT [PK_VendorInvoiceLineStaging] PRIMARY KEY CLUSTERED ([EXECUTIONID] ASC, [HEADERREFERENCE] ASC, [INVOICELINENUMBER] ASC, [DATAAREAID] ASC, [PARTITION] ASC)
);


GO
PRINT N'Creating [dbo].[VendVendorBankAccountStaging]...';


GO
CREATE TABLE [dbo].[VendVendorBankAccountStaging] (
    [CROSSRATE]                                  NUMERIC (32, 16) NOT NULL,
    [DEFINITIONGROUP]                            NVARCHAR (60)    NOT NULL,
    [EXECUTIONID]                                NVARCHAR (90)    NOT NULL,
    [ISSELECTED]                                 INT              NOT NULL,
    [TRANSFERSTATUS]                             INT              NOT NULL,
    [VENDORBANKACCOUNTID]                        NVARCHAR (10)    NOT NULL,
    [BANKACCOUNTNUMBER]                          NVARCHAR (48)    NOT NULL,
    [BANKNAME]                                   NVARCHAR (60)    NOT NULL,
    [BANKNAMEINKANA]                             NVARCHAR (40)    NOT NULL,
    [BANKGROUPID]                                NVARCHAR (10)    NOT NULL,
    [VENDORACCOUNTNUMBER]                        NVARCHAR (20)    NOT NULL,
    [ROUTINGNUMBERTYPE]                          INT              NOT NULL,
    [ROUTINGNUMBER]                              NVARCHAR (12)    NOT NULL,
    [DUNSNUMBER]                                 NVARCHAR (9)     NOT NULL,
    [DUNS4NUMBERSUFFIX]                          NVARCHAR (4)     NOT NULL,
    [CONTROLINTERNALNUMBER]                      NVARCHAR (1)     NOT NULL,
    [SWIFTCODE]                                  NVARCHAR (20)    NOT NULL,
    [IBAN]                                       NVARCHAR (48)    NOT NULL,
    [BANKACCOUNTTYPE]                            INT              NOT NULL,
    [CORRESPONDENCEBANKACCOUNTNUMBER]            NVARCHAR (48)    NOT NULL,
    [BANKCONSTANTSYMBOL]                         NVARCHAR (10)    NOT NULL,
    [BANKSPECIFICSYMBOL]                         NVARCHAR (60)    NOT NULL,
    [ACTIVEDATE]                                 DATETIME         NOT NULL,
    [EXPIRATIONDATE]                             DATETIME         NOT NULL,
    [BANKTRANSACTIONTYPE]                        INT              NOT NULL,
    [FOREIGNBANKGROUPID]                         NVARCHAR (10)    NOT NULL,
    [FOREIGNBANKACCOUNTNUMBER]                   NVARCHAR (48)    NOT NULL,
    [FOREIGNBANKSWIFTCODE]                       NVARCHAR (20)    NOT NULL,
    [RECIPIENTTEXTCODE]                          NVARCHAR (10)    NOT NULL,
    [BANKMESSAGE]                                NVARCHAR (255)   NOT NULL,
    [RATEOFEXCHANGEREFERENCE]                    NVARCHAR (11)    NOT NULL,
    [CURRENTCURRENCYCODE]                        NVARCHAR (3)     NOT NULL,
    [ISDEFAULTBANKACCOUNTFORCURRENTCURRENCY]     INT              NOT NULL,
    [ISDEFAULTBANKACCOUNT]                       INT              NOT NULL,
    [BANKCORRESPONDENCEBANKGROUPID]              NVARCHAR (10)    NOT NULL,
    [BANKCORRESPONDENCEACCOUNTBANKGROUPID]       NVARCHAR (10)    NOT NULL,
    [INTERIMBANKCORRESPONDENCEBANKACCOUNTNUMBER] NVARCHAR (48)    NOT NULL,
    [INTERIMVENDORBANKACCOUNTNUMBER]             NVARCHAR (10)    NOT NULL,
    [CONTACTPHONENUMBER]                         NVARCHAR (20)    NOT NULL,
    [CONTACTPHONENUMBEREXTENSION]                NVARCHAR (10)    NOT NULL,
    [CONTACTMOBILEPHONENUMBER]                   NVARCHAR (20)    NOT NULL,
    [CONTACTPAGER]                               NVARCHAR (20)    NOT NULL,
    [CONTACTFAXNUMBER]                           NVARCHAR (20)    NOT NULL,
    [CONTACTEMAILADDRESS]                        NVARCHAR (80)    NOT NULL,
    [CONTACTEMAILADDRESSFORSENDINGSMS]           NVARCHAR (80)    NOT NULL,
    [CONTACTINTERNETADDRESS]                     NVARCHAR (255)   NOT NULL,
    [CONTACTTELEXNUMBER]                         NVARCHAR (20)    NOT NULL,
    [CONTACTNAME]                                NVARCHAR (60)    NOT NULL,
    [FORMATTEDADDRESS]                           NVARCHAR (250)   NOT NULL,
    [ADDRESSLOCATIONID]                          NVARCHAR (30)    NOT NULL,
    [ADDRESSDESCRIPTION]                         NVARCHAR (60)    NOT NULL,
    [ADDRESSCOUNTRY]                             NVARCHAR (10)    NOT NULL,
    [ADDRESSCOUNTRYISOCODE]                      NVARCHAR (2)     NOT NULL,
    [ADDRESSSTATE]                               NVARCHAR (10)    NOT NULL,
    [ADDRESSCITY]                                NVARCHAR (60)    NOT NULL,
    [ADDRESSCOUNTY]                              NVARCHAR (10)    NOT NULL,
    [ADDRESSSTREET]                              NVARCHAR (250)   NOT NULL,
    [ADDRESSSTREETNUMBER]                        NVARCHAR (20)    NOT NULL,
    [ADDRESSCITYINKANA]                          NVARCHAR (60)    NOT NULL,
    [ADDRESSSTREETINKANA]                        NVARCHAR (250)   NOT NULL,
    [ADDRESSLATITUDE]                            NUMERIC (32, 6)  NOT NULL,
    [ADDRESSLONGITUDE]                           NUMERIC (32, 6)  NOT NULL,
    [ADDRESSZIPCODE]                             NVARCHAR (10)    NOT NULL,
    [ADDRESSDISTRICTNAME]                        NVARCHAR (60)    NOT NULL,
    [ADDRESSPOSTBOX]                             NVARCHAR (20)    NOT NULL,
    [ADDRESSBUILDINGCOMPLIMENT]                  NVARCHAR (60)    NOT NULL,
    [ADDRESSVALIDFROM]                           DATETIME         NOT NULL,
    [ADDRESSVALIDTO]                             DATETIME         NOT NULL,
    [ADDRESSTIMEZONE]                            INT              NOT NULL,
    [PARTITION]                                  NVARCHAR (20)    NOT NULL,
    [DATAAREAID]                                 NVARCHAR (4)     NOT NULL,
    [SYNCSTARTDATETIME]                          DATETIME         NOT NULL,
    CONSTRAINT [PK_VendVendorBankAccountStaging] PRIMARY KEY CLUSTERED ([EXECUTIONID] ASC, [VENDORBANKACCOUNTID] ASC, [VENDORACCOUNTNUMBER] ASC, [DATAAREAID] ASC, [PARTITION] ASC)
);


GO
PRINT N'Creating [dbo].[VendVendorV2Staging]...';


GO
CREATE TABLE [dbo].[VendVendorV2Staging] (
    [ISOWNERDISABLED]                                        INT             NOT NULL,
    [ETHNICORIGINID]                                         NVARCHAR (15)   NOT NULL,
    [ISWOMANOWNER]                                           INT             NOT NULL,
    [ISVENDORLOCALLYOWNED]                                   INT             NOT NULL,
    [ISMINORITYOWNED]                                        INT             NOT NULL,
    [TAX1099FEDERALTAXID]                                    NVARCHAR (11)   NOT NULL,
    [ISSERVICEVETERANOWNED]                                  INT             NOT NULL,
    [DEFAULTLEDGERDIMENSIONDISPLAYVALUE]                     NVARCHAR (500)  NOT NULL,
    [DEFAULTOFFSETLEDGERACCOUNTDISPLAYVALUE]                 NVARCHAR (500)  NOT NULL,
    [ADDRESSBOOKS]                                           NVARCHAR (200)  NOT NULL,
    [ADDRESSLOCATIONROLES]                                   NVARCHAR (100)  NOT NULL,
    [VENDORPARTYTYPE]                                        NVARCHAR (13)   NOT NULL,
    [PRIMARYEMAILADDRESSPURPOSE]                             NVARCHAR (100)  NOT NULL,
    [PRIMARYFAXNUMBERPURPOSE]                                NVARCHAR (100)  NOT NULL,
    [PRIMARYPHONENUMBERPURPOSE]                              NVARCHAR (100)  NOT NULL,
    [PRIMARYTELEXPURPOSE]                                    NVARCHAR (100)  NOT NULL,
    [PRIMARYURLPURPOSE]                                      NVARCHAR (100)  NOT NULL,
    [COMPOSITIONSCHEME]                                      INT             NOT NULL,
    [FOREIGNVENDOR]                                          INT             NOT NULL,
    [GTAVENDOR]                                              INT             NOT NULL,
    [PREFERENTIALVENDOR]                                     INT             NOT NULL,
    [SSIVENDOR]                                              INT             NOT NULL,
    [NATUREOFASSESSEE]                                       INT             NOT NULL,
    [PANNUMBER]                                              NVARCHAR (10)   NOT NULL,
    [PANREFERENCENUMBER]                                     NVARCHAR (10)   NOT NULL,
    [PANSTATUS]                                              INT             NOT NULL,
    [SSIVALIDITYDATE]                                        DATETIME        NOT NULL,
    [TCSGROUP]                                               NVARCHAR (10)   NOT NULL,
    [TDSGROUP]                                               NVARCHAR (10)   NOT NULL,
    [ELECTRONICLOCATIONID]                                   NVARCHAR (30)   NOT NULL,
    [VENDORACCOUNTNUMBER]                                    NVARCHAR (20)   NOT NULL,
    [VENDORPAYMENTFINECODE]                                  NVARCHAR (10)   NOT NULL,
    [VENDORPAYMENTFINANCIALINTERESTCODE]                     NVARCHAR (10)   NOT NULL,
    [BIRTHPLACE]                                             NVARCHAR (60)   NOT NULL,
    [BIRTHCOUNTYCODE]                                        NVARCHAR (3)    NOT NULL,
    [RESIDENCEFOREIGNCOUNTRYREGIONID]                        NVARCHAR (10)   NOT NULL,
    [FISCALDOCUMENTINCOMECODE]                               NVARCHAR (10)   NOT NULL,
    [PRIMARYFACEBOOKPURPOSE]                                 NVARCHAR (100)  NOT NULL,
    [PRIMARYLINKEDINPURPOSE]                                 NVARCHAR (100)  NOT NULL,
    [PRIMARYTWITTERPURPOSE]                                  NVARCHAR (100)  NOT NULL,
    [DUNSNUMBER]                                             NVARCHAR (9)    NOT NULL,
    [ADDRESSCOUNTRYREGIONISOCODE]                            NVARCHAR (2)    NOT NULL,
    [DEFINITIONGROUP]                                        NVARCHAR (60)   NOT NULL,
    [EXECUTIONID]                                            NVARCHAR (90)   NOT NULL,
    [ISSELECTED]                                             INT             NOT NULL,
    [TRANSFERSTATUS]                                         INT             NOT NULL,
    [WITHHOLDINGTAXGROUPCODE]                                NVARCHAR (10)   NOT NULL,
    [DEFAULTPAYMENTTERMSNAME]                                NVARCHAR (10)   NOT NULL,
    [LINEDISCOUNTVENDORGROUPCODE]                            NVARCHAR (10)   NOT NULL,
    [BANKACCOUNTID]                                          NVARCHAR (10)   NOT NULL,
    [CENTRALBANKPURPOSECODE]                                 NVARCHAR (10)   NOT NULL,
    [CENTRALBANKPURPOSETEXT]                                 NVARCHAR (140)  NOT NULL,
    [HASONLYTAKENBIDS]                                       INT             NOT NULL,
    [ONHOLDSTATUS]                                           INT             NOT NULL,
    [VENDORHOLDRELEASEDATE]                                  DATETIME        NOT NULL,
    [CASHDISCOUNTCODE]                                       NVARCHAR (10)   NOT NULL,
    [ISPURCHASEORDERCHANGEREQUESTOVERRIDEALLOWED]            INT             NOT NULL,
    [ISCHANGEMANAGEMENTACTIVATED]                            INT             NOT NULL,
    [ISCHANGEMANGEMENTOVERRIDEBYVENDORALLOWED]               INT             NOT NULL,
    [CISCOMPANYREGISTRATIONNUMBER]                           NVARCHAR (8)    NOT NULL,
    [CISNATIONALINSURANCENUMBER]                             NVARCHAR (9)    NOT NULL,
    [CISSTATUS]                                              INT             NOT NULL,
    [CISUNIQUETAXPAYERREFERENCE]                             NVARCHAR (10)   NOT NULL,
    [CISVERIFICATIONDATE]                                    DATETIME        NOT NULL,
    [CISVERIFICATIONNUMBER]                                  NVARCHAR (13)   NOT NULL,
    [CLEARINGPERIODPAYMENTTERMSID]                           NVARCHAR (10)   NOT NULL,
    [COMMERCIALREGISTERNAME]                                 NVARCHAR (40)   NOT NULL,
    [COMMERCIALREGISTERINSETNUMBER]                          NVARCHAR (10)   NOT NULL,
    [COMMERCIALREGISTERSECTION]                              NVARCHAR (10)   NOT NULL,
    [COMPANYCHAINNAME]                                       NVARCHAR (20)   NOT NULL,
    [SIRETNUMBER]                                            NVARCHAR (14)   NOT NULL,
    [COMPANYTYPE]                                            INT             NOT NULL,
    [PRIMARYCONTACTPERSONID]                                 NVARCHAR (20)   NOT NULL,
    [CREDITLIMIT]                                            NUMERIC (32, 6) NOT NULL,
    [CREDITRATING]                                           NVARCHAR (10)   NOT NULL,
    [UNIQUEPOPULATIONREGISTRYCODE]                           NVARCHAR (18)   NOT NULL,
    [CURRENCYCODE]                                           NVARCHAR (3)    NOT NULL,
    [TAX1099DOINGBUSINESSASNAME]                             NVARCHAR (60)   NOT NULL,
    [DEFAULTINVENTORYSTATUSID]                               NVARCHAR (10)   NOT NULL,
    [DESTINATIONCODE]                                        NVARCHAR (10)   NOT NULL,
    [DIOTCOUNTRYCODE]                                        NVARCHAR (10)   NOT NULL,
    [DEFAULTDELIVERYMODEID]                                  NVARCHAR (10)   NOT NULL,
    [DEFAULTDELIVERYTERMSCODE]                               NVARCHAR (10)   NOT NULL,
    [DEFAULTTOTALDISCOUNTVENDORGROUPCODE]                    NVARCHAR (10)   NOT NULL,
    [FACTORINGVENDORACCOUNTNUMBER]                           NVARCHAR (20)   NOT NULL,
    [FISCALCODE]                                             NVARCHAR (16)   NOT NULL,
    [ISFOREIGNENTITY]                                        INT             NOT NULL,
    [FOREIGNVENDORTAXREGISTRATIONID]                         NVARCHAR (40)   NOT NULL,
    [UPSFREIGHTZONE]                                         NVARCHAR (10)   NOT NULL,
    [ISVENDORLOCATEDINHUBZONE]                               INT             NOT NULL,
    [AREPRICESINCLUDINGSALESTAX]                             INT             NOT NULL,
    [DEFAULTPROCUMENTWAREHOUSEID]                            NVARCHAR (10)   NOT NULL,
    [DEFAULTPURCHASESITEID]                                  NVARCHAR (10)   NOT NULL,
    [INVOICEVENDORACCOUNTNUMBER]                             NVARCHAR (20)   NOT NULL,
    [BUYERGROUPID]                                           NVARCHAR (10)   NOT NULL,
    [LINEOFBUSINESSID]                                       NVARCHAR (10)   NOT NULL,
    [CHARGEVENDORGROUPID]                                    NVARCHAR (10)   NOT NULL,
    [VENDORINVOICELINEMATCHINGPOLICY]                        INT             NOT NULL,
    [NOTES]                                                  NVARCHAR (MAX)  NULL,
    [MULTILINEDISCOUNTVENDORGROUPCODE]                       NVARCHAR (10)   NOT NULL,
    [NAMECONTROL]                                            NVARCHAR (4)    NOT NULL,
    [NATIONALITY]                                            NVARCHAR (50)   NOT NULL,
    [NUMBERSEQUENCEGROUPID]                                  NVARCHAR (10)   NOT NULL,
    [DEFAULTOFFSETACCOUNTTYPE]                               INT             NOT NULL,
    [ISONETIMEVENDOR]                                        INT             NOT NULL,
    [DIOTOPERATIONTYPE]                                      INT             NOT NULL,
    [NATIONALREGISTRYNUMBERID]                               NVARCHAR (10)   NOT NULL,
    [DEFAULTPAYMENTDAYNAME]                                  NVARCHAR (10)   NOT NULL,
    [PAYMENTID]                                              NVARCHAR (200)  NOT NULL,
    [DEFAULTVENDORPAYMENTMETHODNAME]                         NVARCHAR (10)   NOT NULL,
    [DEFAULTPAYMENTSCHEDULENAME]                             NVARCHAR (30)   NOT NULL,
    [PAYMENTSPECIFICATIONID]                                 NVARCHAR (10)   NOT NULL,
    [PRICEVENDORGROUPID]                                     NVARCHAR (10)   NOT NULL,
    [WILLPURCHASEORDERINCLUDEPRICESANDAMOUNTS]               INT             NOT NULL,
    [PURCHASEWORKCALENDARID]                                 NVARCHAR (10)   NOT NULL,
    [DEFAULTPURCHASEORDERPOOLID]                             NVARCHAR (10)   NOT NULL,
    [RFCFEDERALTAXNUMBER]                                    NVARCHAR (13)   NOT NULL,
    [ISFLAGGEDWITHSECONDTIN]                                 INT             NOT NULL,
    [BUSINESSSEGMENTCODE]                                    NVARCHAR (20)   NOT NULL,
    [ISSMALLBUSINESS]                                        INT             NOT NULL,
    [STATEINSCRIPTION]                                       NVARCHAR (30)   NOT NULL,
    [BUSINESSSUBSEGMENTCODE]                                 NVARCHAR (20)   NOT NULL,
    [DEFAULTSUPPLEMENTARYPRODUCTVENDORGROUPID]               NVARCHAR (10)   NOT NULL,
    [PURCHASEREBATEVENDORGROUPID]                            NVARCHAR (20)   NOT NULL,
    [TAX1099NAMETOUSE]                                       INT             NOT NULL,
    [ISREPORTINGTAX1099]                                     INT             NOT NULL,
    [SALESTAXGROUPCODE]                                      NVARCHAR (10)   NOT NULL,
    [TAX1099IDTYPE]                                          INT             NOT NULL,
    [ISWITHHOLDINGTAXCALCULATED]                             INT             NOT NULL,
    [DEFAULTCASHDISCOUNTUSAGE]                               INT             NOT NULL,
    [TAXEXEMPTNUMBER]                                        NVARCHAR (20)   NOT NULL,
    [VENDORGROUPID]                                          NVARCHAR (10)   NOT NULL,
    [PRODUCTDESCRIPTIONVENDORGROUPID]                        NVARCHAR (10)   NOT NULL,
    [DIOTVENDORTYPE]                                         INT             NOT NULL,
    [VENDORPRICETOLERANCEGROUPID]                            NVARCHAR (10)   NOT NULL,
    [ISW9RECEIVED]                                           INT             NOT NULL,
    [ISW9CHECKINGENABLED]                                    INT             NOT NULL,
    [OURACCOUNTNUMBER]                                       NVARCHAR (20)   NOT NULL,
    [NAFCODE]                                                NVARCHAR (5)    NOT NULL,
    [VENDORINVOICEDECLARATIONID]                             NVARCHAR (10)   NOT NULL,
    [PAYMENTTRANSACTIONCODE]                                 NVARCHAR (2)    NOT NULL,
    [MAINCONTACTPERSONNELNUMBER]                             NVARCHAR (25)   NOT NULL,
    [TAX1099BOXID]                                           NVARCHAR (10)   NOT NULL,
    [TAX1099TYPE]                                            INT             NOT NULL,
    [VENDOREXCEPTIONGROUPID]                                 NVARCHAR (10)   NOT NULL,
    [ADDRESSDESCRIPTION]                                     NVARCHAR (60)   NOT NULL,
    [ADDRESSCITY]                                            NVARCHAR (60)   NOT NULL,
    [ADDRESSCOUNTRYREGIONID]                                 NVARCHAR (10)   NOT NULL,
    [ADDRESSCOUNTYID]                                        NVARCHAR (10)   NOT NULL,
    [ADDRESSDISTRICTNAME]                                    NVARCHAR (60)   NOT NULL,
    [ADDRESSLATITUDE]                                        NUMERIC (32, 6) NOT NULL,
    [ADDRESSLOCATIONID]                                      NVARCHAR (30)   NOT NULL,
    [ADDRESSLONGITUDE]                                       NUMERIC (32, 6) NOT NULL,
    [ADDRESSSTATEID]                                         NVARCHAR (10)   NOT NULL,
    [ADDRESSSTREET]                                          NVARCHAR (250)  NOT NULL,
    [ADDRESSBUILDINGCOMPLIMENT]                              NVARCHAR (60)   NOT NULL,
    [ADDRESSSTREETNUMBER]                                    NVARCHAR (20)   NOT NULL,
    [ADDRESSTIMEZONE]                                        INT             NOT NULL,
    [ADDRESSVALIDFROM]                                       DATETIME        NOT NULL,
    [ADDRESSVALIDTO]                                         DATETIME        NOT NULL,
    [ADDRESSZIPCODE]                                         NVARCHAR (10)   NOT NULL,
    [ADDRESSPOSTBOX]                                         NVARCHAR (20)   NOT NULL,
    [ADDRESSCITYINKANA]                                      NVARCHAR (60)   NOT NULL,
    [ADDRESSSTREETINKANA]                                    NVARCHAR (250)  NOT NULL,
    [ADDRESSBRAZILIANCNPJORCPF]                              NVARCHAR (20)   NOT NULL,
    [ADDRESSBRAZILIANIE]                                     NVARCHAR (20)   NOT NULL,
    [FORMATTEDPRIMARYADDRESS]                                NVARCHAR (250)  NOT NULL,
    [VENDORKNOWNASNAME]                                      NVARCHAR (100)  NOT NULL,
    [LANGUAGEID]                                             NVARCHAR (7)    NOT NULL,
    [VENDORORGANIZATIONNAME]                                 NVARCHAR (100)  NOT NULL,
    [VENDORSEARCHNAME]                                       NVARCHAR (60)   NOT NULL,
    [ORGANIZATIONABCCODE]                                    INT             NOT NULL,
    [ORGANIZATIONNUMBER]                                     NVARCHAR (25)   NOT NULL,
    [ORGANIZATIONEMPLOYEEAMOUNT]                             INT             NOT NULL,
    [ORGANIZATIONPHONETICNAME]                               NVARCHAR (100)  NOT NULL,
    [VENDORPARTYNUMBER]                                      NVARCHAR (40)   NOT NULL,
    [PERSONANNIVERSARYDAY]                                   INT             NOT NULL,
    [PERSONANNIVERSARYMONTH]                                 INT             NOT NULL,
    [PERSONANNIVERSARYYEAR]                                  INT             NOT NULL,
    [PERSONBIRTHDAY]                                         INT             NOT NULL,
    [PERSONBIRTHMONTH]                                       INT             NOT NULL,
    [PERSONBIRTHYEAR]                                        INT             NOT NULL,
    [PERSONCHILDRENNAMES]                                    NVARCHAR (150)  NOT NULL,
    [PERSONGENDER]                                           INT             NOT NULL,
    [PERSONHOBBIES]                                          NVARCHAR (150)  NOT NULL,
    [PERSONFIRSTNAME]                                        NVARCHAR (25)   NOT NULL,
    [PERSONMIDDLENAME]                                       NVARCHAR (25)   NOT NULL,
    [PERSONLASTNAMEPREFIX]                                   NVARCHAR (25)   NOT NULL,
    [PERSONLASTNAME]                                         NVARCHAR (25)   NOT NULL,
    [PERSONINITIALS]                                         NVARCHAR (10)   NOT NULL,
    [PERSONMARITALSTATUS]                                    INT             NOT NULL,
    [PERSONPERSONALSUFFIX]                                   NVARCHAR (50)   NOT NULL,
    [PERSONPERSONALTITLE]                                    NVARCHAR (50)   NOT NULL,
    [PERSONPHONETICFIRSTNAME]                                NVARCHAR (25)   NOT NULL,
    [PERSONPHONETICLASTNAME]                                 NVARCHAR (25)   NOT NULL,
    [PERSONPHONETICMIDDLENAME]                               NVARCHAR (25)   NOT NULL,
    [PERSONPROFESSIONALSUFFIX]                               NVARCHAR (50)   NOT NULL,
    [PERSONPROFESSIONALTITLE]                                NVARCHAR (50)   NOT NULL,
    [PRIMARYEMAILADDRESS]                                    NVARCHAR (255)  NOT NULL,
    [PRIMARYEMAILADDRESSDESCRIPTION]                         NVARCHAR (60)   NOT NULL,
    [ISPRIMARYEMAILADDRESSIMENABLED]                         INT             NOT NULL,
    [PRIMARYFAXNUMBER]                                       NVARCHAR (255)  NOT NULL,
    [PRIMARYFAXNUMBERDESCRIPTION]                            NVARCHAR (60)   NOT NULL,
    [PRIMARYFAXNUMBEREXTENSION]                              NVARCHAR (10)   NOT NULL,
    [PRIMARYPHONENUMBER]                                     NVARCHAR (255)  NOT NULL,
    [PRIMARYPHONENUMBERDESCRIPTION]                          NVARCHAR (60)   NOT NULL,
    [ISPRIMARYPHONENUMBERMOBILE]                             INT             NOT NULL,
    [PRIMARYTELEX]                                           NVARCHAR (255)  NOT NULL,
    [PRIMARYTELEXDESCRIPTION]                                NVARCHAR (60)   NOT NULL,
    [PRIMARYURL]                                             NVARCHAR (255)  NOT NULL,
    [PRIMARYURLDESCRIPTION]                                  NVARCHAR (60)   NOT NULL,
    [PRIMARYFACEBOOK]                                        NVARCHAR (255)  NOT NULL,
    [PRIMARYFACEBOOKDESCRIPTION]                             NVARCHAR (60)   NOT NULL,
    [PRIMARYLINKEDIN]                                        NVARCHAR (255)  NOT NULL,
    [PRIMARYLINKEDINDESCRIPTION]                             NVARCHAR (60)   NOT NULL,
    [PRIMARYTWITTER]                                         NVARCHAR (255)  NOT NULL,
    [PRIMARYTWITTERDESCRIPTION]                              NVARCHAR (60)   NOT NULL,
    [WILLPURCHASEORDERPROCESSINGSUMMARYUPDATEPURCHASEORDER]  INT             NOT NULL,
    [WILLPRODUCTRECEIPTPROCESSINGSUMMARYUPDATEPURCHASEORDER] INT             NOT NULL,
    [WILLRECEIPTSLISTPROCESSINGSUMMARYUPDATEPURCHASEORDER]   INT             NOT NULL,
    [WILLINVOICEPROCESSINGSUMMARYUPDATEPURCHASEORDER]        INT             NOT NULL,
    [ISCUSIPIDENTIFICATIONNUMBERAPPLICABLE]                  INT             NOT NULL,
    [CUSIPIDENTIFICATIONNUMBER]                              NVARCHAR (9)    NOT NULL,
    [CUSIPDETAILS]                                           NVARCHAR (60)   NOT NULL,
    [OIDINVESTORTYPE]                                        INT             NOT NULL,
    [OIDNOMINEEDETAILS]                                      NVARCHAR (60)   NOT NULL,
    [ISNATIONALREGISTRYNUMBER]                               NVARCHAR (10)   NOT NULL,
    [WITHHOLDINGTAXVENDORTYPE]                               INT             NOT NULL,
    [PURCHASEORDERCONSOLIDATIONDAYOFMONTH]                   INT             NOT NULL,
    [PAYMENTFEEGROUPID]                                      NVARCHAR (20)   NOT NULL,
    [ISVENDORPAYINGBANKPAYMENTFEE]                           INT             NOT NULL,
    [BRAZILIANCCM]                                           NVARCHAR (20)   NOT NULL,
    [BRAZILIANCNPJORCPF]                                     NVARCHAR (20)   NOT NULL,
    [BRAZILIANCNAE]                                          NVARCHAR (10)   NOT NULL,
    [FOREIGNERID]                                            NVARCHAR (20)   NOT NULL,
    [BRAZILIANIE]                                            NVARCHAR (20)   NOT NULL,
    [BRAZILIANNIT]                                           NVARCHAR (14)   NOT NULL,
    [FISCALOPERATIONPRESENCETYPE]                            INT             NOT NULL,
    [ISSERVICEDELIVERYADDRESSBASED]                          INT             NOT NULL,
    [ISPURCHASECONSUMED]                                     INT             NOT NULL,
    [BRAZILIANINSSCEI]                                       NVARCHAR (15)   NOT NULL,
    [ISINCOMINGFISCALDOCUMENTGENERATED]                      INT             NOT NULL,
    [ISICMSCONTRIBUTOR]                                      INT             NOT NULL,
    [VENDORPORTALCOLLABORATIONMETHOD]                        INT             NOT NULL,
    [PRIMARYPHONENUMBEREXTENSION]                            NVARCHAR (10)   NOT NULL,
    [ZAKATREGISTRATIONNUMBER]                                NVARCHAR (25)   NOT NULL,
    [ZAKATFILENUMBER]                                        NVARCHAR (15)   NOT NULL,
    [ISSUBCONTRACTOR]                                        INT             NOT NULL,
    [ZAKATSERVICETYPE]                                       NVARCHAR (25)   NOT NULL,
    [ISGSTCOMPOSITIONSCHEMEENABLED]                          INT             NOT NULL,
    [BANKTRANSACTIONTYPE]                                    NVARCHAR (10)   NOT NULL,
    [BANKORDEROFPAYMENT]                                     NVARCHAR (2)    NOT NULL,
    [FOREIGNRESIDENT]                                        INT             NOT NULL,
    [INVENTORYPROFILE]                                       NVARCHAR (10)   NOT NULL,
    [INVENTORYPROFILETYPE]                                   INT             NOT NULL,
    [SEPARATEDIVISIONID]                                     NVARCHAR (20)   NOT NULL,
    [STRUCTUREDEPARTMENT]                                    NVARCHAR (30)   NOT NULL,
    [TAXOPERATIONCODE]                                       NVARCHAR (10)   NOT NULL,
    [TAXPARTNERKIND]                                         INT             NOT NULL,
    [TAXAGENT]                                               INT             NOT NULL,
    [PARTITION]                                              NVARCHAR (20)   NOT NULL,
    [DATAAREAID]                                             NVARCHAR (4)    NOT NULL,
    [SYNCSTARTDATETIME]                                      DATETIME        NOT NULL,
    CONSTRAINT [PK_VendVendorV2Staging] PRIMARY KEY CLUSTERED ([VENDORACCOUNTNUMBER] ASC, [EXECUTIONID] ASC, [DATAAREAID] ASC, [PARTITION] ASC)
);


GO
PRINT N'Creating [dbo].[zDEL_PATCHPOSTATUS_RLC]...';


GO
CREATE TABLE [dbo].[zDEL_PATCHPOSTATUS_RLC] (
    [PO Number] VARCHAR (50) NULL,
    [Status]    VARCHAR (50) NULL
);


GO
PRINT N'Creating [dbo].[zRLC_AdaptiveBudgetStage]...';


GO
CREATE TABLE [dbo].[zRLC_AdaptiveBudgetStage] (
    [InternalID]            CHAR (10)     NOT NULL,
    [LevelName]             VARCHAR (100) NOT NULL,
    [Entity]                VARCHAR (100) NOT NULL,
    [GeographyName]         VARCHAR (100) NULL,
    [InternalPL]            VARCHAR (100) NULL,
    [ManagementLevel]       VARCHAR (100) NULL,
    [ControllableCorporate] VARCHAR (100) NULL,
    [AccountName]           VARCHAR (500) NOT NULL,
    [Project]               VARCHAR (50)  NULL,
    [Task]                  VARCHAR (50)  NULL,
    [Supplier]              VARCHAR (100) NULL,
    [CaseName]              VARCHAR (100) NULL,
    [Prioritization]        VARCHAR (100) NULL,
    [Description]           VARCHAR (500) NULL,
    [NOTES]                 VARCHAR (MAX) NULL,
    [Instructions]          VARCHAR (50)  NULL,
    [Jan2021]               FLOAT (53)    NULL,
    [Feb2021]               FLOAT (53)    NULL,
    [Mar2021]               FLOAT (53)    NULL,
    [Q12021]                FLOAT (53)    NULL,
    [Apr2021]               FLOAT (53)    NULL,
    [May2021]               FLOAT (53)    NULL,
    [Jun2021]               FLOAT (53)    NULL,
    [Q22021]                FLOAT (53)    NULL,
    [Jul2021]               FLOAT (53)    NULL,
    [Aug2021]               FLOAT (53)    NULL,
    [Sep2021]               FLOAT (53)    NULL,
    [Q32021]                FLOAT (53)    NULL,
    [Oct2021]               FLOAT (53)    NULL,
    [Nov2021]               FLOAT (53)    NULL,
    [Dec2021]               FLOAT (53)    NULL,
    [Q42021]                FLOAT (53)    NULL,
    [FY2021]                FLOAT (53)    NULL
);


GO
PRINT N'Creating [dbo].[zzRLCBud]...';


GO
CREATE TABLE [dbo].[zzRLCBud] (
    [InternalID]            CHAR (10)     NOT NULL,
    [LevelName]             VARCHAR (100) NOT NULL,
    [Entity]                VARCHAR (100) NOT NULL,
    [GeographyName]         VARCHAR (100) NULL,
    [InternalPL]            VARCHAR (100) NULL,
    [ManagementLevel]       VARCHAR (100) NULL,
    [ControllableCorporate] VARCHAR (100) NULL,
    [AccountName]           VARCHAR (500) NOT NULL,
    [Project]               VARCHAR (50)  NULL,
    [Task]                  VARCHAR (50)  NULL,
    [Supplier]              VARCHAR (100) NULL,
    [CaseName]              VARCHAR (100) NULL,
    [Prioritization]        VARCHAR (100) NULL,
    [Description]           VARCHAR (500) NULL,
    [NOTES]                 VARCHAR (MAX) NULL,
    [Instructions]          VARCHAR (50)  NULL,
    [Jan2021]               FLOAT (53)    NULL,
    [Feb2021]               FLOAT (53)    NULL,
    [Mar2021]               FLOAT (53)    NULL,
    [Q12021]                FLOAT (53)    NULL,
    [Apr2021]               FLOAT (53)    NULL,
    [May2021]               FLOAT (53)    NULL,
    [Jun2021]               FLOAT (53)    NULL,
    [Q22021]                FLOAT (53)    NULL,
    [Jul2021]               FLOAT (53)    NULL,
    [Aug2021]               FLOAT (53)    NULL,
    [Sep2021]               FLOAT (53)    NULL,
    [Q32021]                FLOAT (53)    NULL,
    [Oct2021]               FLOAT (53)    NULL,
    [Nov2021]               FLOAT (53)    NULL,
    [Dec2021]               FLOAT (53)    NULL,
    [Q42021]                FLOAT (53)    NULL,
    [FY2021]                FLOAT (53)    NULL
);


GO
PRINT N'Creating [mdr].[DF__BITableIn__Table__0EA330E9]...';


GO
ALTER TABLE [mdr].[BITableInfo]
    ADD CONSTRAINT [DF__BITableIn__Table__0EA330E9] DEFAULT ('RAW') FOR [TableCategory];


GO
PRINT N'Creating [mdr].[DF_BITableInfo_IncludeExclude]...';


GO
ALTER TABLE [mdr].[BITableInfo]
    ADD CONSTRAINT [DF_BITableInfo_IncludeExclude] DEFAULT ('I') FOR [IncludeExclude];


GO
PRINT N'Creating [mdr].[DF_RSMLogit_RunTS]...';


GO
ALTER TABLE [mdr].[RSMLogit]
    ADD CONSTRAINT [DF_RSMLogit_RunTS] DEFAULT (getdate()) FOR [RunTS];


GO
PRINT N'Creating unnamed constraint on [research].[Compounds]...';


GO
ALTER TABLE [research].[Compounds]
    ADD DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [research].[GeneNames]...';


GO
ALTER TABLE [research].[GeneNames]
    ADD DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [research].[CompoundNames]...';


GO
ALTER TABLE [research].[CompoundNames]
    ADD DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [research].[CompoundGenes]...';


GO
ALTER TABLE [research].[CompoundGenes]
    ADD DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [research].[MTIDGenes]...';


GO
ALTER TABLE [research].[MTIDGenes]
    ADD DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [research].[GeneSymbols]...';


GO
ALTER TABLE [research].[GeneSymbols]
    ADD DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating [dbo].[INSERTED_DATE]...';


GO
ALTER TABLE [dbo].[ActiveEmployees]
    ADD CONSTRAINT [INSERTED_DATE] DEFAULT (getdate()) FOR [Inserted];


GO
PRINT N'Creating [dbo].[CS_BuildingAccessActivity_DateInserted]...';


GO
ALTER TABLE [dbo].[BuildingAccessActivity]
    ADD CONSTRAINT [CS_BuildingAccessActivity_DateInserted] DEFAULT (getdate()) FOR [DateInserted];


GO
PRINT N'Creating [dbo].[CS_BuildingAccessReportHist_DateInserted]...';


GO
ALTER TABLE [dbo].[BuildingAccessReportHist]
    ADD CONSTRAINT [CS_BuildingAccessReportHist_DateInserted] DEFAULT (getdate()) FOR [DateInserted];


GO
PRINT N'Creating [dbo].[CS_BuildingAccessUserDateModified]...';


GO
ALTER TABLE [dbo].[BuildingAccessUser]
    ADD CONSTRAINT [CS_BuildingAccessUserDateModified] DEFAULT (getdate()) FOR [DateModified];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimJobLevelCode]...';


GO
ALTER TABLE [dbo].[DimJobLevelCode]
    ADD DEFAULT ((0.00)) FOR [Expenses];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimJobLevelCode]...';


GO
ALTER TABLE [dbo].[DimJobLevelCode]
    ADD DEFAULT ((0.00)) FOR [Agreements];


GO
PRINT N'Creating [dbo].[CS_DIMUser_DateInserted]...';


GO
ALTER TABLE [dbo].[DimUser]
    ADD CONSTRAINT [CS_DIMUser_DateInserted] DEFAULT (getdate()) FOR [DateInserted];


GO
PRINT N'Creating unnamed constraint on [dbo].[mdm_compound_genes]...';


GO
ALTER TABLE [dbo].[mdm_compound_genes]
    ADD DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[mdm_compound_names]...';


GO
ALTER TABLE [dbo].[mdm_compound_names]
    ADD DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[mdm_compounds]...';


GO
ALTER TABLE [dbo].[mdm_compounds]
    ADD DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[mdm_gene_names]...';


GO
ALTER TABLE [dbo].[mdm_gene_names]
    ADD DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[mdm_gene_symbols]...';


GO
ALTER TABLE [dbo].[mdm_gene_symbols]
    ADD DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[mdm_GeneTerms]...';


GO
ALTER TABLE [dbo].[mdm_GeneTerms]
    ADD DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating [dbo].[CS_PubsApprovalTasks_DateCreated]...';


GO
ALTER TABLE [dbo].[PubsApprovalTasks]
    ADD CONSTRAINT [CS_PubsApprovalTasks_DateCreated] DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating [dbo].[CS_PubsFranchise_DateCreated]...';


GO
ALTER TABLE [dbo].[PubsFranchise]
    ADD CONSTRAINT [CS_PubsFranchise_DateCreated] DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating [dbo].[CS_PubsFunctionalArea_DateCreated]...';


GO
ALTER TABLE [dbo].[PubsFunctionalArea]
    ADD CONSTRAINT [CS_PubsFunctionalArea_DateCreated] DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating [dbo].[CS_PubsJournals_DateCreated]...';


GO
ALTER TABLE [dbo].[PubsJournals]
    ADD CONSTRAINT [CS_PubsJournals_DateCreated] DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating [dbo].[CS_PubsLegacyCompoundsTemp_DateCreated]...';


GO
ALTER TABLE [dbo].[PubsLegacyCompoundsTemp]
    ADD CONSTRAINT [CS_PubsLegacyCompoundsTemp_DateCreated] DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating [dbo].[CS_PubsLegacyLookup_DateCreated]...';


GO
ALTER TABLE [dbo].[PubsLegacyLookup]
    ADD CONSTRAINT [CS_PubsLegacyLookup_DateCreated] DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating [dbo].[CS_PubsLegacyUserTemp_DateCreated]...';


GO
ALTER TABLE [dbo].[PubsLegacyUserTemp]
    ADD CONSTRAINT [CS_PubsLegacyUserTemp_DateCreated] DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating [dbo].[CS_PubsMeeting_DateCreated]...';


GO
ALTER TABLE [dbo].[PubsMeeting]
    ADD CONSTRAINT [CS_PubsMeeting_DateCreated] DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[PubsRecord]...';


GO
ALTER TABLE [dbo].[PubsRecord]
    ADD DEFAULT ((2)) FOR [Version];


GO
PRINT N'Creating [dbo].[CS_PubsRecord_DateCreated]...';


GO
ALTER TABLE [dbo].[PubsRecord]
    ADD CONSTRAINT [CS_PubsRecord_DateCreated] DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating [dbo].[CS_PubsRecordCompound_DateCreated]...';


GO
ALTER TABLE [dbo].[PubsRecordCompound]
    ADD CONSTRAINT [CS_PubsRecordCompound_DateCreated] DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating [dbo].[CS_PubsRecordFranchise_DateCreated]...';


GO
ALTER TABLE [dbo].[PubsRecordFranchise]
    ADD CONSTRAINT [CS_PubsRecordFranchise_DateCreated] DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating [dbo].[CS_PubsRecordFunctionalArea_DateCreated]...';


GO
ALTER TABLE [dbo].[PubsRecordFunctionalArea]
    ADD CONSTRAINT [CS_PubsRecordFunctionalArea_DateCreated] DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating [dbo].[CS_PubsRecordIonisAuthor_DateCreated]...';


GO
ALTER TABLE [dbo].[PubsRecordIonisAuthor]
    ADD CONSTRAINT [CS_PubsRecordIonisAuthor_DateCreated] DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating [dbo].[CS_PubsRecordSubmissinContentDataType_DateCreated]...';


GO
ALTER TABLE [dbo].[PubsRecordSubmissinContentDataType]
    ADD CONSTRAINT [CS_PubsRecordSubmissinContentDataType_DateCreated] DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating [dbo].[CS_PubsRecordTarget_DateCreated]...';


GO
ALTER TABLE [dbo].[PubsRecordTarget]
    ADD CONSTRAINT [CS_PubsRecordTarget_DateCreated] DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating [dbo].[CS_PubsSubmissionContent_DateCreated]...';


GO
ALTER TABLE [dbo].[PubsSubmissionContent]
    ADD CONSTRAINT [CS_PubsSubmissionContent_DateCreated] DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating [dbo].[CS_PubsSubmissionContentDataType_DateCreated]...';


GO
ALTER TABLE [dbo].[PubsSubmissionContentDataType]
    ADD CONSTRAINT [CS_PubsSubmissionContentDataType_DateCreated] DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating [dbo].[CS_PubsUser_DateCreated]...';


GO
ALTER TABLE [dbo].[PubsUser]
    ADD CONSTRAINT [CS_PubsUser_DateCreated] DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating [dbo].[DF_tblLocalMeritCalc_DateCreated]...';


GO
ALTER TABLE [dbo].[tblLocalMeritCalc]
    ADD CONSTRAINT [DF_tblLocalMeritCalc_DateCreated] DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating [clinical].[FK_StudyClinicalSiteCROs_ClinicalOrganization]...';


GO
ALTER TABLE [clinical].[StudyClinicalSiteCROs] WITH NOCHECK
    ADD CONSTRAINT [FK_StudyClinicalSiteCROs_ClinicalOrganization] FOREIGN KEY ([ClinicalOrganizationID]) REFERENCES [clinical].[ClinicalOrganization] ([ClinicalOrganizationID]);


GO
PRINT N'Creating [clinical].[FK_StudyClinicalSiteCROs_ClinicalStudySites]...';


GO
ALTER TABLE [clinical].[StudyClinicalSiteCROs] WITH NOCHECK
    ADD CONSTRAINT [FK_StudyClinicalSiteCROs_ClinicalStudySites] FOREIGN KEY ([ClinicalStudySitesID]) REFERENCES [clinical].[ClinicalStudySites] ([ClinicalStudySitesID]);


GO
PRINT N'Creating [clinical].[FK_StudyPerformanceMetrics_ClinicalStudy]...';


GO
ALTER TABLE [clinical].[StudyPerformanceMetrics] WITH NOCHECK
    ADD CONSTRAINT [FK_StudyPerformanceMetrics_ClinicalStudy] FOREIGN KEY ([ClinicalStudyID]) REFERENCES [clinical].[ClinicalStudy] ([ClinicalStudyID]);


GO
PRINT N'Creating [clinical].[FK_SiteSubjectRecruitment_ScenarioStudySites]...';


GO
ALTER TABLE [clinical].[SiteSubjectRecruitment] WITH NOCHECK
    ADD CONSTRAINT [FK_SiteSubjectRecruitment_ScenarioStudySites] FOREIGN KEY ([ScenarioStudySitesID]) REFERENCES [clinical].[ScenarioStudySites] ([ScenarioStudySitesID]);


GO
PRINT N'Creating [clinical].[FK_ScenarioStudySites_ClinicalStudySites]...';


GO
ALTER TABLE [clinical].[ScenarioStudySites] WITH NOCHECK
    ADD CONSTRAINT [FK_ScenarioStudySites_ClinicalStudySites] FOREIGN KEY ([ClinicalStudySitesID]) REFERENCES [clinical].[ClinicalStudySites] ([ClinicalStudySitesID]);


GO
PRINT N'Creating [clinical].[FK_ScenarioStudySites_StudyRecruitment]...';


GO
ALTER TABLE [clinical].[ScenarioStudySites] WITH NOCHECK
    ADD CONSTRAINT [FK_ScenarioStudySites_StudyRecruitment] FOREIGN KEY ([StudyRecruitmentID]) REFERENCES [clinical].[StudyRecruitment] ([StudyRecruitmentID]);


GO
PRINT N'Creating [clinical].[FK_StudySiteActivation_ClinicalStudy]...';


GO
ALTER TABLE [clinical].[StudySiteActivation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudySiteActivation_ClinicalStudy] FOREIGN KEY ([ClinicalStudyID]) REFERENCES [clinical].[ClinicalStudy] ([ClinicalStudyID]);


GO
PRINT N'Creating [clinical].[FK_StudySitePerformance_ClinicalStudySites]...';


GO
ALTER TABLE [clinical].[StudySitePerformance] WITH NOCHECK
    ADD CONSTRAINT [FK_StudySitePerformance_ClinicalStudySites] FOREIGN KEY ([ClinicalStudySitesID]) REFERENCES [clinical].[ClinicalStudySites] ([ClinicalStudySitesID]);


GO
PRINT N'Creating [clinical].[FK_ClinicalStudy_ClinicalPrograms]...';


GO
ALTER TABLE [clinical].[ClinicalStudy] WITH NOCHECK
    ADD CONSTRAINT [FK_ClinicalStudy_ClinicalPrograms] FOREIGN KEY ([ClinicalProgramsID]) REFERENCES [clinical].[ClinicalPrograms] ([ClinicalProgramsID]);


GO
PRINT N'Creating [clinical].[FK_PersonSiteRoles_ClinicalSitePerson]...';


GO
ALTER TABLE [clinical].[PersonSiteRoles] WITH NOCHECK
    ADD CONSTRAINT [FK_PersonSiteRoles_ClinicalSitePerson] FOREIGN KEY ([ClinicalSitePersonID]) REFERENCES [clinical].[ClinicalSitePerson] ([ClinicalSitePersonID]);


GO
PRINT N'Creating [clinical].[FK_PersonSiteRoles_ClinicalStudySites]...';


GO
ALTER TABLE [clinical].[PersonSiteRoles] WITH NOCHECK
    ADD CONSTRAINT [FK_PersonSiteRoles_ClinicalStudySites] FOREIGN KEY ([ClinicalStudySitesID]) REFERENCES [clinical].[ClinicalStudySites] ([ClinicalStudySitesID]);


GO
PRINT N'Creating [clinical].[FK_ClinicalStudySites_ClinicalSite]...';


GO
ALTER TABLE [clinical].[ClinicalStudySites] WITH NOCHECK
    ADD CONSTRAINT [FK_ClinicalStudySites_ClinicalSite] FOREIGN KEY ([ClinicalSiteID]) REFERENCES [clinical].[ClinicalSite] ([ClinicalSiteID]);


GO
PRINT N'Creating [clinical].[FK_ClinicalStudySites_ClinicalStudy]...';


GO
ALTER TABLE [clinical].[ClinicalStudySites] WITH NOCHECK
    ADD CONSTRAINT [FK_ClinicalStudySites_ClinicalStudy] FOREIGN KEY ([ClinicalStudyID]) REFERENCES [clinical].[ClinicalStudy] ([ClinicalStudyID]);


GO
PRINT N'Creating [clinical].[FK_ClinicalSitePerson_Person]...';


GO
ALTER TABLE [clinical].[ClinicalSitePerson] WITH NOCHECK
    ADD CONSTRAINT [FK_ClinicalSitePerson_Person] FOREIGN KEY ([ClinicalSitePersonID]) REFERENCES [shared].[Person] ([PersonID]);


GO
PRINT N'Creating [clinical].[FK_ClinicalStudyCohorts_ClinicalStudy]...';


GO
ALTER TABLE [clinical].[ClinicalStudyCohorts] WITH NOCHECK
    ADD CONSTRAINT [FK_ClinicalStudyCohorts_ClinicalStudy] FOREIGN KEY ([ClinicalStudyID]) REFERENCES [clinical].[ClinicalStudy] ([ClinicalStudyID]);


GO
PRINT N'Creating [clinical].[FK_StudySiteRecruitment_StudyRecruitment]...';


GO
ALTER TABLE [clinical].[StudySiteRecruitment] WITH NOCHECK
    ADD CONSTRAINT [FK_StudySiteRecruitment_StudyRecruitment] FOREIGN KEY ([StudyRecruitmentID]) REFERENCES [clinical].[StudyRecruitment] ([StudyRecruitmentID]);


GO
PRINT N'Creating [clinical].[FK_StudyRecruitment_ClinicalStudy]...';


GO
ALTER TABLE [clinical].[StudyRecruitment] WITH NOCHECK
    ADD CONSTRAINT [FK_StudyRecruitment_ClinicalStudy] FOREIGN KEY ([ClinicalStudyID]) REFERENCES [clinical].[ClinicalStudy] ([ClinicalStudyID]);


GO
PRINT N'Creating [clinical].[FK_StudyAnnotations_StudyRecruitment]...';


GO
ALTER TABLE [clinical].[StudyAnnotations] WITH NOCHECK
    ADD CONSTRAINT [FK_StudyAnnotations_StudyRecruitment] FOREIGN KEY ([StudyRecruitmentID]) REFERENCES [clinical].[StudyRecruitment] ([StudyRecruitmentID]);


GO
PRINT N'Creating [clinical].[FK_ScenarioParameters_StudyRecruitment]...';


GO
ALTER TABLE [clinical].[ScenarioParameters] WITH NOCHECK
    ADD CONSTRAINT [FK_ScenarioParameters_StudyRecruitment] FOREIGN KEY ([StudyRecruitmentID]) REFERENCES [clinical].[StudyRecruitment] ([StudyRecruitmentID]);


GO
PRINT N'Creating [clinical].[FK_RecruitmentScenarios_ScenarioParameters]...';


GO
ALTER TABLE [clinical].[RecruitmentScenarios] WITH NOCHECK
    ADD CONSTRAINT [FK_RecruitmentScenarios_ScenarioParameters] FOREIGN KEY ([ScenarioParametersID]) REFERENCES [clinical].[ScenarioParameters] ([ScenarioParametersID]);


GO
PRINT N'Creating [clinical].[FK_RecruitmentScenarios_StudyAnnotations]...';


GO
ALTER TABLE [clinical].[RecruitmentScenarios] WITH NOCHECK
    ADD CONSTRAINT [FK_RecruitmentScenarios_StudyAnnotations] FOREIGN KEY ([StudyAnnotationsID]) REFERENCES [clinical].[StudyAnnotations] ([StudyAnnotationsID]);


GO
PRINT N'Creating [clinical].[FK_IVRSData_ClinicalStudySites]...';


GO
ALTER TABLE [clinical].[IVRSData] WITH NOCHECK
    ADD CONSTRAINT [FK_IVRSData_ClinicalStudySites] FOREIGN KEY ([ClinicalStudySitesID]) REFERENCES [clinical].[ClinicalStudySites] ([ClinicalStudySitesID]);


GO
PRINT N'Creating [clinical].[FK_CTMSData_ClinicalStudyCohorts]...';


GO
ALTER TABLE [clinical].[CTMSData] WITH NOCHECK
    ADD CONSTRAINT [FK_CTMSData_ClinicalStudyCohorts] FOREIGN KEY ([ClinicalStudyCohortsID]) REFERENCES [clinical].[ClinicalStudyCohorts] ([ClinicalStudyCohortsID]);


GO
PRINT N'Creating [clinical].[FK_CTMSData_ClinicalStudySites]...';


GO
ALTER TABLE [clinical].[CTMSData] WITH NOCHECK
    ADD CONSTRAINT [FK_CTMSData_ClinicalStudySites] FOREIGN KEY ([ClinicalStudySitesID]) REFERENCES [clinical].[ClinicalStudySites] ([ClinicalStudySitesID]);


GO
PRINT N'Creating [clinical].[FK_ClinicalStudyMilestones_ClinicalStudy]...';


GO
ALTER TABLE [clinical].[ClinicalStudyMilestones] WITH NOCHECK
    ADD CONSTRAINT [FK_ClinicalStudyMilestones_ClinicalStudy] FOREIGN KEY ([ClinicalStudyID]) REFERENCES [clinical].[ClinicalStudy] ([ClinicalStudyID]);


GO
PRINT N'Creating [research].[FK_CompoundNames_Compounds]...';


GO
ALTER TABLE [research].[CompoundNames] WITH NOCHECK
    ADD CONSTRAINT [FK_CompoundNames_Compounds] FOREIGN KEY ([CompoundNumber]) REFERENCES [research].[Compounds] ([CompoundNumber]);


GO
PRINT N'Creating [shared].[FK_LocationInfo_ClinicalSite]...';


GO
ALTER TABLE [shared].[LocationInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationInfo_ClinicalSite] FOREIGN KEY ([ClinicalSiteID]) REFERENCES [clinical].[ClinicalSite] ([ClinicalSiteID]);


GO
PRINT N'Creating [shared].[FK_LocationInfo_Organization]...';


GO
ALTER TABLE [shared].[LocationInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationInfo_Organization] FOREIGN KEY ([OrganizationID]) REFERENCES [shared].[Organization] ([OrganizationID]);


GO
PRINT N'Creating [shared].[FK_LocationInfo_Person]...';


GO
ALTER TABLE [shared].[LocationInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationInfo_Person] FOREIGN KEY ([PersonID]) REFERENCES [shared].[Person] ([PersonID]);


GO
PRINT N'Creating [shared].[FK_PhoneNumber_LocationInfo]...';


GO
ALTER TABLE [shared].[PhoneNumber] WITH NOCHECK
    ADD CONSTRAINT [FK_PhoneNumber_LocationInfo] FOREIGN KEY ([LocationInfoID]) REFERENCES [shared].[LocationInfo] ([LocationInfoID]);


GO
PRINT N'Creating [shared].[FK_EmailAddress_LocationInfo]...';


GO
ALTER TABLE [shared].[EmailAddress] WITH NOCHECK
    ADD CONSTRAINT [FK_EmailAddress_LocationInfo] FOREIGN KEY ([LocationInfoID]) REFERENCES [shared].[LocationInfo] ([LocationInfoID]);


GO
PRINT N'Creating [shared].[FK_Address_LocationInfo]...';


GO
ALTER TABLE [shared].[Address] WITH NOCHECK
    ADD CONSTRAINT [FK_Address_LocationInfo] FOREIGN KEY ([LocationInfoID]) REFERENCES [shared].[LocationInfo] ([LocationInfoID]);


GO
PRINT N'Creating [shared].[FK_Organization_ClinicalOrganization]...';


GO
ALTER TABLE [shared].[Organization] WITH NOCHECK
    ADD CONSTRAINT [FK_Organization_ClinicalOrganization] FOREIGN KEY ([ClinicalOrganizationID]) REFERENCES [clinical].[ClinicalOrganization] ([ClinicalOrganizationID]);


GO
PRINT N'Creating [dbo].[FK_BuildingAccessActivit_ReportId]...';


GO
ALTER TABLE [dbo].[BuildingAccessActivity] WITH NOCHECK
    ADD CONSTRAINT [FK_BuildingAccessActivit_ReportId] FOREIGN KEY ([BuildingAccessReportId]) REFERENCES [dbo].[BuildingAccessReportHist] ([ReportId]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_DimScenario_DimScenarioType]...';


GO
ALTER TABLE [dbo].[DimScenario] WITH NOCHECK
    ADD CONSTRAINT [FK_DimScenario_DimScenarioType] FOREIGN KEY ([ScenarioTypeKey]) REFERENCES [dbo].[DimScenarioType] ([ScenarioTypeKey]);


GO
PRINT N'Creating [dbo].[FK_EmployeeSnapshot_DimUser_UserKey]...';


GO
ALTER TABLE [dbo].[Employee_Snapshot] WITH NOCHECK
    ADD CONSTRAINT [FK_EmployeeSnapshot_DimUser_UserKey] FOREIGN KEY ([UserKey]) REFERENCES [dbo].[DimUser] ([UserKey]);


GO
PRINT N'Creating [dbo].[FK_FactTransaction_v2_DimAccount]...';


GO
ALTER TABLE [dbo].[FactTransaction_v2] WITH NOCHECK
    ADD CONSTRAINT [FK_FactTransaction_v2_DimAccount] FOREIGN KEY ([AccountKey]) REFERENCES [dbo].[DimAccount] ([AccountKey]);


GO
PRINT N'Creating [dbo].[FK_FactTransaction_v2_DimDepartment]...';


GO
ALTER TABLE [dbo].[FactTransaction_v2] WITH NOCHECK
    ADD CONSTRAINT [FK_FactTransaction_v2_DimDepartment] FOREIGN KEY ([DepartmentKey]) REFERENCES [dbo].[DimDepartment] ([DepartmentKey]);


GO
PRINT N'Creating [dbo].[FK_FactTransaction_v2_DimEntity]...';


GO
ALTER TABLE [dbo].[FactTransaction_v2] WITH NOCHECK
    ADD CONSTRAINT [FK_FactTransaction_v2_DimEntity] FOREIGN KEY ([EntityKey]) REFERENCES [dbo].[DimEntity] ([EntityKey]);


GO
PRINT N'Creating [dbo].[FK_FactTransaction_v2_DimFinancialCalendar]...';


GO
ALTER TABLE [dbo].[FactTransaction_v2] WITH NOCHECK
    ADD CONSTRAINT [FK_FactTransaction_v2_DimFinancialCalendar] FOREIGN KEY ([FiscalPeriodKey]) REFERENCES [dbo].[DimFinancialCalendar] ([FiscalPeriodKey]);


GO
PRINT N'Creating [dbo].[FK_FactTransaction_v2_DimProject]...';


GO
ALTER TABLE [dbo].[FactTransaction_v2] WITH NOCHECK
    ADD CONSTRAINT [FK_FactTransaction_v2_DimProject] FOREIGN KEY ([ProjectKey]) REFERENCES [dbo].[DimProject] ([ProjectKey]);


GO
PRINT N'Creating [dbo].[FK_FactTransaction_v2_DimScenario]...';


GO
ALTER TABLE [dbo].[FactTransaction_v2] WITH NOCHECK
    ADD CONSTRAINT [FK_FactTransaction_v2_DimScenario] FOREIGN KEY ([ScenarioKey]) REFERENCES [dbo].[DimScenario] ([ScenarioKey]);


GO
PRINT N'Creating [dbo].[FK_FactTransaction_v2_DimTask]...';


GO
ALTER TABLE [dbo].[FactTransaction_v2] WITH NOCHECK
    ADD CONSTRAINT [FK_FactTransaction_v2_DimTask] FOREIGN KEY ([TaskKey]) REFERENCES [dbo].[DimTask] ([TaskKey]);


GO
PRINT N'Creating unnamed constraint on [dbo].[mdm_compound_genes]...';


GO
ALTER TABLE [dbo].[mdm_compound_genes] WITH NOCHECK
    ADD FOREIGN KEY ([compound_num]) REFERENCES [dbo].[mdm_compounds] ([compound_num]);


GO
PRINT N'Creating [dbo].[FK_PubsRecordCompound_PubsRecord]...';


GO
ALTER TABLE [dbo].[PubsRecordCompound] WITH NOCHECK
    ADD CONSTRAINT [FK_PubsRecordCompound_PubsRecord] FOREIGN KEY ([PubsKey]) REFERENCES [dbo].[PubsRecord] ([PubsKey]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_PubsRecordFranchise_PubsFranchise]...';


GO
ALTER TABLE [dbo].[PubsRecordFranchise] WITH NOCHECK
    ADD CONSTRAINT [FK_PubsRecordFranchise_PubsFranchise] FOREIGN KEY ([PubsFranchiseID]) REFERENCES [dbo].[PubsFranchise] ([PubsFranchiseID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_PubsRecordFranchise_PubsRecord]...';


GO
ALTER TABLE [dbo].[PubsRecordFranchise] WITH NOCHECK
    ADD CONSTRAINT [FK_PubsRecordFranchise_PubsRecord] FOREIGN KEY ([PubsKey]) REFERENCES [dbo].[PubsRecord] ([PubsKey]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_PubsRecordFunctionalArea_PubsFunctionalArea]...';


GO
ALTER TABLE [dbo].[PubsRecordFunctionalArea] WITH NOCHECK
    ADD CONSTRAINT [FK_PubsRecordFunctionalArea_PubsFunctionalArea] FOREIGN KEY ([PubsFunctionalAreaID]) REFERENCES [dbo].[PubsFunctionalArea] ([PubsFunctionalAreaID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_PubsRecordFunctionalArea_PubsRecord]...';


GO
ALTER TABLE [dbo].[PubsRecordFunctionalArea] WITH NOCHECK
    ADD CONSTRAINT [FK_PubsRecordFunctionalArea_PubsRecord] FOREIGN KEY ([PubsKey]) REFERENCES [dbo].[PubsRecord] ([PubsKey]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_PubsRecordIonisAuthor_IonisAuthor]...';


GO
ALTER TABLE [dbo].[PubsRecordIonisAuthor] WITH NOCHECK
    ADD CONSTRAINT [FK_PubsRecordIonisAuthor_IonisAuthor] FOREIGN KEY ([IonisAuthorKey]) REFERENCES [dbo].[DimUser] ([UserKey]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_PubsRecordIonisAuthor_PubsRecord]...';


GO
ALTER TABLE [dbo].[PubsRecordIonisAuthor] WITH NOCHECK
    ADD CONSTRAINT [FK_PubsRecordIonisAuthor_PubsRecord] FOREIGN KEY ([PubsKey]) REFERENCES [dbo].[PubsRecord] ([PubsKey]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_PubsRecordSubmissinContentDataType_PubsRecord]...';


GO
ALTER TABLE [dbo].[PubsRecordSubmissinContentDataType] WITH NOCHECK
    ADD CONSTRAINT [FK_PubsRecordSubmissinContentDataType_PubsRecord] FOREIGN KEY ([PubsKey]) REFERENCES [dbo].[PubsRecord] ([PubsKey]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_PubsRecordSubmissinContentDataType_PubsSubmissionContentDataType]...';


GO
ALTER TABLE [dbo].[PubsRecordSubmissinContentDataType] WITH NOCHECK
    ADD CONSTRAINT [FK_PubsRecordSubmissinContentDataType_PubsSubmissionContentDataType] FOREIGN KEY ([PubsSubmissionContentDataTypeID]) REFERENCES [dbo].[PubsSubmissionContentDataType] ([PubsSubmissionContentDataTypeID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_PubsRecordTarget_PubsRecord]...';


GO
ALTER TABLE [dbo].[PubsRecordTarget] WITH NOCHECK
    ADD CONSTRAINT [FK_PubsRecordTarget_PubsRecord] FOREIGN KEY ([PubsKey]) REFERENCES [dbo].[PubsRecord] ([PubsKey]) ON DELETE CASCADE;


GO
PRINT N'Creating [financial_mart].[POSecurity]...';


GO
/*
Purpose: <enter a purpose here...>
*/

CREATE VIEW [financial_mart].[POSecurity] AS

SELECT [ReportsToEMail],
	[EmployeeFullName],
	[Department_Number],
	[SecurityKey]
FROM [dbo].[EmployeeHierarchy]
GO
PRINT N'Creating [pubs].[DimFranchise]...';


GO
CREATE VIEW [pubs].[DimFranchise] AS (

  SELECT m.[PubsKey],m.[PubsFranchiseID],f.[Franchise] FROM
    [dbo].[PubsRecordFranchise] m
  LEFT JOIN 
    [dbo].[PubsFranchise] f 
  ON
    m.[PubsFranchiseID]=f.[PubsFranchiseID]
)
GO
PRINT N'Creating [pubs].[DimCompound]...';


GO
CREATE VIEW [pubs].[DimCompound] AS

SELECT 
	[ID],
	[PubsKey],
	[CompoundNumber]

FROM [dbo].[PubsRecordCompound]
GO
PRINT N'Creating [pubs].[Journals]...';


GO
CREATE VIEW [pubs].[Journals] 
AS
    SELECT [JournalID]
      ,[JournalTitle]
      ,[URLLink]
      ,[URLDescription]
      ,[ISDN]
      ,[AddedBy]
      ,[Abbreviation]
      ,[Created]
      ,[Modified]
      ,[CreatedByUserKey]
      ,[DateCreated]
      ,[DateModified]
  FROM [dbo].[PubsJournals]
GO
PRINT N'Creating [pubs].[PubsMeeting]...';


GO
CREATE VIEW [pubs].[PubsMeeting] 
AS
SELECT [PubsMeetingID]
      ,[MeetingTitle]
      ,[Location]
      ,[StartTime]
      ,[EndTime]
      ,[Description]
      ,[Category]
      ,[AddedBy]
      ,[MeetingLink]
      ,[URLDescription]
      ,[Created]
      ,[Modified]
      ,[CreatedByUserKey]
      ,[DateCreated]
      ,[DateModified]
  FROM [dbo].[PubsMeeting]
GO
PRINT N'Creating [pubs].[DimTarget]...';


GO
CREATE VIEW [pubs].[DimTarget] AS

SELECT 
	[ID],
	[PubsKey],
	[Ensembl_Id],
	[SelectedTerm]
FROM [dbo].[PubsRecordTarget]
GO
PRINT N'Creating [pubs].[DimSubmissinContentDataType]...';


GO
CREATE VIEW [pubs].[DimSubmissinContentDataType] AS (

  SELECT m.[PubsKey],m.[PubsSubmissionContentDataTypeID],f.[Title] FROM
    [dbo].[PubsRecordSubmissinContentDataType] m
  LEFT JOIN 
    [dbo].[PubsSubmissionContentDataType] f 
  ON
    m.[PubsSubmissionContentDataTypeID]=f.[PubsSubmissionContentDataTypeID]
)
GO
PRINT N'Creating [pubs].[DimIonisAuthor]...';


GO
CREATE VIEW [pubs].[DimIonisAuthor] AS (

  SELECT m.[PubsKey],m.[IonisAuthorKey],f.[FullName] as 'Author Name'
  , f.[UserName] as 'Author UserName', f.[CoupaUserID] as 'Author CoupaUserID'
  , f.[EmployeeNumber] as 'Author Employee Number'
  , f.[Email], f.[DepartmentKey], f2.[FullName] as 'Author Manager Name'
  , f2.[UserKey] as ManagerUserKey, d.DepartmentDescription as 'Author Dept. Description'
  , d.DepartmentNumber as 'Author Dept. #'
  , d.DepartmentNumberDescription as 'Author Dept. Number Description'
  FROM  [dbo].[PubsRecordIonisAuthor] m
  LEFT JOIN 
    [dbo].[DimUser] f
  ON
    m.[IonisAuthorKey]=f.[UserKey]
  LEFT JOIN 
	[dbo].[DimUser] f2
  ON f.[ManagerKey]= f2.[UserKey]

  LEFT JOIN 
	[dbo].[DimDepartment] d
  ON d.[DepartmentKey]= f.[DepartmentKey]
)
GO
PRINT N'Creating [pubs].[DimFunctionalArea]...';


GO
CREATE VIEW [pubs].[DimFunctionalArea] AS (

  SELECT m.[PubsKey],m.[PubsFunctionalAreaID],f.[Functional] FROM
    [dbo].[PubsRecordFunctionalArea] m
  LEFT JOIN 
    [dbo].[PubsFunctionalArea] f 
  ON
    m.[PubsFunctionalAreaID]=f.[PubsFunctionalAreaID]
)
GO
PRINT N'Creating [shared_mart].[DimAccount]...';


GO
/*
Purpose: List Account dimensions for data consumption
*/

CREATE VIEW [shared_mart].[DimAccount] AS

SELECT [MainAccountNumber]
      ,[MainAccountDescription]
      ,[MainAccountNumberDescription]
      ,[MainAccountDescriptionNumber]
      ,[MainAccountType]
      ,[MainAccountCategoryDescription]
      ,[level5]
      ,[level5Description]
      ,[level4]
      ,[level4Description]
      ,[level3]
      ,[level3Description]
      ,[Level2]
      ,[Level2Description]
      ,[Level1]
      ,[Level1Description]
      ,[IsGAAP]
      ,[IsControlled]
      ,[IsFTE]
      ,[PARTITION]
      ,[AccountKey]
      ,[IsActive]
FROM [dbo].[DimAccount]
GO
PRINT N'Creating [dbo].[ActiveEmployeeListing]...';


GO
CREATE VIEW [dbo].[ActiveEmployeeListing] 
AS
-- *************** Summary Info ***************
-- Date Created : 8/27/2020
-- Date Modified: 8/27/2020
-- Contact      : John O'Neill
-- Description  : Used by Pubs function user listing. accessed from login 'api_login_restricted'
-- Notes        : Do not modify or delete without checking with Pubs developer team.
-- *************** /Summary Info ***************

SELECT 
  ISNULL(dusr.EmployeeNumber,'') as EmployeeID
 ,ISNULL(dusr.LastName,'') as LastName
 ,ISNULL(dusr.FirstName,'') as FirstName
 ,ISNULL(dusr.FullName,'') as FullName
 ,RTRIM(ISNULL(dusr.LastName,'') + ', ' + ISNULL(dusr.FirstName, dusr.FirstNameFormal) )  as FullNameLastFirst
 ,ISNULL(dusr.WorkPhone,'') as WorkPhone
 ,ISNULL(dusr.Email,'') as Email
 ,ISNULL(dusr.JobTitle,'') as Title
 ,ISNULL(boss.EmployeeNumber,'') as 'ReportsTo.EmployeeID'
 ,ISNULL(boss.Email,'')  as 'ReportsTo.Email'
 ,CASE WHEN boss.UserKey IS NULL THEN '' ELSE boss.FirstName + ' ' + boss.LastName END  as 'ReportsTo.FullName'
 ,ISNULL(dusr.CompanyCode,'') as CompanyCode
 ,ISNULL(d.DepartmentNumber,'') as DepartmentCode
 ,ISNULL(d.DepartmentDescription,'') as Department
 ,ISNULL(dusr.WorkplaceLocation,'') as WorkLocation
 ,ISNULL(dusr.ExemptStatus,'') as ExemptStatus
 ,ISNULL(CONVERT(Varchar,dusr.FTE),'') as FTE
 ,CASE WHEN dusr.Active = 1 THEN 'A' ELSE 'T'END as StatusCode
 ,ISNULL(dusr.UserType,'') as WorkStatus
 ,ISNULL(dusr.StockLevelCode,'') as JobLevel
 
FROM DimUser as dusr
LEFT JOIN dimUser as boss on dusr.ManagerKey = boss.UserKey
LEFT JOIN dimDepartment as d on dusr.DepartmentKey = d.DepartmentKey
WHERE dusr.Active = 1
GO
PRINT N'Creating [dbo].[BLACKLINE_RATES]...';


GO
CREATE VIEW [dbo].[BLACKLINE_RATES]
AS
SELECT CASE RATES.RATETYPENAME WHEN 'Average' THEN CONCAT(LEFT(RATES.FROMCURRENCY,2),'1') ELSE RATES.FROMCURRENCY END AS [ISO Currency Code]
	, RATES.RATE AS [Conversion Rate]
	, FORMAT(EOMONTH(RATES.STARTDATE),'M/d/yyyy') AS [Period End Date]
	, 'M' AS [Conversion Method]
FROM (
SELECT RATETYPENAME
		, FROMCURRENCY
		, TOCURRENCY
		, RATE
		, STARTDATE
		, ENDDATE
	FROM (
	SELECT RATETYPENAME
		, FROMCURRENCY
		, TOCURRENCY
		, RATE
		, STARTDATE
		, ENDDATE
		, DATEPART(YEAR,ENDDATE) AS PeriodYear
		, DATEPART(MONTH,ENDDATE) AS PeriodMonth
		, ROW_NUMBER() OVER(PARTITION BY RATETYPENAME,FROMCURRENCY ORDER BY STARTDATE DESC) AS STARTDATE_ROWNUM		
		, ROW_NUMBER() OVER(PARTITION BY RATETYPENAME,FROMCURRENCY ORDER BY ENDDATE DESC) AS ENDDATE_ROWNUM
		FROM ExchangeRateEntityStaging
		WHERE TOCURRENCY = 'USD'
			AND RATETYPENAME IN ('Default','Average')) AS ONE
	WHERE STARTDATE_ROWNUM = 1
		AND ENDDATE_ROWNUM = 1) AS RATES
UNION ALL
SELECT CASE RATES.RATETYPENAME WHEN 'Average' THEN CONCAT(LEFT(RATES.TOCURRENCY,2),'1') ELSE RATES.TOCURRENCY END AS [ISO Currency Code]
	, RATES.RATE AS [Conversion Rate]
	, FORMAT(P.ENDDATE,'M/d/yyyy') AS [Period End Date]
	,'D' AS [Conversion Method]
FROM (
	SELECT STARTDATE, ENDDATE, [MONTH] + 1 AS FISCALMONTH, FISCALYEAR
	FROM FiscalPeriodStaging
	WHERE TYPE=1
	) AS P
	INNER JOIN (
	SELECT RATETYPENAME
		, FROMCURRENCY
		, TOCURRENCY
		, RATE
		, STARTDATE
		, ENDDATE
		, DATEPART(YEAR,ENDDATE) AS PeriodYear
		, DATEPART(MONTH,ENDDATE) AS PeriodMonth
		, ROW_NUMBER() OVER(PARTITION BY RATETYPENAME,TOCURRENCY ORDER BY ENDDATE DESC) AS ROWNUM
	FROM ExchangeRateEntityStaging
	WHERE FROMCURRENCY = 'USD'
	) AS RATES ON P.ENDDATE >= RATES.STARTDATE AND P.ENDDATE <= RATES.ENDDATE AND ROWNUM = 1
WHERE RATES.ROWNUM = 1
  AND RATES.RATETYPENAME IN ('Default','Average')
  AND DATEPART(YEAR,P.ENDDATE) = DATEPART(YEAR,GETDATE())
  AND (DATEPART(MONTH,P.ENDDATE) = DATEPART(MONTH,GETDATE()) OR DATEPART(MONTH,P.ENDDATE) = DATEPART(MONTH,GETDATE())-1)
GO
PRINT N'Creating [dbo].[FACTCOMMITMENTS]...';


GO


CREATE VIEW [dbo].[FACTCOMMITMENTS] AS
SELECT POH.Entity,
	POH.PO_Number,
	POH.[Version],
	POH.Requisition_ID,
	POH.GMP_PO,
	POH.DepartmentKey,
	POH.Capital_ID,
	POH.Capital_Item,
	POH.RequesterKey,
	POH.Order_Date,
	POH.SupplierKey,
	POH.[Status],
	POL.PO_Line_Number,
	POL.Source_Part_Number,
	POL.Invoiced_Quantity,
	POL.Price,
	POL.Received_Quantity,
	POL.Total,
	POL.Reporting_Total,
	POA.PO_Line_ID, 
	POA.AccountKey AS GLAccountKey,
	POA.DepartmentKey AS GLDepartmentKey,
	POA.ProjectKey AS GLProjectKey,
	POA.TaskKey AS GLTaskKey,
	POA.AllocationPercent, 
	POA.Amount AS GLAmount
FROM POLineAllocation AS POA
	INNER JOIN POLine AS POL ON POA.PO_Line_ID = POL.ID
	INNER JOIN POHeader AS POH ON POL.PO_ID = POH.ID
GO
PRINT N'Creating [dbo].[V_VendorBankExtract]...';


GO
CREATE VIEW V_VendorBankExtract
AS
SELECT V.VENDORORGANIZATIONNAME AS [Legal Name]
	, S.CoupaSupplierID AS [Payee ID]
	, 'Yes' AS [Enable Coupa Pay]
	, V.DEFAULTVENDORPAYMENTMETHODNAME AS [Method]
	, V.PRIMARYEMAILADDRESS AS [Payment Delivery Email]
	, 'UNKNOWN' AS [Bank Account Country]
	, 'UNKNOWN' AS [Bank Account Currency Code]
	, VB.BANKNAME AS [Bank Name]
	, VB.BANKACCOUNTNUMBER AS [Account Number]
	, VB.IBAN AS [IBAN]
	, 'UNKNOWN' AS [Transit Code Type]
	, 'UNKNOWN' AS [Transit Code]
	, VB.SWIFTCODE AS [SWIFT Code]
	, 'UNKNOWN' AS [Account Type]
	, 'UNKNOWN' AS [Bank Address Line 1]
	, 'UNKNOWN' AS [Bank Address Line 2]
	, 'UNKNOWN' AS [City]
	, 'UNKNOWN' AS [State]
	, 'UNKNOWN' AS [Postal Code]
	, 'UNKNOWN' AS [RemitTo Code]
	, 'UNKNOWN' AS [Document Types]
FROM VendVendorBankAccountStaging AS VB
  INNER JOIN VendVendorV2Staging AS V ON VB.VENDORACCOUNTNUMBER = V.VENDORACCOUNTNUMBER AND V.VENDORGROUPID <> 'EMP'
  INNER JOIN DimSupplier AS S ON VB.VENDORACCOUNTNUMBER = S.SupplierID
GO
PRINT N'Creating [dbo].[vAD_A_ActualsSummarySubB]...';


GO


CREATE view [dbo].[vAD_A_ActualsSummarySubB]
as
select A.MainAccountNumber as [Account], 
	ISNULL(D.DepartmentNumber,'NA') + ' - ' + E.EntityID as [Level],
	'' as [Split Label],
	P.ProjectNumber as [Project],
	T.TaskNumber as [Task],
	--ISNULL(S.SubLedgerPartyNumber,'') as [Supplier],
	CASE WHEN ISNULL(S.SubLedgerPartyNumber,'') = '' THEN '' ELSE CONCAT(S.SubLedgerPartyNumber,' - ',SUP.VENDORORGANIZATIONNAME,' - ',SUP.DATAAREAID) END as [Supplier],

--select top 10 VENDORACCOUNTNUMBER, VENDORORGANIZATIONNAME, DATAAREAID
--from VendVendorV2Staging

	CONVERT(varchar(2),FC.MonthNumer) + '-' + CONVERT(char(4),FC.[Year]) as [Period],
	sum(F.AccountingCurrencyAmount) as [PeriodAmount]
from FactTransaction as F
  inner join DimAccount as A on F.AccountKey = A.AccountKey
  inner join DimEntity as E on F.EntityKey = E.EntityKey
  inner join DimProject as P on F.ProjectKey = P.ProjectKey AND E.EntityID = P.DataAreaID
  inner join DimTask as T on F.TaskKey = T.TaskKey AND E.EntityID = T.DataAreaID
  inner join DimFinancialCalendar as FC on F.[FiscalPeriodKey] = FC.[FiscalPeriodKey]
  left outer join (select distinct FactTransactionKey, SubLedgerPartyNumber
		from FactAccountingSourceExplorer
		where ISNULL(SubLedgerPartyNumber,'') <> ''
		) as S on F.RecID = S.FactTransactionKey
  left outer join VendVendorV2Staging as SUP on S.SubLedgerPartyNumber = SUP.VENDORACCOUNTNUMBER
  left outer join DimDepartment as D on F.DepartmentKey = D.DepartmentKey
where F.Scenario = 'Actual'
  and A.MainAccountType in ('Cost','Profit and loss','Revenue')
group by A.MainAccountNumber, 
	ISNULL(D.DepartmentNumber,'NA') + ' - ' + E.EntityID,
	P.ProjectNumber,
	T.TaskNumber,
	S.SubLedgerPartyNumber,
	SUP.VENDORORGANIZATIONNAME,
	SUP.DATAAREAID,
	CONVERT(varchar(2),FC.MonthNumer) + '-' + CONVERT(char(4),FC.[Year])
GO
PRINT N'Creating [dbo].[vAD_B_ActualsTransactions]...';


GO



CREATE VIEW [dbo].[vAD_B_ActualsTransactions]
AS

select ISNULL(D.DepartmentNumber,'NA') + ' - ' + E.EntityID as [Level],
	TRIM(A.MainAccountNumber) as [Account], 
	FORMAT(F.TransactionDate,'yyyy-MM-dd') as [Posting Date],
	F.AccountingCurrencyAmount as [Transaction Amount],
	'D365' as [GL System],
	S.VOUCHER as [Transaction ID],
	CASE WHEN ISNULL(S.SubLedgerPartyNumber,'') = '' THEN '' ELSE CONCAT(ISNULL(S.SubLedgerPartyNumber,''),' - ',SUP.VENDORORGANIZATIONNAME, ' - ', SUP.DATAAREAID) END as [Supplier],
	P.ProjectNumber as [Project],
	T.TaskNumber as [Task],
	PT.PostingTypeDescription as [Transaction Type],
	F.TransactionDescription as [Description1],
	S.SubLedgerDocumentDescription as [Description2]
from FactTransaction as F
  inner join DimAccount as A on F.AccountKey = A.AccountKey
  inner join DimEntity as E on F.EntityKey = E.EntityKey
  inner join DimProject as P on F.ProjectKey = P.ProjectKey AND E.EntityID = P.DataAreaID
  inner join DimTask as T on F.TaskKey = T.TaskKey
  inner join DimFinancialCalendar as FC on F.[FiscalPeriodKey] = FC.[FiscalPeriodKey]
  left outer join (select distinct DestinationCompany, FactTransactionKey, SubLedgerPartyNumber, PostingType, SubLedgerDocumentDescription, VOUCHER
		from FactAccountingSourceExplorer
		where ISNULL(SubLedgerPartyNumber,'') <> ''
		) as S on F.RecID = S.FactTransactionKey and E.EntityID = S.DestinationCompany
  left outer join VendVendorV2Staging as SUP on S.SubLedgerPartyNumber = SUP.VENDORACCOUNTNUMBER
  left outer join PostingTypeCrossReference as PT on S.PostingType = PT.PostingType
  left outer join DimDepartment as D on F.DepartmentKey = D.DepartmentKey
where FC.Year = 2020
  and E.EntityID NOT LIKE 'C%'
  and F.Scenario = 'Actual'
  and A.MainAccountType in ('Cost','Profit and loss','Revenue')
GO
PRINT N'Creating [dbo].[vDimDepartment]...';


GO

CREATE VIEW vDimDepartment AS

select D.DepartmentNumber, D.DepartmentDescription, D.DepartmentNumberDescription, D.DepartmentDescriptionNumber,
  CASE WHEN ISNULL(IU.DepartmentKey,'') = '' THEN 0 ELSE 1 END AS IonisDepartment,
  CASE WHEN ISNULL(AU.DepartmentKey,'') = '' THEN 0 ELSE 1 END AS AkceaDepartment
from DimDepartment AS D
left outer join (
	SELECT DISTINCT DepartmentKey
	FROM DimUser
	WHERE CompanyCode = 'IONS') AS IU on D.DepartmentKey = IU.DepartmentKey
left outer join (
	SELECT DISTINCT DepartmentKey
	FROM DimUser
	WHERE CompanyCode LIKE 'AK%') AS AU on D.DepartmentKey = AU.DepartmentKey
GO
PRINT N'Creating [dbo].[vDimUser]...';


GO
CREATE VIEW vDimUser AS

select D.DepartmentNumber, D.DepartmentDescription, D.DepartmentNumberDescription, D.DepartmentDescriptionNumber,
  CASE WHEN ISNULL(IU.DepartmentKey,'') = '' THEN 0 ELSE 1 END AS IonisDepartment,
  CASE WHEN ISNULL(AU.DepartmentKey,'') = '' THEN 0 ELSE 1 END AS AkceaDepartment
from DimDepartment AS D
left outer join (
	SELECT DISTINCT DepartmentKey
	FROM DimUser
	WHERE CompanyCode = 'IONS') AS IU on D.DepartmentKey = IU.DepartmentKey
left outer join (
	SELECT DISTINCT DepartmentKey
	FROM DimUser
	WHERE CompanyCode LIKE 'AK%') AS AU on D.DepartmentKey = AU.DepartmentKey
GO
PRINT N'Creating [dbo].[vDimUserInfo]...';


GO
CREATE VIEW [dbo].[vDimUserInfo] 
AS
-- *************** Summary Info ***************
-- Date Created : 8/10/2020
-- Date Modified: 8/10/2020
-- Contact      : John O'Neill
-- Description  : Used by restricted db login 'api_login_restricted' from a REST Web API
-- Notes        : TODO:?
-- *************** /Summary Info ***************

SELECT 
    dusr.UserKey
    , dusr.UserName
    ,ISNULL(dusr.Email,'') as Email
    ,ISNULL(dusr.FirstName,'') as FirstName
    ,ISNULL(dusr.FirstNameFormal,dusr.FirstName) as FirstNameFormal
    ,ISNULL(dusr.LastName,'') as LastName
    ,ISNULL(dusr.FullName,'') as FullName
    ,ISNULL(dusr.UserType,'') as UserType
    ,ISNULL(dusr.JobTitle,'') as JobTitle
    ,ISNULL(dusr.ExemptStatus,'') as ExemptStatus
    ,ISNULL(dusr.StockLevelCode,'') as JobLevel
    ,ISNULL(CONVERT(Varchar,dusr.FTE),'') as FTE
    ,ISNULL(dusr.WorkplaceName,'') as WorkplaceName
    ,ISNULL(dusr.WorkplaceLocation,'') as WorkplaceLocation
    ,ISNULL(CONVERT(Varchar,dusr.OriginalHireDate,110),'') as OriginalHireDate
    ,ISNULL(CONVERT(Varchar,dusr.TerminationDate,110),'') as TerminationDate
    ,ISNULL(dusr.Active,0) as Active
    ,ISNULL(dusr.EmployeeNumber,'') as EmployeeNumber
    , ISNULL(d.DepartmentNumberDescription,'') as Department
    ,CASE WHEN boss.UserKey IS NULL THEN '' ELSE boss.FirstName + ' ' + boss.LastName END as ManagerName
    ,ISNULL(boss.Email,'') as ManagerEmail
    ,ISNULL(CONVERT(Varchar, boss.UserKey),'') as ManagerUserKey
    ,ISNULL(dusr.CompanyCode,'') as CompanyCode
    ,ISNULL(dusr.PubsUserId,0) as PubsUserId
FROM DimUser as dusr
LEFT JOIN dimUser as boss on dusr.ManagerKey = boss.UserKey
LEFT JOIN dimDepartment as d on dusr.DepartmentKey = d.DepartmentKey
GO
PRINT N'Creating [dbo].[vw_PL]...';


GO






CREATE view [dbo].[vw_PL]

as 

select f.* , cw.TotalingAccount,TotalingAccountDescription,PLType,PLGroup,PLOrder,Factor from facttransaction f
left join PL_Crosswalk cw on cw.AccountKey = f.AccountKey and cw.DepartmentKey = f.DepartmentKey
where plgroup is not null
and month(transactiondate) = 9
--where accountstring = '9821-899-000-000'
and month(TransactionDate) = 9 
and year(TransactionDate) = 2019

--select * from PLCrosswalk
GO
PRINT N'Creating [dbo].[vw_PL_Akcea]...';


GO



CREATE view [dbo].[vw_PL_Akcea]

as 

select f.* , cw.TotalingAccount,TotalingAccountDescription,PLType,PLGroup,PLOrder,Factor from FactTransactionPL f
left join PL_Crosswalk_Akcea cw on cw.mainAccount = left(accountstring,4) and cw.DepartmentKey = f.DepartmentKey

where plgroup is not null
and pltype = 'internal proforma'
and IsAllocated in ('Allocated','N/A')
GO
PRINT N'Creating [dbo].[vwBuildingAccessUser]...';


GO
CREATE VIEW [dbo].[vwBuildingAccessUser]
AS
-- ***************Developer Info ***************
-- Date Created : 4/11/2020
-- Date Modified: 
-- Contact      : John O'Neill
-- Description  : Use the DimUser email and name for BuildingAccessUser reocrds where possible, otherwise use the values provided by managed badge table.
-- Notes        : 
-- *************** /Developer Info ***************
 SELECT 
    bac.BadgeNumber
    , ISNULL(du.FirstName,bac.FirstName) as FirstName
    , ISNULL(du.LastName,bac.LastName) as LastName
    , case 
      WHEN du.FirstName IS NULL THEN bac.FirstName + ' ' + bac.LastName
      ELSE du.FullName 
      END as FullName
   , ISNULL(du.Email,'') as Email
   , ISNULL(bac.BadgeStatus,'') as BadgeStatus
   ,ISNULL(bac.Company,'') as Company
   
 FROM BuildingAccessUser as bac 
 LEFT JOIN DimUser as du on bac.DimUserKey = du.UserKey
GO
PRINT N'Creating [dbo].[vwFTEAccounts]...';


GO
Create view vwFTEAccounts as
Select *
from MAINACCOUNTSTAGING
where 
MAINACCOUNTCATEGORY in ('BENEFITS',
'BONUS',
'CPAACCRUAL',
'MBO',
'SALARY')
GO
PRINT N'Creating [dbo].[vwPubsDimFranchise]...';


GO
CREATE VIEW [dbo].[vwPubsDimFranchise] AS (
  SELECT m.[PubsKey],m.[PubsFranchiseID],f.[Franchise] FROM
    [dbo].[PubsRecordFranchise] m
  LEFT JOIN 
    [dbo].[PubsFranchise] f 
  ON
    m.[PubsFranchiseID]=f.[PubsFranchiseID]
)
GO
PRINT N'Creating [dbo].[vwPubsDimFunctionalArea]...';


GO
CREATE VIEW [dbo].[vwPubsDimFunctionalArea] AS (
  SELECT m.[PubsKey],m.[PubsFunctionalAreaID],f.[Functional] FROM
    [dbo].[PubsRecordFunctionalArea] m
  LEFT JOIN 
    [dbo].[PubsFunctionalArea] f 
  ON
    m.[PubsFunctionalAreaID]=f.[PubsFunctionalAreaID]
)
GO
PRINT N'Creating [dbo].[vwPubsDimIonisAuthor]...';


GO
CREATE VIEW [dbo].[vwPubsDimIonisAuthor] AS (
  SELECT m.[PubsKey],m.[IonisAuthorKey],f.[FullName] FROM
    [dbo].[PubsRecordIonisAuthor] m
  LEFT JOIN 
    [dbo].[DimUser] f 
  ON
    m.[IonisAuthorKey]=f.[UserKey]
)
GO
PRINT N'Creating [dbo].[vwPubsDimSubmissinContentDataType]...';


GO
CREATE VIEW [dbo].[vwPubsDimSubmissinContentDataType] AS (
  SELECT m.[PubsKey],m.[PubsSubmissionContentDataTypeID],f.[Title] FROM
    [dbo].[PubsRecordSubmissinContentDataType] m
  LEFT JOIN 
    [dbo].[PubsSubmissionContentDataType] f 
  ON
    m.[PubsSubmissionContentDataTypeID]=f.[PubsSubmissionContentDataTypeID]
)
GO
PRINT N'Creating [dbo].[vwPubsRecord]...';


GO

CREATE VIEW [dbo].[vwPubsRecord] AS
-- ***************Developer Info ***************
-- Date Created : 4/11/2020
-- Date Modified: 9/16/2020
-- Contact      : John O'Neill
-- Note         : Changed PubsId to PubsKey in join
-- *************** /Developer Info ***************

SELECT pu.PubsID
, pu.Title
, pu.PubsType
,ISNULL(CONVERT(varchar, pu.SubmissionDeadline,110),'') as 'Submission Deadline'
,ISNULL( duRp.FullName,'') as 'Responsible Party' 
,ISNULL( duCreatedBy.FullName,'') as 'Submitter' 
, 'Ionis Authors' = ISNULL( (SELECT  STUFF((
                Select ',' +  authUser.FullName 
                FROM  dbo.DIMUser as authUser 
                INNER JOIN  dbo.PubsRecordIonisAuthor as auths ON authUser.UserKey =  auths.IonisAuthorKey
                Where auths.PubsKey = pu.PubsKey 
                FOR XML PATH('')
                ) ,1,1,'')), '')
,ISNULL(pu.ExternalAuthors,'') as 'External Authors'
, 'Compounds' = ISNULL( (SELECT  STUFF((
                Select ',' +  prc.CompoundNumber
                FROM PubsRecordCompound  as prc
                Where prc.PubsKey = pu.PubsKey 
                FOR XML PATH('')
                ) ,1,1,'')), '')
, 'Targets' = ISNULL( (SELECT  STUFF((
                Select ',' +  prt.SelectedTerm
                FROM PubsRecordTarget  as prt
                Where prt.PubsKey = pu.PubsKey 
                FOR XML PATH('')
                ) ,1,1,'')), '')
, ISNULL(pu.UserComments,'') as 'Comments'
, ISNULL(sc.SubmissionContent,'') as 'Submission Content Type'
, 'Content Data Type' = ISNULL( (SELECT  STUFF((
                Select ',' +  scd.Title 
                FROM  PubsSubmissionContentDataType as scd
                INNER JOIN  PubsRecordSubmissinContentDataType as pscd ON scd.PubsSubmissionContentDataTypeID =  pscd.PubsSubmissionContentDataTypeID
                Where pscd.PubsKey = pu.PubsKey 
                FOR XML PATH('')
                ) ,1,1,'')), '')
, 'Franchise' = ISNULL( (SELECT  STUFF((
                Select ',' +  fr.Franchise 
                FROM  PubsFranchise as fr
                INNER JOIN  PubsRecordFranchise as prf ON fr.PubsFranchiseID =  prf.PubsFranchiseID
                Where prf.PubsKey = pu.PubsKey 
                FOR XML PATH('')
                ) ,1,1,'')), '')
, 'Functional Area' = ISNULL( (SELECT  STUFF((
                Select ',' +  fa.Functional 
                FROM  PubsFunctionalArea as fa
                INNER JOIN  PubsRecordFunctionalArea as prfa ON fa.PubsFunctionalAreaID =  prfa.PubsFunctionalAreaID
                Where prfa.PubsKey = pu.PubsKey 
                FOR XML PATH('')
                ) ,1,1,'')), '')
, ISNULL(pu.IonisClinicalStudyCSNum,'') as  'Ionis Clinical Study Num'
, ISNULL (pu.ClinicalTrialRegistryIDNCTNum,'') as  'Clinical Trial Reg Num'
, ISNULL (pu.BookTitle,'') as  'Book Title'
, ISNULL (pu.BookChapter,'') as  'Book Chapter'
, ISNULL (pu.Editor,'') as  'Editor'
, ISNULL (pu.Edition,'') as  'Edition'
, ISNULL (pu.Volume,'') as  'Volume'
, ISNULL (pu.PresentationType,'') as  'Presentation Type'
, ISNULL (pu.Explain,'') as  'Explanation'
, ISNULL(m.MeetingTitle,'') as 'Meeting'
, CASE
    WHEN  pu.NeedAbstract = 'true' THEN 'Yes'
    ELSE 'No'
END AS 'Needs Abstract'
,ISNULL(pu.Presenters,'') as 'Presenters'
, ISNULL(j.JournalTItle,'') as 'Journal'
,ISNULL(pu.ApprovalStatus,'Not Started') as 'Approval Status'
, ISNULL(Convert(Varchar,pu.LastWfStartTime,110),'') as 'Approval Started'
, ISNULL(Convert(Varchar,pu.CompletedTime,110),'') as 'Approval Ended'
, ISNULL(pu.Comments,'') as 'Approval Comments'
, CASE
    WHEN  pu.Expedited = 'true' THEN 'Yes'
    ELSE 'No'
END AS 'Expedited Workflow'

, ISNULL(assocR.Title,'') as 'Associated Record'
, pu.Version as 'Pubs Version'
,CONVERT(varchar, pu.Created,110) as 'Created on'
,pu.CompletedTime
,m.PubsMeetingID
,j.JournalID
,duCreatedBy.UserKey as 'Submitter User Key'
,pu.ResponsiblePartyKey
,CASE 
    when pu.[Version] = 2 then CONCAT('https://isispharm.sharepoint.com/sites/pubs/SitePages/Publication-Detail.aspx?itemid=',pu.PubsID)
    else 
   CONCAT('https://isispharm.sharepoint.com/sites/pubs/Lists/PubsLegacy/DispForm.aspx?ID=',pll.SpLegacyListId)
END AS 'Pubs Link'


FROM PubsRecord as pu 
LEFT JOIN DimUser as duRp on pu.ResponsiblePartyKey = duRp.UserKey
LEFT JOIN DimUser as duCreatedBy on pu.CreatedBy = duCreatedBy.UserKey
LEFT JOIN PubsRecord as assocR on pu.AssociatedRecordKey = assocR.PubsKey
LEFT JOIN PubsSubmissionContent as sc ON pu.SubmissionContentID = sc.SubmissionContentKey
LEFT JOIN PubsJournals as j on pu.JournalLinkedID = j.JournalID
LEFT JOIN PubsMeeting as m on pu.MeetingLinkedID = m.PubsMeetingID
LEFT JOIN PubsLegacyLookup as pll ON pu.PubsKey = pll.PubsKey
GO
PRINT N'Creating [dbo].[vwRichWasHere]...';


GO
CREATE VIEW vwRichWasHere AS
SELECT 'RICH WAS HERE' AS RichWasHere, 'Here too' AS HUH
GO
PRINT N'Creating [dbo].[vwtotalingAccountExplosion]...';


GO
CREATE view [dbo].[vwtotalingAccountExplosion] as
SELECT t.[DEFINITIONGROUP]
      ,t.[EXECUTIONID]
      ,t.[ISSELECTED]
      ,t.[TRANSFERSTATUS]
      ,t.[MAINACCOUNTID] as TOTALINGMAINACCOUNTID
	  ,m.name as TOTALINGACCOUNTNAME
      ,t.[CHARTOFACCOUNTS]
      ,t.[FROMVALUE]
      ,t.[TOVALUE]
      ,t.[INVERTTOTALSIGN]
      ,t.[PARTITION]
      ,t.[SYNCSTARTDATETIME]
      ,t.[RECID]
	  ,m2.MAINACCOUNTID as COMPONENTMAINACCOUNTID
	  , m2.NAME AS COMPONENTACCOUNTNAME
  FROM [dbo].[MainAccountTotalAccountIntervalEntityStaging] t
  JOIN MainAccountStaging m on m.MAINACCOUNTID=t.mainaccountid and m.PARTITION=t.partition
  join MainAccountStaging m2 on m2.MAINACCOUNTID>=t.fromvalue and m2.MAINACCOUNTID<=t.tovalue and m.PARTITION=t.partition
GO
PRINT N'Creating [pubs].[FACTPubsRecord]...';


GO
CREATE VIEW [pubs].[FACTPubsRecord] AS
-- ***************Developer Info ***************
-- Date Created : 4/11/2020
-- Date Modified: 9/16/2020
-- Contact      : John O'Neill
-- Note         : Changed PubsId to PubsKey in join
-- *************** /Developer Info ***************

SELECT pu.PubsKey 
,pu.PubsID
, pu.Title
, pu.PubsType
,ISNULL(CONVERT(varchar, pu.SubmissionDeadline,110),'') as 'Submission Deadline'
,ISNULL( duRp.FullName,'') as 'Responsible Party' 
,ISNULL( duCreatedBy.FullName,'') as 'Submitter' 
, 'Ionis Authors' = ISNULL( (SELECT  STUFF((
                Select ',' +  authUser.FullName 
                FROM  dbo.DIMUser as authUser 
                INNER JOIN  dbo.PubsRecordIonisAuthor as auths ON authUser.UserKey =  auths.IonisAuthorKey
                Where auths.PubsKey = pu.PubsKey 
                FOR XML PATH('')
                ) ,1,1,'')), '')
,ISNULL(pu.ExternalAuthors,'') as 'External Authors'
, 'Compounds' = ISNULL( (SELECT  STUFF((
                Select ',' +  prc.CompoundNumber
                FROM PubsRecordCompound  as prc
                Where prc.PubsKey = pu.PubsKey 
                FOR XML PATH('')
                ) ,1,1,'')), '')
, 'Targets' = ISNULL( (SELECT  STUFF((
                Select ',' +  prt.SelectedTerm
                FROM PubsRecordTarget  as prt
                Where prt.PubsKey = pu.PubsKey 
                FOR XML PATH('')
                ) ,1,1,'')), '')
, ISNULL(pu.UserComments,'') as 'Comments'
, ISNULL(sc.SubmissionContent,'') as 'Submission Content Type'
, 'Content Data Type' = ISNULL( (SELECT  STUFF((
                Select ',' +  scd.Title 
                FROM  PubsSubmissionContentDataType as scd
                INNER JOIN  PubsRecordSubmissinContentDataType as pscd ON scd.PubsSubmissionContentDataTypeID =  pscd.PubsSubmissionContentDataTypeID
                Where pscd.PubsKey = pu.PubsKey 
                FOR XML PATH('')
                ) ,1,1,'')), '')
, 'Franchise' = ISNULL( (SELECT  STUFF((
                Select ',' +  fr.Franchise 
                FROM  PubsFranchise as fr
                INNER JOIN  PubsRecordFranchise as prf ON fr.PubsFranchiseID =  prf.PubsFranchiseID
                Where prf.PubsKey = pu.PubsKey 
                FOR XML PATH('')
                ) ,1,1,'')), '')
, 'Functional Area' = ISNULL( (SELECT  STUFF((
                Select ',' +  fa.Functional 
                FROM  PubsFunctionalArea as fa
                INNER JOIN  PubsRecordFunctionalArea as prfa ON fa.PubsFunctionalAreaID =  prfa.PubsFunctionalAreaID
                Where prfa.PubsKey = pu.PubsKey 
                FOR XML PATH('')
                ) ,1,1,'')), '')
, ISNULL(pu.IonisClinicalStudyCSNum,'') as  'Ionis Clinical Study Num'
, ISNULL (pu.ClinicalTrialRegistryIDNCTNum,'') as  'Clinical Trial Reg Num'
, ISNULL (pu.BookTitle,'') as  'Book Title'
, ISNULL (pu.BookChapter,'') as  'Book Chapter'
, ISNULL (pu.Editor,'') as  'Editor'
, ISNULL (pu.Edition,'') as  'Edition'
, ISNULL (pu.Volume,'') as  'Volume'
, ISNULL (pu.PresentationType,'') as  'Presentation Type'
, ISNULL (pu.Explain,'') as  'Explanation'
, ISNULL(m.MeetingTitle,'') as 'Meeting'
, CASE
    WHEN  pu.NeedAbstract = 'true' THEN 'Yes'
    ELSE 'No'
END AS 'Needs Abstract'
,ISNULL(pu.Presenters,'') as 'Presenters'
, ISNULL(j.JournalTItle,'') as 'Journal'
,ISNULL(pu.ApprovalStatus,'Not Started') as 'Approval Status'
, ISNULL(Convert(Varchar,pu.LastWfStartTime,110),'') as 'Approval Started'
, ISNULL(Convert(Varchar,pu.CompletedTime,110),'') as 'Approval Ended'
, ISNULL(pu.Comments,'') as 'Approval Comments'
, CASE
    WHEN  pu.Expedited = 'true' THEN 'Yes'
    ELSE 'No'
END AS 'Expedited Workflow'

, ISNULL(assocR.Title,'') as 'Associated Record'
, pu.Version as 'Pubs Version'
,CONVERT(varchar, pu.Created,110) as 'Created on'
,pu.CompletedTime
,m.PubsMeetingID
,j.JournalID
,duCreatedBy.UserKey as 'Submitter User Key'
,pu.ResponsiblePartyKey
,CASE 
    when pu.[Version] = 2 then CONCAT('https://isispharm.sharepoint.com/sites/pubs/SitePages/Publication-Detail.aspx?itemid=',pu.PubsID)
    else 
   CONCAT('https://isispharm.sharepoint.com/sites/pubs/Lists/PubsLegacy/DispForm.aspx?ID=',pll.SpLegacyListId)
END AS 'Pubs Link'
FROM PubsRecord as pu 
LEFT JOIN DimUser as duRp on pu.ResponsiblePartyKey = duRp.UserKey
LEFT JOIN DimUser as duCreatedBy on pu.CreatedBy = duCreatedBy.UserKey
LEFT JOIN PubsRecord as assocR on pu.AssociatedRecordKey = assocR.PubsKey
LEFT JOIN PubsSubmissionContent as sc ON pu.SubmissionContentID = sc.SubmissionContentKey
LEFT JOIN PubsJournals as j on pu.JournalLinkedID = j.JournalID
LEFT JOIN PubsMeeting as m on pu.MeetingLinkedID = m.PubsMeetingID
LEFT JOIN PubsLegacyLookup as pll ON pu.PubsKey = pll.PubsKey
GO
PRINT N'Creating [dbo].[vAD_A_ActualsSummaryA]...';


GO

CREATE view vAD_A_ActualsSummaryA
as
select [Account],
	[Level],
	[Split Label],
	[Project],
	[Task],
	[Supplier],
	CASE [Period] WHEN '1-2020' THEN SUM(PeriodAmount) ELSE 0 END AS '2020-01',
	CASE [Period] WHEN '2-2020' THEN SUM(PeriodAmount) ELSE 0 END AS '2020-02',
	CASE [Period] WHEN '3-2020' THEN SUM(PeriodAmount) ELSE 0 END AS '2020-03',
	CASE [Period] WHEN '4-2020' THEN SUM(PeriodAmount) ELSE 0 END AS '2020-04',
	CASE [Period] WHEN '5-2020' THEN SUM(PeriodAmount) ELSE 0 END AS '2020-05',
	CASE [Period] WHEN '6-2020' THEN SUM(PeriodAmount) ELSE 0 END AS '2020-06',
	CASE [Period] WHEN '7-2020' THEN SUM(PeriodAmount) ELSE 0 END AS '2020-07',
	CASE [Period] WHEN '8-2020' THEN SUM(PeriodAmount) ELSE 0 END AS '2020-08',
	CASE [Period] WHEN '9-2020' THEN SUM(PeriodAmount) ELSE 0 END AS '2020-09',
	CASE [Period] WHEN '10-2020' THEN SUM(PeriodAmount) ELSE 0 END AS '2020-10',
	CASE [Period] WHEN '11-2020' THEN SUM(PeriodAmount) ELSE 0 END AS '2020-11',
	CASE [Period] WHEN '12-2020' THEN SUM(PeriodAmount) ELSE 0 END AS '2020-12'
from vAD_A_ActualsSummarySubB
where [Period] LIKE '%-2020'
group by [Account],
	[Level],
	[Split Label],
	[Project],
	[Task],
	[Supplier],
	[Period]
GO
PRINT N'Creating [dbo].[vAD_A_ActualsSummaryA_2019]...';


GO


CREATE view [dbo].[vAD_A_ActualsSummaryA_2019]
as
select [Account],
	[Level],
	[Split Label],
	[Project],
	[Task],
	[Supplier],
	CASE [Period] WHEN '1-2019' THEN SUM(PeriodAmount) ELSE 0 END AS '2019-01',
	CASE [Period] WHEN '2-2019' THEN SUM(PeriodAmount) ELSE 0 END AS '2019-02',
	CASE [Period] WHEN '3-2019' THEN SUM(PeriodAmount) ELSE 0 END AS '2019-03',
	CASE [Period] WHEN '4-2019' THEN SUM(PeriodAmount) ELSE 0 END AS '2019-04',
	CASE [Period] WHEN '5-2019' THEN SUM(PeriodAmount) ELSE 0 END AS '2019-05',
	CASE [Period] WHEN '6-2019' THEN SUM(PeriodAmount) ELSE 0 END AS '2019-06',
	CASE [Period] WHEN '7-2019' THEN SUM(PeriodAmount) ELSE 0 END AS '2019-07',
	CASE [Period] WHEN '8-2019' THEN SUM(PeriodAmount) ELSE 0 END AS '2019-08',
	CASE [Period] WHEN '9-2019' THEN SUM(PeriodAmount) ELSE 0 END AS '2019-09',
	CASE [Period] WHEN '10-2019' THEN SUM(PeriodAmount) ELSE 0 END AS '2019-10',
	CASE [Period] WHEN '11-2019' THEN SUM(PeriodAmount) ELSE 0 END AS '2019-11',
	CASE [Period] WHEN '12-2019' THEN SUM(PeriodAmount) ELSE 0 END AS '2019-12'
from vAD_A_ActualsSummarySubB
where [Period] LIKE '%-2019'
group by [Account],
	[Level],
	[Split Label],
	[Project],
	[Task],
	[Supplier],
	[Period]
GO
PRINT N'Creating [dbo].[vwBuildingAccessActivity]...';


GO
CREATE VIEW [dbo].[vwBuildingAccessActivity]
AS
-- *************** View Info ***************
-- Date Created : 3/12/2020
-- Date Modified: 
-- Contact      : John O'Neill
-- Description  : Return MINIMUM daily badge acitivity information for each user - one entry for each day where the user swiped a card on a door access panel
--              :  We don't show which door, swipe times,etc.  This view is used to track whether or not somebody entered a building on a given day (for COVID-19 tracking)
-- Notes        : 
-- *************** /View Info ***************

WITH uniqueBadgesPerDay AS (
SELECT DISTINCT bat.BadgeNumber
,Convert(date,bat.ActivityDate) as BadgeActivityDate
FROM BuildingAccessActivity as bat
GROUP BY bat.BadgeNumber,Convert(date,bat.ActivityDate)
)

SELECT ubd.BadgeActivityDate, bau.* from vwBuildingAccessUser as bau
INNER JOIN uniqueBadgesPerDay as ubd on bau.BadgeNumber = ubd.BadgeNumber
GO
PRINT N'Creating [pubs].[DimDelagateTasks]...';


GO
CREATE VIEW [pubs].[DimDelagateTasks] AS

SELECT ats.[TaskID]
      ,ats.[PubsKey]
      ,ats.[ApprovalRole]
      ,ats.[Status]
      ,ats.[AssignedToKey]
      ,ISNULL(du.FullName,'') as 'Approver'
      ,ats.[TaskCompleted]
      ,ats.[TaskOutcome]
      ,ats.[DelegateAdded]
      ,ats.[DelegateKey]
      ,ISNULL(du2.FullName,'') as 'Delegator'
      ,ats.[TaskComments]
      ,ats.[UserComments]
      ,ats.[Created]
      ,ats.[Modified] as 'Completed'
      , CASE
    WHEN  ats.Created > pub.[Approval Started] THEN 'Yes'
    ELSE 'No'
    END AS 'LatestTask'

FROM [dbo].[PubsApprovalTasks] as ats
LEFT JOIN dbo.DimUser as du on du.UserKey=ats.AssignedToKey
LEFT JOIN dbo.DimUser as du2 on du2.UserKey=ats.DelegateKey
LEFT JOIN pubs.FACTPubsRecord as pub on ats.PubsKey=pub.PubsKey
where [TaskOutcome]='Delegate'
GO
PRINT N'Creating [pubs].[DimApprovalTasks]...';


GO
CREATE VIEW [pubs].[DimApprovalTasks] AS

SELECT ats.[TaskID]
      ,ats.[PubsKey]
      ,ats.[PubsID]
      ,ats.[ApprovalRole]
      ,REPLACE(ats.[Status], 'No Action Needed', 'No Action Taken') as 'Status'
      ,ats.[AssignedToKey]
      ,ISNULL(du.FullName,'') as 'Approver'
      ,ats.[TaskCompleted]
      ,ats.[TaskOutcome]
      ,ats.[DelegateAdded]
      ,ats.[DelegateKey]
      ,ISNULL(du2.FullName,'') as 'Delegator'
      ,ats.[TaskComments]
      ,ats.[UserComments]
      ,ats.[Created]
      ,ats.[Modified] as 'Completed'
      , CASE
    WHEN  ats.Created > pub.[Approval Started] THEN 'Yes'
    ELSE 'No'
    END AS 'LatestTask'

FROM [dbo].[PubsApprovalTasks] as ats
LEFT JOIN dbo.DimUser as du on du.UserKey=ats.AssignedToKey
LEFT JOIN dbo.DimUser as du2 on du2.UserKey=ats.DelegateKey
LEFT JOIN pubs.FACTPubsRecord as pub on ats.PubsKey=pub.PubsKey
GO
PRINT N'Creating [dbo].[vAD_A_ActualsSummary]...';


GO
CREATE view vAD_A_ActualsSummary
as
select [Account],
	[Level],
	[Split Label],
	[Project],
	[Task],
	ISNULL([Supplier],'') as [Supplier],
	SUM([2020-01]) as [2020-01],
	SUM([2020-02]) as [2020-02],
	SUM([2020-03]) as [2020-03],
	SUM([2020-04]) as [2020-04],
	SUM([2020-05]) as [2020-05],
	SUM([2020-06]) as [2020-06],
	SUM([2020-07]) as [2020-07],
	SUM([2020-08]) as [2020-08],
	SUM([2020-09]) as [2020-09],
	SUM([2020-10]) as [2020-10],
	SUM([2020-11]) as [2020-11],
	SUM([2020-12]) as [2020-12]
from vAD_A_ActualsSummaryA
group by [Account],
	[Level],
	[Split Label],
	[Project],
	[Task],
	[Supplier]
GO
PRINT N'Creating [dbo].[vAD_A_ActualsSummary_2019]...';


GO

CREATE view [dbo].[vAD_A_ActualsSummary_2019]
as
select [Account],
	[Level],
	[Split Label],
	[Project],
	[Task],
	ISNULL([Supplier],'') as [Supplier],
	SUM([2019-01]) as [2019-01],
	SUM([2019-02]) as [2019-02],
	SUM([2019-03]) as [2019-03],
	SUM([2019-04]) as [2019-04],
	SUM([2019-05]) as [2019-05],
	SUM([2019-06]) as [2019-06],
	SUM([2019-07]) as [2019-07],
	SUM([2019-08]) as [2019-08],
	SUM([2019-09]) as [2019-09],
	SUM([2019-10]) as [2019-10],
	SUM([2019-11]) as [2019-11],
	SUM([2019-12]) as [2019-12]
from vAD_A_ActualsSummaryA_2019
group by [Account],
	[Level],
	[Split Label],
	[Project],
	[Task],
	[Supplier]
GO
PRINT N'Creating [dbo].[IONIS_FIELD]...';


GO
CREATE FUNCTION IONIS_FIELD(@value varchar(500), @seperator char, @item int)
RETURNS varchar(500)
AS
BEGIN
	DECLARE @returnValue varchar(500);
	--EXEC @returnValue = spIONIS_FIELD @value, @seperator, @item;
	WITH Ordered AS (
	SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 0)) AS RowNumber, value
	FROM STRING_SPLIT(@value, @seperator))
	SELECT @returnValue = value  
	FROM Ordered
	WHERE RowNumber = @item

	RETURN @returnValue;
END
GO
PRINT N'Creating [dbo].[IONIS_UltiCompanyToD365]...';


GO

CREATE FUNCTION [dbo].[IONIS_UltiCompanyToD365](@UltiCompany char(5))
RETURNS char(4)
AS
BEGIN
	DECLARE @returnValue char(4);
	SET @returnValue = CASE @UltiCompany
				WHEN 'AKCAT' THEN 'AKUS'
				WHEN 'AKCCA' THEN 'AKCA'
				WHEN 'AKCCH' THEN 'AKUS'
				WHEN 'AKCDE' THEN 'AKDE'
				WHEN 'AKCDR' THEN 'AKUS'
				WHEN 'AKCEA' THEN 'AKUS'
				WHEN 'AKCFR' THEN 'AKFR'
				WHEN 'AKCIE' THEN 'AKIE'
				WHEN 'AKCIT' THEN 'AKIT'
				WHEN 'AKCPT' THEN 'AKPT'
				WHEN 'AKCSE' THEN 'AKUS'
				WHEN 'AKCSP' THEN 'AKSP'
				WHEN 'AKCUK' THEN 'AKUK'
				WHEN 'IBIS' THEN 'IONS'
				WHEN 'ISIS' THEN 'IONS'
				WHEN 'REGS' THEN 'REGS'
				WHEN 'SING' THEN 'SING'
				WHEN 'TEMP' THEN 'TEMP'
			ELSE 'UNK' END

	RETURN @returnValue;
END
GO
PRINT N'Creating [dbo].[Scenario_CheckOfficialCount]...';


GO
/* ---------------------------------------------------- */
/*  Generated by Enterprise Architect Version 13.0 		*/
/*  Created On : 22-Oct-2020 10:03:19 AM 				*/
/*  DBMS       : SQL Server 2012 						*/
/* ---------------------------------------------------- */

/* Create Functions */

CREATE FUNCTION Scenario_CheckOfficialCount (
	@ScenarioTypeKey INT
) RETURNS INT AS BEGIN
	DECLARE @officialCount INT;
	SELECT @officialCount = COUNT(*) FROM DimScenario WHERE ScenarioTypeKey = @ScenarioTypeKey AND Official = 1;
	RETURN @officialCount
END;
GO
PRINT N'Creating [dbo].[udf_StripHTML]...';


GO
CREATE FUNCTION [dbo].[udf_StripHTML] (@HTMLText VARCHAR(MAX))
RETURNS VARCHAR(MAX) AS
BEGIN
    DECLARE @Start INT
    DECLARE @End INT
    DECLARE @Length INT
    SET @Start = CHARINDEX('<',@HTMLText)
    SET @End = CHARINDEX('>',@HTMLText,CHARINDEX('<',@HTMLText))
    SET @Length = (@End - @Start) + 1
    WHILE @Start > 0 AND @End > 0 AND @Length > 0
    BEGIN
        SET @HTMLText = STUFF(@HTMLText,@Start,@Length,'')
        SET @Start = CHARINDEX('<',@HTMLText)
        SET @End = CHARINDEX('>',@HTMLText,CHARINDEX('<',@HTMLText))
        SET @Length = (@End - @Start) + 1
    END
    RETURN LTRIM(RTRIM(@HTMLText))
END
GO
PRINT N'Creating [dbo].[ufn_DecryptString]...';


GO
CREATE FUNCTION [dbo].[ufn_DecryptString]
(@pEncryptedString NVARCHAR (100) NULL)
RETURNS VARCHAR (100)
WITH ENCRYPTION
AS
BEGIN
--The script body was encrypted and cannot be reproduced here.
    RETURN NULL
END
GO
PRINT N'Creating [dbo].[ufn_EncryptString]...';


GO
CREATE FUNCTION [dbo].[ufn_EncryptString]
(@pClearString VARCHAR (100) NULL)
RETURNS NVARCHAR (100)
WITH ENCRYPTION
AS
BEGIN
--The script body was encrypted and cannot be reproduced here.
    RETURN NULL
END
GO
PRINT N'Creating [dbo].[OneOfficialByType]...';


GO
ALTER TABLE [dbo].[DimScenario] WITH NOCHECK
    ADD CONSTRAINT [OneOfficialByType] CHECK ((NOT (dbo.Scenario_CheckOfficialCount(ScenarioTypeKey) > 1)));


GO
PRINT N'Creating [dbo].[vAD_FixedAssetDepreciation]...';


GO
CREATE VIEW vAD_FixedAssetDepreciation
AS
SELECT [Level]
	, [Accounts - CapEx]
	, [Description]
	, '' AS [Enter monthly amounts -->]
	, ISNULL([01/2020],0) AS [01/2020]
	, ISNULL([02/2020],0) AS [02/2020]
	, ISNULL([03/2020],0) AS [03/2020]
	, ISNULL([04/2020],0) AS [04/2020]
	, ISNULL([05/2020],0) AS [05/2020]
	, ISNULL([06/2020],0) AS [06/2020]
	, ISNULL([07/2020],0) AS [07/2020]
	, ISNULL([08/2020],0) AS [08/2020]
	, ISNULL([09/2020],0) AS [09/2020]
	, ISNULL([10/2020],0) AS [10/2020]
	, ISNULL([11/2020],0) AS [11/2020]
	, ISNULL([12/2020],0) AS [12/2020]
FROM (
	SELECT CONCAT(LEFT(CONCAT('000',dbo.IONIS_FIELD(FAJ.OFFSETACCOUNTDISPLAYVALUE,'-',2)),3),' - ',FAJ.DATAAREAID) AS [Level]
		, CONCAT(A.MainAccountNumber,' - ',A.MainAccountDescription) AS [Accounts - CapEx]
		, CONCAT(FA.FIXEDASSETNUMBER,'-',FA.[NAME]) AS [Description]
		, CONCAT(LEFT(CONCAT('0',DATEPART(MONTH,FAJ.TRANSDATE)),2),'/',DATEPART(YEAR,FAJ.TRANSDATE)) AS TranDate
		, FAJ.CREDITAMOUNT AS TranAmount
	FROM AssetJournalEntityStaging AS FAJ
		INNER JOIN DimAccount AS A ON dbo.IONIS_FIELD(OFFSETACCOUNTDISPLAYVALUE,'-',1) = A.MainAccountNumber
		INNER JOIN AssetFixedAssetStaging AS FA ON REPLACE(FAJ.ACCOUNTDISPLAYVALUE,'\','') = FA.FIXEDASSETNUMBER AND FAJ.DATAAREAID = FA.DATAAREAID
	WHERE TRANSDATE >= '1/1/2020'
) AS qrySource
PIVOT
(
	SUM(TranAmount)
	FOR TranDate IN ([01/2020],[02/2020],[03/2020],[04/2020],[05/2020],[06/2020],[07/2020],[08/2020],[09/2020],[10/2020],[11/2020],[12/2020])
) AS qryPivot
GO
PRINT N'Creating [dbo].[GLPeriodBalances]...';


GO


CREATE FUNCTION [dbo].[GLPeriodBalances] (@Year CHAR(4),  @Period VARCHAR(2))
RETURNS TABLE
AS
RETURN
(
--TEST VALUES
--DECLARE @Year CHAR(4)
--DECLARE @Period VARCHAR(2)

--SET @Year = '2020'
--SET @Period = '2'

	--SELECT TYPE 'A' Accounts and summarize balance as sum of period amounts to period provided
	SELECT GL.LEDGERNAME
		, @Year AS PeriodYear
		, @Period AS PeriodMonth
		, GL.ACCOUNTDISPLAYVALUE AS Account
		, SUM(GL.ACCOUNTINGCURRENCYAMOUNT) AS PeriodAmountBalanceSheet
		, SUM(CASE DATEPART(MONTH,GL.ACCOUNTINGDATE) WHEN @Period THEN GL.ACCOUNTINGCURRENCYAMOUNT ELSE 0 END) AS PeriodAmountExpense
		, SUM(CASE WHEN DATEPART(MONTH,GL.ACCOUNTINGDATE) = @Period AND GL.ACCOUNTINGCURRENCYAMOUNT <> 0 THEN 1 ELSE 0 END) AS TransactionsInPeriod
	FROM GeneralJournalAccountEntryStaging AS GL
		INNER JOIN MainAccountStaging AS A ON dbo.IONIS_FIELD(GL.ACCOUNTDISPLAYVALUE,'-',1) = A.MAINACCOUNTID
	WHERE GL.ACCOUNTINGDATE >= CONCAT('1/1/',@Year)
	  AND DATEPART(MONTH,GL.ACCOUNTINGDATE) <= @Period
	GROUP BY GL.LEDGERNAME
		, GL.ACCOUNTDISPLAYVALUE
);
GO
PRINT N'Creating [dbo].[BLACKLINE]...';


GO
CREATE VIEW BLACKLINE
AS
SELECT -- TOP 10 
	GL.LEDGERNAME AS [Entity Unique Identifier]
	,dbo.IONIS_FIELD(GL.ACCOUNTDISPLAYVALUE,'-',1) AS [Main Account Number]
	,dbo.IONIS_FIELD(GL.ACCOUNTDISPLAYVALUE,'-',2) AS [Department]
	,dbo.IONIS_FIELD(GL.ACCOUNTDISPLAYVALUE,'-',3) AS [Project]
	,dbo.IONIS_FIELD(GL.ACCOUNTDISPLAYVALUE,'-',4) AS [Task Code]
	,'' AS [Key6]
	,'' AS [Key7]
	,'' AS [Key8]
	,'' AS [Key9]
	,'' AS [Key10]
	,A.[NAME] AS [AccountDescription]
	,A.[ACCOUNTCATEGORYDESCRIPTION] AS [Account Reference]
	,CASE 
		WHEN A.MAINACCOUNTID>='1000' AND A.MAINACCOUNTID<'4000' THEN 'A'
		WHEN A.MAINACCOUNTID>='4000' AND A.MAINACCOUNTID<='9999' THEN 'I'
		ELSE ''
	END AS [Financial Statement]
	,CASE A.MAINACCOUNTTYPE
		WHEN 0 THEN 'Profit and Loss'
		WHEN 1 THEN 'Revenue'
		WHEN 2 THEN 'Expense'
		WHEN 3 THEN 'Balance Sheet'
		WHEN 4 THEN 'Asset'
		WHEN 5 THEN 'Liability'
		WHEN 6 THEN 'Equity'
		WHEN 8 THEN 'Totaling'
	END AS [Account Type]
	,CASE A.ISSUSPENDED
		WHEN 0 THEN 'TRUE'
		ELSE 'FALSE'
	END AS [Active Account]
	,CASE ISNULL(PB.TransactionsInPeriod,0) WHEN 0 THEN 'FALSE' ELSE 'TRUE' END AS [Activity in Period]
	,'' AS [Alternate Currency]
	--income statements use coding to assign by account
	--LEFT(ACCOUNTINGCURRENCY,2)+'1' for income accounts (Financial Statement = 'I')
	,CASE 
		WHEN A.MAINACCOUNTID>='1000' AND A.MAINACCOUNTID<'4000' THEN E.ACCOUNTINGCURRENCY
		ELSE CONCAT(LEFT(E.ACCOUNTINGCURRENCY,2),'1')
		END AS [Accounting Currency]
	,P.PeriodEndDate AS [Period End Date]
	,'' AS [GL Reporting Balance- US]
	,'' AS [GL Alternate Balance]
	,CASE 
		WHEN A.MAINACCOUNTID>='1000' AND A.MAINACCOUNTID<'4000' THEN ISNULL(PB.PeriodAmountBalanceSheet,0)
		ELSE ISNULL(PB.PeriodAmountExpense,0)
		END AS [GL Reporting Balance- Functional]
FROM (SELECT DISTINCT LEDGERNAME, ACCOUNTDISPLAYVALUE
		FROM GeneralJournalAccountEntryStaging) AS GL
	INNER JOIN MainAccountStaging AS A ON dbo.IONIS_FIELD(GL.ACCOUNTDISPLAYVALUE,'-',1) = A.MAINACCOUNTID
	CROSS JOIN (
		SELECT FISCALYEAR, [MONTH], FORMAT(ENDDATE,'M/d/yyyy') AS PeriodEndDate
		FROM FiscalPeriodStaging
		WHERE FISCALYEAR = DATEPART(year,GETDATE())
		  AND (MONTH = DATEPART(MONTH,GETDATE()) OR MONTH = DATEPART(MONTH,GETDATE()) - 1) 
	) AS P
	LEFT OUTER JOIN ( --period balances (PB) for current and prior periods
		SELECT LEDGERNAME, PeriodYear, PeriodMonth, Account, PeriodAmountBalanceSheet, PeriodAmountExpense, TransactionsInPeriod
		FROM GLPeriodBalances(DATEPART(year,GETDATE()),DATEPART(MONTH,GETDATE())) 

		UNION ALL

		SELECT LEDGERNAME, PeriodYear, PeriodMonth, Account, PeriodAmountBalanceSheet, PeriodAmountExpense, TransactionsInPeriod
		FROM GLPeriodBalances(DATEPART(year,GETDATE()),DATEPART(MONTH,GETDATE())-1) 
	) AS PB ON PB.LEDGERNAME = GL.LEDGERNAME AND PB.Account = GL.ACCOUNTDISPLAYVALUE AND P.FISCALYEAR = PB.PeriodYear AND P.[MONTH] = PB.PeriodMonth
	INNER JOIN LedgerEntityStaging AS E ON GL.LEDGERNAME = E.LEGALENTITYID
-- no consolidated companies
WHERE GL.LEDGERNAME NOT LIKE 'C%' --Do not export consolidation companies
  AND A.MAINACCOUNTID <> 'HC' AND A.MAINACCOUNTID <> 'HCO' --Do not show headcount accounts (maybe future use account type to filter stat accounts?)
-- order by Entity, Account
-- s/b select *
-- from LedgerEntityStaging
-- where ACCOUNTSTRUCTURENAME1 = 'CONS' OR LEGALENTITYID LIKE 'C%'
GO
PRINT N'Creating [dbo].[fnEmpLookupForPubs]...';


GO
CREATE FUNCTION [dbo].[fnEmpLookupForPubs] (@email	VARCHAR(50))
	RETURNS @employees TABLE (EmployeeID Varchar(15)
				,LastName Varchar(30)
    				,FirstName Varchar(30)
    				,FullName Varchar(61)
                    ,Email Varchar(100)
    				,Title Varchar(80)
    				,[ReportsTo.EmployeeID] Varchar(15)
    				,[ReportsTo.Email] Varchar(30)
    				,[ReportsTo.FullName] Varchar(61)
    				,CompanyCode Varchar(15)
    				,Department Varchar(80)
    				,WorkLocation Varchar(15)
    				,ExemptStatus Varchar(15)
    				,FTE numeric(19,4)
    				,StatusCode Varchar(15)
    				,JobLevel Varchar(15)
				)
AS
BEGIN
DECLARE @empID VARCHAR(50);
SET @empID = (SELECT top 1 EmployeeID from ActiveEmployees WHERE Email = @email);



INSERT INTO @employees SELECT ae.EmployeeNumber
	,LastName
	,FirstName
	,FullName
    ,Email
	,JobTitle
	,[ManagerUserKey]
    	,[ManagerEmail]
    	,ManagerName
    	,CompanyCode
    	,Department
    	,WorkplaceLocation
    	,ExemptStatus 
    	,FTE
    	,Active
    	
    	,JobLevel
 from  vDimUserInfo as ae where ae.Email = @email
  

  RETURN 
END
GO
PRINT N'Creating [dbo].[fnEmpReportsToChain]...';


GO
CREATE FUNCTION [dbo].[fnEmpReportsToChain] (@email	VARCHAR(50))
	RETURNS @employees TABLE (LastName Varchar(30)
    				,FirstName Varchar(30)
    				,FullName Varchar(61)
    				
    				,Email Varchar(50)
    				--,Title Varchar(80)
    				--,[ReportsTo.EmployeeID[] Varchar(15)
    				--,[ReportsTo.Email[] Varchar(30)
    				--,[ReportsTo.FullName[] Varchar(61)
                    		,JobLevel VARCHAR(15)
    				,CompanyCode Varchar(50)
    				
                    		--,ManagerKey INT NULL
				)
AS
BEGIN
DECLARE @empUserKey INT
SET @empUserKey = (SELECT top 1 UserKey from DimUser WHERE Email = @email);--> OPTIONAL:  AND UserType = 'Employee'
;WITH Emps As 
( 
    SELECT e.UserKey, e.ManagerKey, 0 as Depth-- e.EmployeeNumber
    FROM DimUser e
   
    WHERE e.UserKey = @empUserKey
    UNION All 
    SELECT e2.UserKey, e2.ManagerKey, Depth + 1-- e2.EmployeeNumber
    FROM DimUser e2
        JOIN Emps 
            On Emps.ManagerKey = e2.UserKey 
) 

INSERT INTO @employees SELECT  ae.LastName, ae.FirstName,ae.FullName,ae.Email, ae.StockLevelCode, ae.CompanyCode from Emps as boss  --ae.UserKey,, ae.ManagerKey
INNER JOIN DimUser as ae on boss.ManagerKey = ae.UserKey
WHERE boss.ManagerKey IS NOT null

  RETURN 
END
GO
PRINT N'Creating [clinical].[BaselinePlanAdjustment_Randomizations]...';


GO
CREATE  PROCEDURE [clinical].[BaselinePlanAdjustment_Randomizations]

 @ScenarioName VARCHAR(2500),
 @ClinicalStudy VARCHAR(50),
 @Status VARCHAR(50),
 --@NewRandomizationRate INT,
 @ActivationDate DATE,
 @StatusDate DATETIME


AS
 
--DECLARE @CurrentRandomizationRate INT 
--DECLARE @AdjustedRandomizationRate NUMERIC(18,2)
 
--SET @CurrentRandomizationRate = (SELECT MAX(RandomizationRate_pct) FROM clinical.ScenarioParameters SP JOIN clinical.RecruitmentScenarios RS ON SP.ScenarioParametersID = RS.ScenarioParametersID WHERE RS.ClinicalStudyName = @ClinicalStudy)
--SET @AdjustedRandomizationRate = ((@CurrentRandomizationRate - @NewRandomizationRate)/100)
 
INSERT INTO clinical.ScenarioBuilderOutput
SELECT 
    CONCAT(CONCAT(@ClinicalStudy, '_'),@ScenarioName) AS ScenarioName
    ,@ScenarioName AS [Status]
    ,@StatusDate AS StatusDate
    ,CAST(ScenarioSiteName AS NVARCHAR(256)) AS ScenarioSiteName
    ,ActualSite
    ,PatientRecruitmentDate
    ,NumberofSubjects
    ,@ClinicalStudy AS ClinicalStudy 
FROM clinical.RecruitmentScenarios
WHERE
    --CAST(PatientRecruitmentDate AS DATE) >= @ActivationDate
    ClinicalStudyName = @ClinicalStudy
    AND [Status] = @Status
UNION ALL
SELECT
    CONCAT(CONCAT(@ClinicalStudy, '_'),@ScenarioName) AS ScenarioName
    ,@ScenarioName AS [Status]
    ,@StatusDate AS StatusDate
    ,CAST(ClinicalSiteNumber AS NVARCHAR(256)) AS ScenarioSiteName
    ,ActualSite = 1
    ,MonthYear AS PatientRecruitmentDate
    ,TotalSubjectsEnrolled AS NumberofSubjects
    ,@ClinicalStudy AS ClinicalStudy
FROM clinical.StudySiteActuals
WHERE
    ClinicalStudy = @ClinicalStudy
GO
PRINT N'Creating [clinical].[BaselinePlanAdjustment]...';


GO
CREATE  PROCEDURE [clinical].[BaselinePlanAdjustment]

 @ScenarioName VARCHAR(2500),
 @ClinicalStudy VARCHAR(50),
 @Status VARCHAR(50),
 @NewScreenFailRate INT,
 @ActivationDate DATE,
 @StatusDate DATETIME


AS


DECLARE @CurrentScreenFailRate INT 
DECLARE @AdjustedScreenFailRate NUMERIC(18,2)

SET @CurrentScreenFailRate = (SELECT MAX(ScreenFailureRate) FROM clinical.ScenarioParameters SP JOIN clinical.RecruitmentScenarios RS ON SP.ScenarioParametersID = RS.ScenarioParametersID WHERE RS.ClinicalStudyName = @ClinicalStudy)
SET @AdjustedScreenFailRate = ((@CurrentScreenFailRate*1.00 - @NewScreenFailRate*1.00)/100)

INSERT INTO clinical.ScenarioBuilderOutput
SELECT 
    CONCAT(CONCAT(@ClinicalStudy, '_'),@ScenarioName) AS ScenarioName
    ,@ScenarioName AS [Status]
    ,@StatusDate AS StatusDate
    ,CAST(ScenarioSiteName AS NVARCHAR(256)) AS ScenarioSiteName
    ,ActualSite
    ,PatientRecruitmentDate
    ,CASE
        WHEN @AdjustedScreenFailRate < 0 
        THEN NumberofSubjects - NumberofSubjects*ABS(@AdjustedScreenFailRate)
        WHEN @AdjustedScreenFailRate > 0 
        THEN NumberofSubjects + NumberofSubjects*ABS(@AdjustedScreenFailRate)
        WHEN @AdjustedScreenFailRate = 0 OR @AdjustedScreenFailRate IS NULL 
        THEN NumberofSubjects
    END AS NumberofSubjects
    ,@ClinicalStudy AS ClinicalStudy 
FROM clinical.RecruitmentScenarios
WHERE
    CAST(PatientRecruitmentDate AS DATE) >= @ActivationDate
    AND ClinicalStudyName = @ClinicalStudy
    AND [Status] = @Status
UNION ALL
SELECT
    CONCAT(CONCAT(@ClinicalStudy, '_'),@ScenarioName) AS ScenarioName
    ,@ScenarioName AS [Status]
    ,@StatusDate AS StatusDate
    ,CAST(ClinicalSiteNumber AS NVARCHAR(256)) AS ScenarioSiteName
    ,ActualSite = 1
    ,MonthYear AS PatientRecruitmentDate
    ,TotalSubjectsEnrolled AS NumberofSubjects
    ,@ClinicalStudy AS ClinicalStudy
FROM clinical.StudySiteActuals
WHERE
    ClinicalStudy = @ClinicalStudy
UNION ALL 
SELECT 
    CONCAT(CONCAT(@ClinicalStudy, '_'),@ScenarioName) AS ScenarioName
    ,@ScenarioName AS [Status]
    ,@StatusDate AS StatusDate
    ,CAST(ScenarioSiteName AS NVARCHAR(256)) AS ScenarioSiteName
    ,ActualSite
    ,PatientRecruitmentDate
    ,NumberofSubjects
    ,@ClinicalStudy AS ClinicalStudy 
FROM clinical.RecruitmentScenarios
WHERE
    CAST(PatientRecruitmentDate AS DATE) < @ActivationDate
    AND ClinicalStudyName = @ClinicalStudy
    AND [Status] = @Status
GO
PRINT N'Creating [mdr].[spUpdateD365Table]...';


GO
  CREATE PROCEDURE [mdr].[spUpdateD365Table] as
  UPDATE mdr.[DataEntityFields]
  SET D365Table=LEFT(Field_Binding,CHARINDEX('(',Field_Binding)-1)
  WHERE CHARINDEX('(',Field_Binding)-1>0
GO
PRINT N'Creating [mdr].[sp_ResetDB]...';


GO
CREATE PROCEDURE [mdr].[sp_ResetDB] @dbName VARCHAR(500) AS
-- EXEC sp_ResetDB 'RogueWave'

INSERT INTO [mdr].[RSMLogit] ([RunProcess], RunCharName1, RunChar1) VALUES ('Start sp_ResetDB','DBName',@dbName)

DELETE FROM mdr.BITableInfo WHERE DBName=@dbName
DELETE FROM mdr.BIColumnInfo WHERE DBName=@dbName
DELETE FROM mdr.BIDistinctValues WHERE DBName=@dbName
DELETE FROM mdr.BIDependencies WHERE DBName=@dbName
DELETE FROM mdr.BIForeignKeyInfo WHERE DBName=@dbName

INSERT INTO [mdr].[RSMLogit] ([RunProcess], RunCharName1, RunChar1) VALUES ('End sp_ResetDB','DBName',@dbName)
GO
PRINT N'Creating [mdr].[sp_LoadViewInfo]...';


GO

CREATE PROCEDURE [mdr].[sp_LoadViewInfo] @dbName VARCHAR(500) AS

-- Exec mdr.[sp_LoadViewInfo] 'AxDB'

DELETE from mdr.BIViewInfo where DBName=@dbName

DECLARE @sql VARCHAR(1000)
DECLARE @vwName VARCHAR(500)
DECLARE @vwID int

--Initial insert for user tables in the db name passed.
SET @sql = 'INSERT INTO mdr.BIViewInfo (DBName, SchemaName, ViewName) SELECT ' + '''' + @dbName + '''' + ', ' + 's.name, o.name ' 
SET @sql = @sql + 'FROM ' + @dbName + '.sys.sysobjects o, '+ @dbName + '.sys.schemas s, ' + @dbName + '.sys.objects so ' 
SET @sql = @sql + 'WHERE s.schema_id=o.uid AND o.id = so.object_id AND o.xtype= ' + '''' + 'V' + '''' + ' AND s.name <> ' + '''' + 'mdr' + '''' + ' AND '
SET @sql = @sql + 'NOT o.name like ' + '''' + 'sys%' + '''' + ' AND '
SET @sql = @sql + 'NOT o.name like ' + '''' + 'temp%' + '''' + ' AND '
SET @sql = @sql + 'NOT o.name like ' + '''' + 'sync%' + '''' + ' ORDER BY o.name'
EXECUTE (@sql)

DECLARE vw_cursor CURSOR FOR 
	SELECT [ID], DBName + '.' + SchemaName + '.' + ViewName FROM mdr.BIViewInfo WHERE DBName = @dbName and not ViewName in ('DelTek_LU_custEngineeringStatus','DelTek_LU_custLEEDGoal')

OPEN vw_cursor
FETCH NEXT FROM vw_cursor INTO @vwID, @vwName
WHILE @@FETCH_STATUS = 0   
BEGIN  
	SET @sql = 'UPDATE mdr.BIViewInfo SET NumRows = (SELECT COUNT(*) FROM ' + @vwName + ') WHERE [ID] = ' + CAST(@vwID AS VARCHAR(10)) 
	EXECUTE (@sql)
	FETCH NEXT FROM vw_cursor INTO @vwID, @vwName   
END   

CLOSE vw_cursor   
DEALLOCATE vw_cursor 
 

Update mdr.BIViewInfo 
Set Description='Not Populated', IncludeExclude='E' where NumRows=0

UPDATE mdr.BIViewInfo
SET DependencyID=
	(SELECT TOP 1 d.ObjectID
	FROM mdr.BIDependencies d
	WHERE d.DBname=mdr.BIViewInfo.DBname and d.ObjectName=mdr.BIViewInfo.ViewName)
GO
PRINT N'Creating [mdr].[sp_LoadTableInfo]...';


GO

CREATE PROCEDURE [mdr].[sp_LoadTableInfo] @dbName VARCHAR(500) AS

INSERT INTO [mdr].[RSMLogit] ([RunProcess], RunCharName1, RunChar1) VALUES ('Start sp_LoadTableInfo','DBName',@dbName)

-- Exec mdr.sp_LoadTableInfo 'GayLea'

DECLARE @sql VARCHAR(1000)
DECLARE @tblName VARCHAR(500)
DECLARE @tblID int

--Initial insert for user tables in the db name passed.
SET @sql = 'INSERT INTO mdr.BITableInfo (DBName, SchemaName, TableName) SELECT ' + '''' + @dbName + '''' + ', ' + 's.name, o.name ' 
SET @sql = @sql + 'FROM ' + @dbName + '.sys.sysobjects o, '+ @dbName + '.sys.schemas s ' 
SET @sql = @sql + 'WHERE s.schema_id=o.uid AND o.xtype= ' + '''' + 'U' + '''' + ' AND '--s.name = ' + '''' + 'mdr' + '''' + ' AND '
SET @sql = @sql + 'NOT o.name like ' + '''' + 'sys%' + '''' + ' AND '
SET @sql = @sql + 'NOT o.name like ' + '''' + 'temp%' + '''' + ' AND '
SET @sql = @sql + 'NOT o.name like ' + '''' + 'sync%' + '''' + ' ORDER BY o.name'
EXECUTE (@sql)

--Updates BITableInfo with the current row count.
DECLARE tbl_cursor CURSOR FOR 
	SELECT [ID], DBName + '.' + SchemaName + '."' + TableName + '"' FROM mdr.BITableInfo WHERE DBName = @dbName

OPEN tbl_cursor
FETCH NEXT FROM tbl_cursor INTO @tblID, @tblName
WHILE @@FETCH_STATUS = 0   
BEGIN  
	SET @sql = 'UPDATE mdr.BITableInfo SET NumRows = (SELECT COUNT(*) FROM ' + @tblName + ' WITH (NOLOCK)) WHERE [ID] = ' + CAST(@tblID AS VARCHAR(10)) 
	EXECUTE (@sql)
	FETCH NEXT FROM tbl_cursor INTO @tblID, @tblName   
END   

CLOSE tbl_cursor   
DEALLOCATE tbl_cursor 

--Updates BITableInfo for HasPK.
SET @sql = 'UPDATE mdr.BITableInfo SET HasPK = ' + '''' + 'YES' + '''' + ' WHERE DBName = ' + '''' + @dbName + ''''
SET @sql =  @sql + ' AND SchemaName = ' + '''' + 'mdr' + '''' + ' AND TableName IN	(SELECT o.name FROM ' + @dbName + '.sys.sysobjects o, '
SET @sql =  @sql + @dbName + '.sys.schemas s WHERE [ID] IN (SELECT parent_obj FROM ' + @dbName + '.sys.sysobjects WHERE '
SET @sql =  @sql + 'xtype = ' + '''' + 'PK' + '''' + ') AND s.schema_id=o.uid AND o.xtype= ' + '''' + 'U' + ''''
SET @sql =  @sql + ' AND s.name = ' + '''' + 'mdr' + '''' + ' AND NOT o.name like ' + '''' + 'sys%' + ''''
SET @sql =  @sql + ' AND NOT o.name like ' + '''' + 'temp%' + '''' + ')'
EXECUTE (@sql)

Update mdr.BITableInfo 
Set Description='Not Populated', IncludeExclude='E' where NumRows=0

INSERT INTO [mdr].[RSMLogit] ([RunProcess], RunCharName1, RunChar1) VALUES ('End sp_LoadTableInfo','DBName',@dbName)
GO
PRINT N'Creating [mdr].[sp_LoadForeignKeyInfo]...';


GO
CREATE Procedure [mdr].[sp_LoadForeignKeyInfo] @dbname varchar(50) as

INSERT INTO [mdr].[RSMLogit] ([RunProcess], RunCharName1, RunChar1) VALUES ('Start sp_LoadForeignKeyInfo','DBName',@dbName)

DECLARE @sql VARCHAR(5000)

--exec mdr.[sp_LoadForeignKeyInfo] 'RogueWave'
delete from mdr.BIForeignKeyInfo where dbname=@dbname

SET @sql = 'INSERT INTO mdr.BIForeignKeyInfo(DBName, SchemaName, Name, Childtable,childcolumnname,parenttable,parentcolumnname) '
SET @sql = @sql + 'SELECT ' + '''' + @dbName + '''' + ', s.name, fk.name,o2.name as childtable,c2.name as childcolumnname,o.name as parenttable,
	c.name as parentcolumnname ' 
SET @sql = @sql + 'FROM ' + @dbName + '.sys.foreign_keys fk, ' + @dbName + '.sys.objects o, ' + @dbName + '.sys.objects o2, ' + 
	@dbName + '.sys.foreign_key_columns fkc, '  + 
	@dbName + '.sys.columns c, '  + @dbName + '.sys.columns c2, '   + @dbName + '.sys.schemas s ' 
SET @sql = @sql + 'where o.object_id=fk.referenced_object_id and o2.object_id=fk.parent_object_id and c.object_id=o.object_id and '
SET @sql = @sql + 'c2.object_id=o2.object_id and fkc.constraint_object_id=fk.object_id and fkc.parent_object_id=fk.parent_object_id and '
SET @sql = @sql + 'fkc.referenced_object_id=fk.referenced_object_id and fkc.parent_column_id=c2.column_id and '
SET @sql = @sql + 'fkc.referenced_column_id=c.column_id'
--select @sql
EXECUTE (@sql)

Delete from mdr.BIForeignKeyInfo where SchemaName<>'mdr'

UPDATE mdr.BITableInfo
SET ChildInConstraintCount=
	ISNULL((SELECT COUNT(*)
	FROM mdr.BIForeignKeyInfo fk
	WHERE fk.DBName=BITableInfo.DBName and
	fk.childtable=BITableInfo.TableName),0)

UPDATE mdr.BITableInfo
SET ParentInConstraintCount=
	ISNULL((SELECT COUNT(*)
	FROM mdr.BIForeignKeyInfo fk
	WHERE fk.DBName=BITableInfo.DBName and
	fk.parenttable=BITableInfo.TableName),0)

INSERT INTO [mdr].[RSMLogit] ([RunProcess], RunCharName1, RunChar1) VALUES ('End sp_LoadForeignKeyInfo','DBName',@dbName)
GO
PRINT N'Creating [mdr].[sp_LoadBIViewColumnInfo]...';


GO
CREATE PROCEDURE [mdr].[sp_LoadBIViewColumnInfo] @dbName VARCHAR(500) AS

-- Exec mdr.sp_LoadBIViewColumnInfo 'AxDB'

DECLARE @schemaName VARCHAR(50)
DECLARE @ViewName VARCHAR(50)
DECLARE @columnName VARCHAR(50)
DECLARE @sql VARCHAR(1000)

-- Zero out values to be set
UPDATE mdr.BIViewColumnInfo 
	SET DistinctValueCount = 0, 
		NullRowsCount=0, 
		NullPct=0, 
		PKSeq=0 
WHERE DBName = @dbName
-- Declare a cursor for the columns
DECLARE columninfocursor cursor for
	SELECT c.dbname,c.schemaname,c.ViewName,c.columnname 
	FROM mdr.BIViewColumnInfo c, BIViewInfo t
	WHERE NOT c.DataType IN ('text','image','bit','uniqueidentifier') AND
	t.DBName = c.DBName AND
	t.SchemaName = c.SchemaName AND
	t.ViewName = c.ViewName AND
	t.DBName = @dbName AND
	t.NumRows > 0 AND
	c.DistinctValueCount = 0 AND
	c.NullRowsCount=0
FOR UPDATE
 

OPEN columninfocursor
FETCH NEXT FROM columninfocursor INTO @dbName, @schemaname, @ViewName, @columnname

WHILE @@FETCH_STATUS=0
BEGIN
	-- Create and execute SQL to update DistinctValueCount
	SET @sql= 'UPDATE mdr.BIViewColumnInfo SET DistinctValueCount = (SELECT COUNT(DISTINCT "' + @columnname + '") FROM ' +
		@dbname+'.'+@schemaname+'."' + @ViewName +
		'") WHERE DBName = ' + '''' + @dbName + '''' + ' AND ' +
		'SchemaName = ' + '''' + @schemaname + '''' + ' AND ' +
		'ViewName = ' + '''' + @ViewName + '''' + ' AND ' +
		'ColumnName = ' + '''' + @columnname + ''''
	EXECUTE (@sql)
	-- Create and execute SQL to update MaxVal
	--SET @sql= 'UPDATE mdr.BIViewColumnInfo SET MaxVal = (SELECT MAX("' + @columnname + '") FROM ' +
	--	@dbName + '.' + @schemaname + '."' + @ViewName +
	--	'") WHERE DBName = ' + '''' + @dbName + '''' + ' AND ' +
	--	'SchemaName = ' + '''' + @schemaname + '''' + ' AND ' +
	--	'ViewName = ' + '''' + @ViewName + '''' + ' AND ' +
	--	'ColumnName = ' + '''' + @columnname + ''''
	--EXECUTE (@sql)
	---- Create and execute SQL to update minval
	--SET @sql= 'UPDATE mdr.BIViewColumnInfo SET MinVal = (SELECT MIN("' + @columnname+'") FROM '+
	--	@dbName + '.' + @schemaname + '."' + @ViewName +
	--	'") WHERE DBName = ' + '''' + @dbName + '''' + ' AND ' +
	--	'SchemaName =' + '''' + @schemaname + '''' + ' AND ' +
	--	'ViewName =' + '''' + @ViewName + '''' + ' AND ' +
	--	'columnname=' + '''' + @columnname + ''''
	--EXECUTE (@sql)
	---- Create and execute SQL to update NullRowsCount
	--SET  @sql= 'UPDATE mdr.BIViewColumnInfo SET NullRowsCount = (SELECT COUNT(*) FROM ' +
	--	@dbName + '.' + @schemaname+ '."' + @ViewName +
	--	'" WHERE "' + @columnname + '" is null) WHERE DBName = ' + '''' + @dbName + '''' + ' AND ' +
	--	'SchemaName = ' + '''' + @schemaname + '''' + ' AND ' +
	--	'ViewName = ' + '''' + @ViewName + '''' + ' AND ' +
	--	'ColumnName = ' + '''' + @columnname + ''''
	--EXECUTE (@sql)
	FETCH NEXT FROM columninfocursor INTO @dbName, @schemaname, @ViewName, @columnname
end

CLOSE columninfocursor
DEALLOCATE columninfocursor

---- Set the pct of the time each column is null
--UPDATE mdr.BIViewColumnInfo 
--SET NullPCT=
--((NullRowsCount*1.00)/(SELECT NumRows FROM BIViewInfo r 
--			WHERE mdr.BIViewColumnInfo.DBName = r.DBName AND
--				mdr.BIViewColumnInfo.SchemaName = r.SchemaName AND
--				mdr.BIViewColumnInfo.ViewName = r.ViewName))*100.00
--WHERE (SELECT NumRows FROM mdr.BIViewInfo r 
--		WHERE mdr.BIViewColumnInfo.DBName = r.DBName AND
--			mdr.BIViewColumnInfo.SchemaName = r.SchemaName AND
--			mdr.BIViewColumnInfo.ViewName = r.ViewName) > 0 AND  DBName = @dbName


UPDATE mdr.BIViewColumnInfo
SET ViewID=
	(SELECT ID FROM mdr.BIViewInfo v 
	where v.dbname=mdr.BIViewColumnInfo.dbname and
	v.schemaname=mdr.BIViewColumnInfo.schemaname and
	v.viewname=mdr.BIViewColumnInfo.viewname)
GO
PRINT N'Creating [mdr].[sp_LoadBIDiscinctValues]...';


GO
CREATE Procedure [mdr].[sp_LoadBIDiscinctValues] @dbname varchar(100), @valuecount int as

INSERT INTO [mdr].[RSMLogit] ([RunProcess], RunCharName1, RunChar1) VALUES ('Start sp_LoadBIDiscinctValues','DBName',@dbName)

--mdr.sp_LoadBIDiscinctValues 'RogueWave', 1000

declare @schemaname varchar(50),@tablename varchar(500),@columnname varchar(50),
	@sql varchar(1000),@datatype varchar(50)

-- Zero out values to be set
--delete from BIDistinctValues where dbname=@dbname

-- Declare a cursor for the columns
declare columninfocursor cursor for
select c.dbname,c.schemaname,c.tablename,c.columnname,c.datatype
from mdr.bicolumninfo c,mdr.BITableInfo t
where not c.datatype in ('text','image','bit','binary','uniqueidentifier') and
t.dbname=c.dbname and
t.schemaname=c.schemaname and
t.tablename=c.tablename and
t.dbname = @dbname and
t.NumRows>0 and 
c.DistinctValueCount>1 and
--c.Length<300 and
c.DistinctValueCount<@valuecount -- ajdust as needed
and not exists (select * from mdr.BIDistinctValues v where v.dbname=c.dbname and v.schemaname=c.schemaname and v.TableName=c.TableName and v.columnname=c.columnname)
order by c.tablename,c.columnname
for update

open columninfocursor
fetch next from columninfocursor into @dbname,@schemaname,@tablename,@columnname,@datatype

while @@FETCH_STATUS=0
begin
	-- Create and execute SQL to update distinctvaluecount
	if not @datatype in('decimal','datetime','int','bigint','smallint','float','tinyint','numeric','smalldatetime','money','real')
	begin
		select @sql= 'Insert into mdr.BIDistinctValues select ' + ''''+@dbname+''''+ +','+''''+
			@schemaname+''''+','+''''+@tablename+''''+','+''''+@columnname+''''+', substring("'+
			@columnname+'",1,200), count(*),0 from '+
			@dbname+'.'+@schemaname+'."'+@tablename+
			'" WITH (NOLOCK) group by  substring("'+ @columnname+'",1,200)'
	end
	else
	begin
		select @sql= 'Insert into mdr.BIDistinctValues select ' + ''''+@dbname+''''+ +','+''''+
		@schemaname+''''+','+''''+@tablename+''''+','+''''+@columnname+''''+', "'+
		@columnname+'", count(*),0 from '+
		@dbname+'.'+@schemaname+'."'+@tablename+
		'" WITH (NOLOCK) group by  "'+ @columnname+'"'
	end

	exec (@sql)

	fetch next from columninfocursor into @dbname,@schemaname,@tablename,@columnname,@datatype
end
close columninfocursor
deallocate columninfocursor

UPDATE mdr.BIDistinctValues
SET ColumnID=
	(SELECT ID
	FROM mdr.BIColumnInfo c
	WHERE c.DBName=mdr.BIDistinctValues.DBName and
		c.SchemaName=mdr.BIDistinctValues.SchemaName and
		c.TableName=mdr.BIDistinctValues.TableName and
		c.ColumnName=mdr.BIDistinctValues.ColumnName)

INSERT INTO [mdr].[RSMLogit] ([RunProcess], RunCharName1, RunChar1) VALUES ('End sp_LoadBIDiscinctValues','DBName',@dbName)
GO
PRINT N'Creating [mdr].[sp_LoadBIColumnInfo]...';


GO

CREATE PROCEDURE [mdr].[sp_LoadBIColumnInfo] @dbName VARCHAR(500) AS

INSERT INTO [mdr].[RSMLogit] ([RunProcess], RunCharName1, RunChar1) VALUES ('Start sp_LoadBIColumnInfo','DBName',@dbName)

-- Exec mdr.sp_LoadBIColumnInfo 'RogueWave'
-- Select * from mdr.BiColumnInfo where datatype like '%Date%'

DECLARE @schemaName VARCHAR(50)
DECLARE @tableName VARCHAR(500)
DECLARE @columnName VARCHAR(50)
DECLARE @sql VARCHAR(1000)

-- Declare a cursor for the columns
DECLARE columninfocursor cursor for
	SELECT c.dbname,c.schemaname,c.tablename,c.columnname 
	FROM mdr.BIColumnInfo c, BITableInfo t
	WHERE NOT c.DataType IN ('text','image','bit','uniqueidentifier') AND
	t.DBName = c.DBName AND
	t.SchemaName = c.SchemaName AND
	t.TableName = c.TableName AND
	t.DBName = @dbName AND
	t.NumRows > 0 AND
	c.DistinctValueCount is NULL
FOR UPDATE

OPEN columninfocursor
FETCH NEXT FROM columninfocursor INTO @dbName, @schemaname, @tablename, @columnname

WHILE @@FETCH_STATUS=0
BEGIN
	-- Create and execute SQL to update DistinctValueCount
	SET @sql= 'UPDATE mdr.BIColumnInfo SET DistinctValueCount = (SELECT COUNT(DISTINCT "' + @columnname + '") FROM ' +
		@dbname+'.'+@schemaname+'."' + @tablename +
		'" WITH (NOLOCK)) WHERE DBName = ' + '''' + @dbName + '''' + ' AND ' +
		'SchemaName = ' + '''' + @schemaname + '''' + ' AND ' +
		'TableName = ' + '''' + @tablename + '''' + ' AND ' +
		'ColumnName = ' + '''' + @columnname + ''''

	BEGIN TRY  
    -- Generate divide-by-zero error.  
		exec (@sql)
	END TRY  
	BEGIN CATCH  
		-- Execute error retrieval routine.  
		Select @sql=''
	END CATCH; 
	---- Create and execute SQL to update MaxVal
	--SET @sql= 'UPDATE mdr.BIColumnInfo SET MaxVal = (SELECT MAX("' + @columnname + '") FROM ' +
	--	@dbName + '.' + @schemaname + '."' + @tablename +
	--	'" WITH (NOLOCK)) WHERE DBName = ' + '''' + @dbName + '''' + ' AND ' +
	--	'SchemaName = ' + '''' + @schemaname + '''' + ' AND ' +
	--	'TableName = ' + '''' + @tablename + '''' + ' AND ' +
	--	'ColumnName = ' + '''' + @columnname + ''''
	--BEGIN TRY  
 --   -- Generate divide-by-zero error.  
	--	exec (@sql)
	--END TRY  
	--BEGIN CATCH  
	--	-- Execute error retrieval routine.  
	--	Select @sql=''
	--END CATCH; 

	---- Create and execute SQL to update minval
	--SET @sql= 'UPDATE mdr.BIColumnInfo SET MinVal = (SELECT MIN("' + @columnname+'") FROM '+
	--	@dbName + '.' + @schemaname + '."' + @tablename +
	--	'" WITH (NOLOCK)) WHERE DBName = ' + '''' + @dbName + '''' + ' AND ' +
	--	'SchemaName =' + '''' + @schemaname + '''' + ' AND ' +
	--	'TableName =' + '''' + @tablename + '''' + ' AND ' +
	--	'columnname=' + '''' + @columnname + ''''
	--BEGIN TRY  
 --   -- Generate divide-by-zero error.  
	--	exec (@sql)
	--END TRY  
	--BEGIN CATCH  
	--	-- Execute error retrieval routine.  
	--	Select @sql=''
	--END CATCH; 

	---- Create and execute SQL to update Max Date
	--SET @sql= 'UPDATE mdr.BIColumnInfo SET MaxDate = (SELECT MAX("' + @columnname + '") FROM ' +
	--	@dbName + '.' + @schemaname + '."' + @tablename +
	--	'" WITH (NOLOCK)) WHERE DBName = ' + '''' + @dbName + '''' + ' AND ' +
	--	'SchemaName = ' + '''' + @schemaname + '''' + ' AND ' +
	--	'TableName = ' + '''' + @tablename + '''' + ' AND ' +
	--	'ColumnName = ' + '''' + @columnname + ''''+ ' AND ' +
	--	'DataType like ' +'''' + 'DATE%' + ''''
	--BEGIN TRY  
 --   -- Generate divide-by-zero error.  
	--	exec (@sql)
	--END TRY  
	--BEGIN CATCH  
	--	-- Execute error retrieval routine.  
	--	Select @sql=''
	--END CATCH; 

	---- Create and execute SQL to update NullRowsCount
	--SET  @sql= 'UPDATE mdr.BIColumnInfo SET NullRowsCount = (SELECT COUNT(*) FROM ' +
	--	@dbName + '.' + @schemaname+ '."' + @tablename +
	--	' " WITH (NOLOCK) WHERE "' + @columnname + '" is null) WHERE DBName = ' + '''' + @dbName + '''' + ' AND ' +
	--	'SchemaName = ' + '''' + @schemaname + '''' + ' AND ' +
	--	'TableName = ' + '''' + @tablename + '''' + ' AND ' +
	--	'ColumnName = ' + '''' + @columnname + ''''
	--BEGIN TRY  
 --   -- Generate divide-by-zero error.  
	--	exec (@sql)
	--END TRY  
	--BEGIN CATCH  
	--	-- Execute error retrieval routine.  
	--	Select @sql=''
	--END CATCH; 

	FETCH NEXT FROM columninfocursor INTO @dbName, @schemaname, @tablename, @columnname
end

CLOSE columninfocursor
DEALLOCATE columninfocursor

---- Set the pct of the time each column is null
--UPDATE mdr.BIColumnInfo 
--SET NullPCT=
--((NullRowsCount*1.00)/(SELECT NumRows FROM mdr.BITableInfo r 
--			WHERE mdr.BIColumnInfo.DBName = r.DBName AND
--				mdr.BIColumnInfo.SchemaName = r.SchemaName AND
--				mdr.BIColumnInfo.TableName = r.TableName))*100.00
--WHERE (SELECT NumRows FROM mdr.BITableInfo r 
--		WHERE mdr.BIColumnInfo.DBName = r.DBName AND
--			mdr.BIColumnInfo.SchemaName = r.SchemaName AND
--			mdr.BIColumnInfo.TableName = r.TableName) > 0 AND  DBName = @dbName

-- Set the primary key status
select top 1 @sql=
'update mdr.bicolumninfo 
set pkseq= 
(select max(index_column_id) from '+
mdr.bicolumninfo.dbname + '.sys.indexes i,' + 
mdr.bicolumninfo.dbname + '.sys.objects t,' +
mdr.bicolumninfo.dbname + '.sys.index_columns k,' +
mdr.bicolumninfo.dbname + '.sys.columns c
where c.object_id=t.object_id and
i.object_id=t.object_id and
k.index_id=i.index_id and
k.object_id=t.object_id and
k.column_id=c.column_id and
i.is_primary_key=1 and
c.name=mdr.bicolumninfo.columnname and
t.name=mdr.bicolumninfo.tablename)
where exists
(select * from '+
mdr.bicolumninfo.dbname + '.sys.indexes i,' + 
mdr.bicolumninfo.dbname + '.sys.objects t,' +
mdr.bicolumninfo.dbname + '.sys.index_columns k,' +
mdr.bicolumninfo.dbname + '.sys.columns c
where c.object_id=t.object_id and
i.object_id=t.object_id and
k.index_id=i.index_id and
k.object_id=t.object_id and
k.column_id=c.column_id and
i.is_primary_key=1 and
c.name=mdr.bicolumninfo.columnname and
t.name=mdr.bicolumninfo.tablename)' from mdr.bicolumninfo where dbname=@dbname
EXECUTE (@sql)

Update mdr.BIColumnInfo
set ColumnCount= null

Update mdr.BIColumnInfo
set ColumnCount=
(select COUNT(*) from mdr.BIColumnInfo C
where C.DBName=mdr.BIColumnInfo.DBName and
C.SchemaName=mdr.BIColumnInfo.SchemaName and
C.ColumnName=mdr.BIColumnInfo.ColumnName and
--C.TableName<>mdr.mdr.BIColumnInfo.TableName and
C.DistinctValueCount>0)
where DistinctValueCount>0

Update mdr.BITableInfo
set ColCount=
	isnull((select COUNT(*) 
	from mdr.BIColumnInfo c
	where c.DBName=mdr.BITableInfo.DBName and
	c.SchemaName=mdr.BITableInfo.SchemaName and
	c.TableName=mdr.BITableInfo.TableName),0)

Update mdr.BITableInfo
set PopColCount=
	isnull((select COUNT(*) 
	from mdr.BIColumnInfo c
	where c.DBName=mdr.BITableInfo.DBName and
	c.SchemaName=mdr.BITableInfo.SchemaName and
	c.TableName=mdr.BITableInfo.TableName and
	c.DistinctValueCount>1),0)
	
Update mdr.BIColumnInfo
set Description='NA', ETLNotes='NA'
where DistinctValueCount<=1

-- Set the maxdate for the table
UPDATE mdr.BITableInfo
SET MaxDate=
	(SELECT MAX(MaxDate)
	FROM mdr.BIColumnInfo c
	WHERE c.TableName=mdr.BITableInfo.TableName AND
	c.DataType LIKE 'DATE%')

INSERT INTO [mdr].[RSMLogit] ([RunProcess], RunCharName1, RunChar1) VALUES ('End sp_LoadBIColumnInfo','DBName',@dbName)
GO
PRINT N'Creating [mdr].[sp_BuildViewColumnInfo]...';


GO
CREATE PROCEDURE [mdr].[sp_BuildViewColumnInfo] @dbName VARCHAR(500) AS

-- Exec mdr.sp_BuildViewColumnInfo 'IonisDW'

DECLARE @sql VARCHAR(1000)
 
--Delete previous column load info from supplied dbName
DELETE FROM  mdr.BIViewColumnInfo WHERE dbname= @dbName
--Reload column info.
SET @sql = 'INSERT INTO mdr.BIViewColumnInfo(DBName, SchemaName, ViewName, ColumnName, DataType, [Length], Scale, [Precision], Colorder,Object_id) '
SET @sql = @sql + 'SELECT ' + '''' + @dbName + '''' + ', s.name, o.name, c.name, t.name, c.length,c.xscale,c.xprec,c.colid,o.id  ' 
SET @sql = @sql + 'FROM ' + @dbName + '.sys.sysobjects o, ' + @dbName + '.sys.syscolumns c, ' + @dbName + '.sys.types t, ' + @dbName + '.sys.schemas s, ' 
SET @sql = @sql + 'mdr.BIViewInfo B WHERE o.xtype  = ' + '''' + 'V' + '''' + ' AND s.[schema_id] = o.uid AND c.id = o.id AND t.user_type_id = c.xtype AND '
SET @sql = @sql + 'b.ViewName collate database_default=o.name AND b.DBName collate database_default= ' + '''' + @dbName + '''' + ' AND b.SchemaName collate database_default=s.name ORDER BY o.name,c.colid, c.name'
EXEC (@sql)
--SELECT @sql
-- Repeat the column name initially
UPDATE mdr.BIViewColumnInfo SET newcolumnname=columnname WHERE dbname= @dbName
------DELETE Text, Image and NText datatypes
DELETE FROM mdr.BIViewColumnInfo WHERE datatype IN ('Text','Image','NText') AND dbname = @dbName
GO
PRINT N'Creating [mdr].[sp_BuildColumnInfo]...';


GO
CREATE PROCEDURE [mdr].[sp_BuildColumnInfo] @dbName VARCHAR(500) AS

INSERT INTO [mdr].[RSMLogit] ([RunProcess], RunCharName1, RunChar1) VALUES ('Start sp_BuildColumnInfo','DBName',@dbName)

-- Exec mdr.sp_BuildColumnInfo 'GayLea'

DECLARE @sql VARCHAR(1000)
DECLARE @tblName VARCHAR(500)
DECLARE @tblID int

--Delete previous column load info from supplied dbName
DELETE FROM  mdr.BIColumnInfo WHERE dbname= @dbName
--Reload column info.
SET @sql = 'INSERT INTO mdr.BIColumnInfo(DBName, SchemaName, TableName, ColumnName, DataType, [Length], Scale, [Precision], Colorder) '
SET @sql = @sql + 'SELECT ' + '''' + @dbName + '''' + ', s.name, o.name, c.name, t.name, c.length,c.xscale,c.xprec,c.colid ' 
SET @sql = @sql + 'FROM ' + @dbName + '.sys.sysobjects o, ' + @dbName + '.sys.syscolumns c, ' + @dbName + '.sys.types t, ' + @dbName + '.sys.schemas s, ' 
SET @sql = @sql + 'mdr.BITableInfo B WHERE o.xtype = ' + '''' + 'U' + '''' + ' AND s.[schema_id] = o.uid AND c.id = o.id AND t.user_type_id = c.xtype AND '
SET @sql = @sql + 'b.TableName=o.name AND b.DBName= ' + '''' + @dbName + '''' + ' AND b.SchemaName=s.name ORDER BY o.name,c.colid, c.name'
EXECUTE (@sql)
-- Repeat the column name initially
UPDATE mdr.BIColumnInfo SET newcolumnname=columnname WHERE dbname= @dbName
--DELETE Text, Image and NText datatypes
DELETE FROM mdr.BIColumnInfo WHERE datatype IN ('Text','Image','NText') AND dbname = @dbName

UPDATE mdr.BIColumnInfo
SET TableID=
(SELECT ID 
FROM mdr.BITableInfo t
where t.DBName=BIColumnInfo.DBName and
	t.SchemaName=BIColumnInfo.SchemaName and
	t.TableName=BIColumnInfo.TableName)

INSERT INTO [mdr].[RSMLogit] ([RunProcess], RunCharName1, RunChar1) VALUES ('End sp_BuildColumnInfo','DBName',@dbName)
GO
PRINT N'Creating [mdr].[sp_BIDependencies]...';


GO
CREATE PROCEDURE [mdr].[sp_BIDependencies] @dbName VARCHAR(500) AS

INSERT INTO [mdr].[RSMLogit] ([RunProcess], RunCharName1, RunChar1) VALUES ('Start sp_BIDependencies','DBName',@dbName)

-- Exec mdr.[sp_BIDependencies] 'RogueWave'
-- SELECT * FROM mdr.BIDependencies where dbname='RogueWave'
 
DECLARE @sql VARCHAR(max)

DELETE FROM mdr.BIDependencies
WHERE DBName = @dbName

--drop table BIDependencies
SET @sql=
'INSERT  INTO mdr.BIDependencies select '+ '''' + @dbname  + '''' + ' as DBname, d.object_id,
o.name as ObjectName,o.type_desc as ObjectType, t.name as TableName,t.type_desc as TableType,
c.name as ColumnName,d.is_select_all as IS_SELECTED_ALL,d.is_updated as IS_UPDATED,d.is_selected as IS_SELECTED
from ' + @dbname + '.sys.sql_dependencies d
left join ' + @dbname + '.sys.objects o on o.object_id=d.object_id
left join ' + @dbname + '.sys.objects t on t.object_id=d.referenced_major_id
left join ' + @dbname + '.sys.all_columns c on c.object_id=t.object_id and c.column_id=d.referenced_minor_id'

--select * from sys.sql_dependencies where object_id=770101784
--select * from sys.objects where name like 'sp%fct%'

EXECUTE (@sql)

UPDATE mdr.BITableInfo
SET NumberOfDependencies=
	ISNULL((SELECT COUNT(DISTINCT ObjectName)
	FROM mdr.BIDependencies d
	WHERE d.DBname=BITableInfo.DBName and
		d.ReferencedObject=BITableInfo.TableName),0)

INSERT INTO [mdr].[RSMLogit] ([RunProcess], RunCharName1, RunChar1) VALUES ('End sp_BIDependencies','DBName',@dbName)
GO
PRINT N'Creating [mdr].[SearchEverything]...';


GO
CREATE PROCEDURE [mdr].[SearchEverything] as
DECLARE @SEARCHSTRING VARCHAR(255), @notcontain Varchar(255)
SELECT @SEARCHSTRING = 'LedgerAccountStructureStaging', @notcontain = '' -- Change search screen to what you want to look for
SELECT DISTINCT sysobjects.name AS [Object Name] ,
case when sysobjects.xtype = 'P' then 'Stored Proc'
when sysobjects.xtype = 'TF' then 'Function'
when sysobjects.xtype = 'TR' then 'Trigger'
when sysobjects.xtype = 'V' then 'View'
end as [Object Type],*
FROM sysobjects,syscomments
WHERE sysobjects.id = syscomments.id
AND sysobjects.type in ('P','TF','TR','V') -- Limits where to look
AND sysobjects.category = 0
AND CHARINDEX(@SEARCHSTRING,syscomments.text)>0
AND ((CHARINDEX(@notcontain,syscomments.text)=0 
or CHARINDEX(@notcontain,syscomments.text)<>0))
GO
PRINT N'Creating [mdr].[LoadBIViewDiscinctValues]...';


GO
CREATE Procedure [mdr].[LoadBIViewDiscinctValues] @dbname varchar(100), @valuecount int as

--mdr.LoadBIViewDiscinctValues 'AxDB', 10000

declare @schemaname varchar(50),@Viewname varchar(50),@columnname varchar(50),
	@sql varchar(1000),@datatype varchar(50)

-- Zero out values to be set
delete from mdr.BIViewDistinctValues where dbname=@dbname
--select * from mdr.BIViewDistinctValues

-- Declare a cursor for the columns
declare columninfocursor cursor for
select c.dbname,c.schemaname,c.Viewname,c.columnname,c.datatype
from mdr.biViewcolumninfo c,mdr.BIViewInfo t
where not c.datatype in ('text','image','bit','binary','uniqueidentifier') and
t.dbname=c.dbname and
t.schemaname=c.schemaname and
t.Viewname=c.Viewname and
t.dbname = @dbname and
t.NumRows>0 and 
c.DistinctValueCount>1 and
c.Length<10000 and
c.DistinctValueCount<@valuecount -- ajdust as needed
and not exists (select * from mdr.BIViewDistinctValues v where v.dbname=c.dbname and v.schemaname=c.schemaname and v.ViewName=c.ViewName and v.columnname=c.columnname)
order by c.Viewname,c.columnname
for update

open columninfocursor
fetch next from columninfocursor into @dbname,@schemaname,@Viewname,@columnname,@datatype

while @@FETCH_STATUS=0
begin
	-- Create and execute SQL to update distinctvaluecount
	if not @datatype in('decimal','datetime','int','smallint','float','tinyint','numeric','smalldatetime','money','real','bigint')
	begin
		select @sql= 'Insert into mdr.BIViewDistinctValues select ' + ''''+@dbname+''''+ +','+''''+
			@schemaname+''''+','+''''+@Viewname+''''+','+''''+@columnname+''''+', substring("'+
			@columnname+'",1,200), 0, count(*) from '+
			@dbname+'.'+@schemaname+'."'+@Viewname+
			'" group by  substring("'+ @columnname+'",1,200)'
	end
	else
	begin
		select @sql= 'Insert into mdr.BIViewDistinctValues select ' + ''''+@dbname+''''+ +','+''''+
		@schemaname+''''+','+''''+@Viewname+''''+','+''''+@columnname+''''+', "'+
		@columnname+'", 0, count(*) from '+
		@dbname+'.'+@schemaname+'."'+@Viewname+
		'" group by  "'+ @columnname+'"'
	end

	--select @sql
	exec (@sql)
	--break
	fetch next from columninfocursor into @dbname,@schemaname,@Viewname,@columnname,@datatype
end
close columninfocursor
deallocate columninfocursor

UPDATE mdr.BIViewDistinctValues
SET ViewColumnID=
	(SELECT v.ID
	FROM BIViewColumnInfo v
	WHERE v.dbname=BIViewDistinctValues.dbname and
	v.schemaname=BIViewDistinctValues.schemaname and
	v.viewname=BIViewDistinctValues.viewname and
	v.ColumnName=BIViewDistinctValues.ColumnName)

--mdr.LoadBIDiscinctValues 'OMNIA_EIOC_P_IOC_CM'
GO
PRINT N'Creating [mdr].[FindBIDiscinctValues]...';


GO
CREATE Procedure [mdr].[FindBIDiscinctValues] @dbname varchar(100),@datatype varchar(50),@length int, @value varchar(200) as

--FindBIDiscinctValues 'OMNIA_EIOC_P_IOC_CM','NVarchar',40,'CIC/OCN Exception'

declare @schemaname varchar(50),@tablename varchar(50),@columnname varchar(50),
	@sql varchar(1000)

-- Declare a cursor for the columns
declare columninfocursor cursor for
select c.dbname,c.schemaname,c.tablename,c.columnname 
from mdr.bicolumninfo c,mdr.BITableInfo t
where c.datatype =@datatype and
c.length=@length and
t.dbname=c.dbname and
t.schemaname=c.schemaname and
t.tablename=c.tablename and
t.dbname = @dbname and
t.NumRows>0 and
t.NumRows<1000000 and
c.DistinctValueCount>99 -- the others are in distinct value table
for update

truncate table mdr.BIFindDistinctValues

open columninfocursor
fetch next from columninfocursor into @dbname,@schemaname,@tablename,@columnname

while @@FETCH_STATUS=0
begin
	-- Create and execute SQL to update distinctvaluecount
	select @sql= 'insert into mdr.BIFindDistinctValues select distinct ' + ''''+@dbname+''''+ +','+''''+
		@schemaname+''''+','+''''+@tablename+''''+','+''''+@columnname+''''+',"'+
		@columnname+'" from '+
		@dbname+'.'+@schemaname+'."'+@tablename+
		'" where  "'+ @columnname+'"='+''''+@value+''''

--	select @sql
	exec (@sql)
--	break
	fetch next from columninfocursor into @dbname,@schemaname,@tablename,@columnname
end
close columninfocursor
deallocate columninfocursor
GO
PRINT N'Creating [mdr].[EmptyDB]...';


GO
CREATE procedure [mdr].[EmptyDB] as
truncate table mdr.BIColumnInfo
truncate table mdr.BIDistinctValues
truncate table mdr.BIFindDistinctValues
truncate table mdr.BIForeignKeyInfo
truncate table mdr.BITableInfo
GO
PRINT N'Creating [research].[CompoundGeneTerms_Create]...';


GO
CREATE procedure research.CompoundGeneTerms_Create
AS
BEGIN
-- SET NOCOUNT ON
/* Drop Indexes Tables */    
DROP INDEX IF EXISTS idx_CompoundTerm_CompoundGeneTerms ON research.CompoundGeneTerms
DROP INDEX IF EXISTS idx_CompoundNumber_CompoundGeneTerms ON research.CompoundGeneTerms
DROP INDEX IF EXISTS idx_EnsemblID_CompoundGeneTerms ON research.CompoundGeneTerms
DROP INDEX IF EXISTS idx_GeneTerm_CompoundGeneTerms ON research.CompoundGeneTerms

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[research].[CompoundGeneTerms]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [research].[CompoundGeneTerms]


/* Create Tables */

CREATE TABLE [research].[CompoundGeneTerms]
(
	[CompoundNumber] varchar(50) NULL,
	[CompoundTerm] varchar(50) NULL,
	[CompoundTermType] varchar(50) NULL,
	[CompoundTermStatus] varchar(50) NULL,
	[EnsemblID] varchar(50) NULL,
	[Species] varchar(50) NULL,
	[TargetType] varchar(50) NULL,
	[TargetObsolete] bit NULL,
	[GeneTerm] varchar(1000) NULL,
	[GeneTermType] varchar(50) NULL,
	[GeneTermStatus] varchar(50) NULL,
	[CompoundGeneTermsID] int IDENTITY(1,1) NOT NULL
)

-- delete from research.CompoundGeneTerms
INSERT INTO research.CompoundGeneTerms (CompoundNumber
    , EnsemblID
    , Species
    , TargetType
    , TargetObsolete
    , CompoundTerm
    , CompoundTermType
    , CompoundTermStatus 
    , GeneTerm
    , GeneTermType
    , GeneTermStatus)
    (SELECT cgn.CompoundNumber
        , cgn.EnsemblID
        , cgn.Species
        , cgn.TargetType
        , cgn.TargetObsolete
        , cgn.CompoundTerm
        , cgn.CompoundTermType
        , cgn.CompoundTermStatus 
        , gss.GeneTerm
        , gss.GeneTermType
        , gss.GeneTermStatus
        FROM    
            (SELECT DISTINCT cg.CompoundNumber
                , cg.EnsemblID
                , cg.SpeciesName as Species
                , cg.TargetType
                , cg.Obsolete as TargetObsolete
                , cn.CompoundName as CompoundTerm
                , cn.CompoundNameType as CompoundTermType
                , cn.CompoundNameStatus as CompoundTermStatus
            FROM research.CompoundGenes as cg
            INNER JOIN
                research.CompoundNames as cn 
                ON cg.CompoundNumber = cn.CompoundNumber) as cgn
            LEFT JOIN 
                (SELECT gs.EnsemblID
                    , gs.GeneSymbol as GeneTerm
                    , 'GeneSymbol' as GeneTermType
                    , gs.GeneSymbolStatus as GeneTermStatus
                FROM research.GeneSymbols as gs
                WHERE GeneSymbol != 'No Synonyms'
                UNION
                SELECT gn.EnsemblID
                    , gn.GeneName as GeneTerm
                    , 'GeneName' as GeneTermType
                    , gn.GeneNameStatus as GeneTermStatus
                FROM research.GeneNames as gn) as gss
                ON gss.EnsemblID = cgn.EnsemblID)





/* Create Primary Keys, Indexes, Uniques, Checks */

CREATE NONCLUSTERED INDEX [idx_CompoundTerm_CompoundGeneTerms] 
 ON [research].[CompoundGeneTerms] ([CompoundTerm] ASC)


CREATE NONCLUSTERED INDEX [idx_CompoundNumber_CompoundGeneTerms] 
 ON [research].[CompoundGeneTerms] ([CompoundNumber] ASC)


CREATE NONCLUSTERED INDEX [idx_EnsemblID_CompoundGeneTerms] 
 ON [research].[CompoundGeneTerms] ([EnsemblID] ASC)


CREATE NONCLUSTERED INDEX [idx_GeneTerm_CompoundGeneTerms] 
 ON [research].[CompoundGeneTerms] ([GeneTerm] ASC)

DELETE FROM research.CompoundGeneTerms 
WHERE CompoundGeneTermsID IN
    (select c.InferredID FROM
        (SELECT a.CompoundNumber
            , a.CompoundTerm
            , a.EnsemblID
            , a.TargetType
            , a.GeneTerm
            , a.GeneTermStatus
            , a.CompoundGeneTermsID
            , b.CompoundGeneTermsID InferredID
        FROM research.CompoundGeneTerms a 
        INNER JOIN research.CompoundGeneTerms b
        ON a.CompoundNumber = b.CompoundNumber AND 
            a.CompoundTerm = b.CompoundTerm AND
            a.EnsemblID = b.EnsemblID AND 
            a.GeneTerm = b.GeneTerm
        WHERE a.TargetType = 'intended'
            AND b.TargetType = 'inferred') c)

END

-- exec research.CompoundGeneTerms_Create
GO
PRINT N'Creating [dbo].[BoomiSelectInClause]...';


GO
CREATE PROCEDURE [dbo].[BoomiSelectInClause]

/*
Creator: Daniel Silva
Create Date: 10/1/2020
Description: This procedure is to be used for Boomi process that need to execute an IN clause. 
*/
    @Fields NVARCHAR(256),
    @Table NVARCHAR(256),
    @Var varchar(256),--you may have to chunk your calls if your variable hits this length limit DSilva10/1/2020
    @Where NVARCHAR(256)
AS
BEGIN TRY
    Declare @sql as Nvarchar(4000);
    create table Temp_Table
    (
        ID varchar(256)
    );
    insert into Temp_Table
        (ID)
    values
        (@var);

    set @sql = 'SELECT ' + @Fields + ' FROM ' + @Table + ' WHERE ' + @Where + ' IN
(select value from Temp_Table cross apply string_split(ID, '',''))';
    exec sp_executesql @sql, N'';
    drop table Temp_Table;
END TRY
BEGIN CATCH
PRINT 'In catch block.';
THROW;
drop table Temp_Table;
END CATCH;
GO
PRINT N'Creating [dbo].[CompoundsAndGeneSymbols_Recreate]...';


GO

CREATE  PROCEDURE [dbo].[CompoundsAndGeneSymbols_Recreate]
AS
/*
    -- *************************************
    --  Deletes the existing derived table CompoundsAndGeneSymbols if it exists, then recreates it.
    --  See also:  Stored procedure in DataMart db to apply indices after table copy from here
    --  Intended use:  Monthly refresh of uber table for compounds and genes. Derived from other base tables in this db.
    --  After running this procedure, the resulting table will need to copied to the DataMart db (replacing the existing table)
    --  Warning:  This procedure will run for many minutes, and will consume much of the database CPU/resources while running.
    --  Author:  John O'Neill
    --  Modified: 11/13/2019.
    -- *************************************
*/
IF EXISTS(SELECT 1 FROM sys.Objects 
    WHERE  Object_id = OBJECT_ID(N'dbo.CompoundsAndGeneSymbols') 
           AND Type = N'U')
BEGIN
  DROP TABLE dbo.CompoundsAndGeneSymbols
END
    SET ANSI_NULLS ON;
SET QUOTED_IDENTIFIER ON

/*
CREATE TABLE [dbo].[CompoundsAndGeneSymbols](
	[compound_num] [varchar](50) NOT NULL,
	[term] [varchar](100) NOT NULL,
	[term_type] [varchar](50) NOT NULL,
	[target_type] [varchar](50) NULL,
	[status] [varchar](50) NOT NULL,
	[gene_symbol_status] [varchar](50) NULL,
	[gene_symbol] [varchar](50) NOT NULL,
	[ensembl_id] [varchar](100) NOT NULL,
	[species] [varchar](256) NOT NULL
) ON [PRIMARY]
*/

-- Qu.  do we need to temporarily boost the Azure db resource setting to increase performance during this bulk load?

SELECT 
cg.compound_num
,ct.term
,CASE
    when term_type = 'aso_num' then 'aso_number'
    else term_type
end as term_type
, cg.target_type
,[status]
,gs.gene_symbol_status
,gs.gene_symbol
,cg.ensembl_id
, cg.species

 INTO CompoundsAndGeneSymbols

FROM   (SELECT sy.compound_num, sy.compound_name 'term', sy.compound_name_type 'term_type', sy.compound_name_status 'status'
    FROM dbo.mdm_compound_names sy
UNION 
    SELECT sy.compound_num, sy.compound_num 'term', 'aso_number' 'term_type', 'current' 'status'
    FROM dbo.mdm_compound_names sy) as ct 

INNER JOIN [dbo].mdm_compound_genes as cg  on ct.compound_num = cg.compound_num
INNER JOIN mdm_gene_symbols as gs on cg.ensembl_id = gs.ensembl_id
GO
PRINT N'Creating [dbo].[PubsRecordCompoundsAndTargetsWrite]...';


GO

/*
    -- *************************************
    --  Saves PubsRecordCompound.CoumpoundNumber
    --  Additionally, if the ensembl_id parameter value is not 'No Isis Data',also insert a new PubsRecordTarget record (saving Ensembl_ID and Selected gene term)
    --  Intended use:  Boomi's import from Pubs changed records
    --  Contact     :  John O'Neill
    --  Modified    :  4/21/2020.  Initial save
    -- *************************************
*/
CREATE Procedure  [dbo].[PubsRecordCompoundsAndTargetsWrite]
(
     @pubsKey int
   , @ensembl_id VARCHAR(50)
    ,@compound_number VARCHAR(50)
    ,@geneTerm VARCHAR(50)
)
WITH EXECUTE AS N'dbo'
	AS
 BEGIN


 SET NOCOUNT ON
 
-- Save new compound value
IF NOT Exists(SELECT TOP 1 * from dbo.PubsRecordCompound where PubsKey = @pubsKey AND CompoundNumber = @compound_number)
BEGIN
    INSERT INTO dbo.PubsRecordCompound (PubsKey, CompoundNumber) VALUES (@pubsKey,TRIM(@compound_number))
END


-- If the ensembl_id is not 'No Isis Data', create a PusbRecordTarget record
IF (@ensembl_id !='No Isis Data')--  OR @geneTerm like 'No Symbol%')
BEGIN
    IF NOT Exists(SELECT TOP 1 * from dbo.PubsRecordTarget where PubsKey = @pubsKey AND Ensembl_Id = @ensembl_id)
    BEGIN
        INSERT INTO dbo.PubsRecordTarget(PubsKey, Ensembl_Id, SelectedTerm) VALUES(@pubsKey, @ensembl_id, @geneTerm)
    END
END-- Ensembl_id was not No Isis Data


END
GO
PRINT N'Creating [dbo].[RecreateCompoundTermsTbl]...';


GO

CREATE  PROCEDURE [dbo].[RecreateCompoundTermsTbl]
AS
/*
    -- *************************************
    --  Deletes all rows in the derived 'mdm_compound_termsTbl' table (used in Pubs API lookups), and then recreates it
    --  See also:  Stored procedure RefreshPubsApiTables.
    --  Intended use:  Usually called from the stored procedure RefreshPubsApiTables, which will check for last modification dates before runnning this long process.
    --  Author:  John O'Neill
    --  Modified: 11/13/2019.
    -- *************************************
*/
IF EXISTS(SELECT 1 FROM sys.Objects 
    WHERE  Object_id = OBJECT_ID(N'dbo.mdm_compound_termsTbl') 
           AND Type = N'U')
BEGIN
  DROP TABLE dbo.mdm_compound_termsTbl
END
    SET ANSI_NULLS ON;
SET QUOTED_IDENTIFIER ON

CREATE TABLE [dbo].[mdm_compound_termsTbl](
	[compound_num] [varchar](50) NOT NULL,
	[term] [varchar](100) NOT NULL,
	[gene_symbol] [varchar](50) NOT NULL,
	[ensembl_id] [varchar](100) NOT NULL,
	[species] [varchar](100) NOT NULL,
	[term_type] [varchar](50) NOT NULL,
	[status] [varchar](50) NOT NULL,
	[DateCreated] [datetime] NOT NULL
) ON [PRIMARY]

--SET ANSI_PADDING ON
--GO
--CREATE NONCLUSTERED INDEX [idx_compound_compoundtermsTbl] ON [dbo].[mdm_compound_termsTbl]
--(
--	[compound_num] ASC
--)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF) ON [PRIMARY]
--GO
--SET ANSI_PADDING ON
--GO
--CREATE NONCLUSTERED INDEX [idx_ensembl_compoundtermsTbl] ON [dbo].[mdm_compound_termsTbl]
--(
--	[ensembl_id] ASC
--)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF) ON [PRIMARY]
--GO
SET ANSI_PADDING ON

CREATE NONCLUSTERED INDEX [idx_gene_compoundtermsTbl] ON [dbo].[mdm_compound_termsTbl]
(
	[gene_symbol] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF) ON [PRIMARY]

SET ANSI_PADDING ON

CREATE NONCLUSTERED INDEX [idx_term_compoundtermsTbl] ON [dbo].[mdm_compound_termsTbl]
(
	[term] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF) ON [PRIMARY]

--ALTER TABLE [dbo].[mdm_compound_termsTbl] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
PRINT N'Creating [dbo].[RefreshCompoundTermsTbl]...';


GO

CREATE  PROCEDURE [dbo].[RefreshCompoundTermsTbl]
AS
/*
    -- *************************************
    --  Deletes all rows in the derived 'mdm_compound_termsTbl' table (used in Pubs API lookups), and then repopulates rows from the underlying source tables.
    --  See also:  Stored procedure RefreshPubsApiTables.
    --  Intended use:  Usually called from the stored procedure RefreshPubsApiTables, which will check for last modification dates before runnning this long process.
    --  Author:  John O'Neill
    --  Modified: 10/30/2019.
    -- *************************************
*/
DELETE FROM dbo.mdm_compound_termsTbl;

INSERT INTO dbo.mdm_compound_termsTbl (compound_num,term,term_type, [status],[gene_symbol], ensembl_id, species)


SELECT
cg.compound_num
,ct.term
, cg.target_type as 'term_type'
,gs.gene_symbol_status as 'status'
,gs.gene_symbol
,cg.ensembl_id
, cg.species
FROM   (SELECT sy.compound_num, sy.compound_name 'term', sy.compound_name_type 'term_type', sy.compound_name_status 'status'
    FROM dbo.mdm_compound_names sy) as ct -- see view mdm_compound_terms

INNER JOIN [dbo].mdm_compound_genes as cg  on ct.compound_num = cg.compound_num --AND ct.[status] = 'current'

INNER JOIN mdm_gene_symbols as gs on cg.ensembl_id = gs.ensembl_id
GO
PRINT N'Creating [dbo].[sp_LoadPLStage]...';


GO

CREATE proc [dbo].[sp_LoadPLStage]
as
Truncate table PLStage
insert into PLStage

select distinct [TOTALINGMAINACCOUNTID] TotalingAccount
			,ms.name TotalingAccountDescription
			,ae.COMPONENTMAINACCOUNTID MainAccount
			,DA.AccountKey
			,dd.DepartmentKey
			,dd.DepartmentNumber  FROM [dbo].[vwtotalingAccountExplosion] AE
		left join [MainAccountStaging] ms on ms.MAINACCOUNTID = ae.[TOTALINGMAINACCOUNTID]
		left join [MainAccountStaging] ms2 on ms2.MAINACCOUNTID = ae.COMPONENTMAINACCOUNTID
		join DimAccount da on da.MainAccountNumber = COMPONENTMAINACCOUNTID
		left join FactTransaction ft on ft.AccountKey =da.AccountKey
		JOIN DimDepartment DD on DD.DepartmentKey = ft.DepartmentKey
		and DepartmentNumber != 'FACILITIES'
		WHERE len(ae.COMPONENTMAINACCOUNTID) = 4
GO
PRINT N'Creating [dbo].[spD365Security]...';


GO

CREATE PROCEDURE [dbo].[spD365Security] as

--select * from D365Security where NetworkAlias like 'jp%'
--select * from D365Admins
--jprasad@ionisph.com	All
--delete from D365Admins where NetworkAlias like 'jp%'

-- Rebuild D365 Security
truncate table D365Security

UPDATE ionisusers set entity='IONS' where ENTITy='IONIS'

insert into D365Security
select Entity, 
	username+'@'+
		case when entity='IONS' then 'ionisph.com' else 'akceatx.com' end,
		departmentid,null,null,null
from ionisusers

update D365Security
set DepartmentKey = (SELECT DepartmentKey FROM DimDepartment where DepartmentNumber=D365Security.Department)

update D365Security
set EntityKey = (SELECT EntityKey FROM DimEntity where EntityID=D365Security.Entity)

update D365Security
set SecurityKey = (SELECT SecurityMasterID 
					FROM D365SecurityMaster sm 
					where sm.departmentkey=D365Security.DepartmentKey and sm.entitykey=D365Security.EntityKey)

-- Delete any Admin records that may have already been entered
DELETE FROM D365Security WHERE NetworkAlias in (SELECT NetworkAlias FROM D365Admins)

-- Load Admins
insert into D365Security
select dsm.EntityID,dma.NetworkAlias, dsm.DepartmentNumber,dsm.EntityKey,dsm.DepartmentKey,dsm.SecurityMasterID
from D365SecurityMaster dsm, D365Admins dma
WHERE dma.Entity='All'

insert into D365Security
select dsm.EntityID,dma.NetworkAlias, dsm.DepartmentNumber,dsm.EntityKey,dsm.DepartmentKey,dsm.SecurityMasterID
from D365SecurityMaster dsm, D365Admins dma
WHERE dma.Entity='Akcea' and dsm.EntityID LIKE 'AK%'

-- Special code for Susan Readman
insert into D365Security
select dsm.EntityID,'SReadman@ionisph.com' as NetworkAlias, dsm.DepartmentNumber,dsm.EntityKey,dsm.DepartmentKey,dsm.SecurityMasterID
from D365SecurityMaster dsm
WHERE dsm.DepartmentNumber>='685' and dsm.DepartmentNumber<='795' and NOT dsm.DepartmentNumber='699' -- Exclude MFG



insert into D365Security
select entity,'KBurinskas@ionisph.com',Department,EntityKey,DepartmentKey,SecurityKey from D365Security
where NetworkAlias like '%ahug%'
and entity = 'ions'
and Department = '540'

union all

select entity,'BTruong@ionisph.com',Department,EntityKey,DepartmentKey,SecurityKey from D365Security
where NetworkAlias like '%ahug%'
and entity = 'ions'
and Department = '290'
GO
PRINT N'Creating [dbo].[spD365SecurityMaster]...';


GO
CREATE PROCEDURE spD365SecurityMaster as

-- Rebuild security master
TRUNCATE TABLE D365SecurityMaster
INSERT INTO D365SecurityMaster
SELECT DISTINCT d.DepartmentNumber,d.DepartmentKey,e.EntityID,e.EntityKey 
FROM DimDepartment d, DimEntity e
GO
PRINT N'Creating [dbo].[spDimAccount]...';


GO

--select * from DimAccount where MainAccountNumber = '9307'



CREATE PROCEDURE  [dbo].[spDimAccount] as
/****** Script for SelectTopNRows command from SSMS  ******/
TRUNCATE TABLE DimAccount

INSERT INTO dimaccount
( [MainAccountNumber]
      ,[MainAccountDescription]
      ,[MainAccountNumberDescription]
      ,[MainAccountDescriptionNumber]
      ,[MainAccountType]
      ,[MainAccountCategoryDescription]
      ,[level5]
      ,[level5Description]
      ,[level4]
      ,[level4Description]
      ,[level3]
      ,[level3Description]
      ,[Level2]
      ,[Level2Description]
      ,[Level1]
      ,[Level1Description]
      ,[IsGAAP]
      ,[IsControlled]
      ,[IsFTE]
      ,[PARTITION]
      ,[IsActive])
SELECT distinct MainAccountNumber,MainAccountDescription,MainAcountNumberDescription MainAccountNumberDescription, MainAccountDescriptionNumber
,MainAccountType,MainAccountCategoryDescription
		,case when level5 is not null then level5  
				when level4 is not null and level5 is null then level4
				when level3 is not null and level5 is null and level4 is null then level3
				when level2 is not null and level5 is null and level4 is null and level3 is null then level2
				when level5 is null and level4 is null and level3 is null and level2 is null then level1 end level5
			,case when level5 is not null then Level5Description
				when level4 is not null and level5 is null then level4Description
				when level3 is not null and level5 is null and level4 is null then level3Description
				when level2 is not null and level5 is null and level4 is null and level3 is null then level2Description
				when level5 is null and level4 is null and level3 is null and level2 is null then level1Description end level5Description
			,case  when level5 is not null then level4
					when level5 is null and level4 is not null then level3
					when level5 is null and level4 is null and level3 is not null then level2
					when level5 is null and level4 is null and level3 is null then level1
					when level3 is null then level1	 end level4
			,case  when level5 is not null then level4Description
					when level5 is null and level4 is not null then level3Description
					when level5 is null and level4 is null and level3 is not null then level2Description
					when level5 is null and level4 is null and level3 is null then level1Description
					when level3 is null then level1	 end level4Description
			,case when level5 is not null then level3
				when level4 is not null then level2
				when level3 is not null then level1 end level3
			,case when level5 is not null then level3Description
				when level4 is not null then level2Description
				when level3 is not null then level1Description end level3Description
			,case when level5 is not null then level2 
				when level4 is not null then level1 end Level2
			,case when level5 is not null then level2Description 
				when level4 is not null then level1Description end Level2Description
			,case when level5 is not null then level1 end Level1
			,case when level5 is not null then level1Description end Level1Description
			,IsGAAP
			,IsControlled
			,IsFTE
			,PARTITION
			,IsActive
		FROM(
	SELECT a.[MAINACCOUNTID] MainAccountNumber
		,a.[NAME] MainAccountDescription
		,CONCAT (
			a.[MAINACCOUNTID]
			,' - '
			,a.[NAME]
			) MainAcountNumberDescription
		,CONCAT (
			a.[NAME]
			,' ('
			,a.[MAINACCOUNTID]
			,')'
			) MainAccountDescriptionNumber
		,CASE 
			WHEN a.MAINACCOUNTTYPE = 0
				THEN 'Profit and loss'
			WHEN a.MAINACCOUNTTYPE = 1
				THEN 'Revenue'
			WHEN a.MAINACCOUNTTYPE = 2
				THEN 'Cost'
			WHEN a.MAINACCOUNTTYPE = 3
				THEN 'Balance'
			WHEN a.MAINACCOUNTTYPE = 4
				THEN 'Asset'
			WHEN a.MAINACCOUNTTYPE = 5
				THEN 'Liability'
			WHEN a.MAINACCOUNTTYPE = 6
				THEN 'Header'
			WHEN a.MAINACCOUNTTYPE = 7
				THEN 'Empty header'
			WHEN a.MAINACCOUNTTYPE = 8
				THEN 'Page header'
			END MainAccountType
		,a.[ACCOUNTCATEGORYDESCRIPTION] MainAccountCategoryDescription
		,[Level1] Level1
		,l1.NAME Level1Description
		,[Level2] Level2
		,l2.NAME Level2Description
		,[Level3] Level3
		,l3.NAME Level3Description
		,level4 Level4
		,l4.NAME Level4Description
		,[Level5] Level5
		,l5.NAME Level5Description
		,CASE 
			WHEN a.MAINACCOUNTID = '9805'
				THEN NULL
			ELSE 1
			END IsGAAP
		,CASE 
			WHEN Level2 = '739999'
				THEN 1
			ELSE NULL
			END IsControlled
		,CASE 
			WHEN fte.MAINACCOUNTID IS NOT NULL
				THEN 1
			ELSE NULL
			END IsFTE
		,a.[PARTITION]
		,case when a.DONOTALLOWMANUALENTRY = 0 THEN 1 ELSE 0 END as IsActive
	FROM [dbo].[MainAccountStaging] a
	LEFT JOIN [dbo].[TotalingAccountTree] T ON a.mainaccountid = t.LeafAccount
	LEFT JOIN [dbo].[vwFTEAccounts] FTE ON fte.MAINACCOUNTID = a.MAINACCOUNTID
		AND fte.PARTITION = a.PARTITION
	LEFT JOIN [dbo].[MainAccountStaging] l1 ON l1.MAINACCOUNTID = t.[Level1]
		AND l1.PARTITION = a.PARTITION
	LEFT JOIN [dbo].[MainAccountStaging] l2 ON l2.MAINACCOUNTID = t.[Level2]
		AND l2.PARTITION = a.PARTITION
	LEFT JOIN [dbo].[MainAccountStaging] l3 ON l3.MAINACCOUNTID = t.[Level3]
		AND l3.PARTITION = a.PARTITION
	LEFT JOIN [dbo].[MainAccountStaging] l4 ON l4.MAINACCOUNTID = t.[Level4]
		AND l4.PARTITION = a.PARTITION
	LEFT JOIN [dbo].[MainAccountStaging] l5 ON l5.MAINACCOUNTID = t.[Level5]
		AND l5.PARTITION = a.PARTITION
	WHERE len(a.MAINACCOUNTID) <= 4
	) z

		delete from DimAccount where len(MainAccountNumber) > 4


update dimaccount
set Level2 = level3,
Level2Description = level3Description
where MainAccountNumber like '46%'




update dimaccount
set Level1 = 500011,
Level1Description = 'Total Car & Housing Allowance',
 Level5 = 999999,
Level5Description = 'Total Operating Expenses',
 Level4 = 739999,
Level4Description = 'Total Controllable Expenses',
 Level3 = 731999,
Level3Description = 'Total Controllable (excl. COGS)',
 Level2 = 500999,
Level2Description = 'Total Population Expenses'
where MainAccountNumber like  '5026'

update dimaccount
set Level2 = level3,
Level2Description = level3Description
where MainAccountNumber like '46%'
or MainAccountNumber = '9805'




--update dimaccount
--set --Level1 = 500011,
----Level1Description = 'Total Car & Housing Allowance',
-- Level5 = null--,
----Level5Description = 'Total Operating Expenses',
---- Level4 = 899999,
----Level4Description = 'Total Corporate Expense',
---- Level3 = 892999,
----Level3Description = 'Total Corporate (non-GAAP)',
---- Level2 = 892004,
----Level2Description = 'Total Depreciation & Amortization'
--where MainAccountNumber like  '9307'
GO
PRINT N'Creating [dbo].[spDimDepartment]...';


GO

CREATE PROCEDURE [dbo].[spDimDepartment]
AS

UPDATE DimDepartment
SET DimDepartment.[DepartmentNumber] = z.[DepartmentNumber]
	,DimDepartment.[DepartmentDescription] = z.[DepartmentDescription]
	,DimDepartment.[DepartmentNumberDescription] = z.[DepartmentNumberDescription]
	,DimDepartment.[DepartmentDescriptionNumber] = z.[DepartmentDescriptionNumber]
	,DimDepartment.DepartmentIsActive=ISNULL(z.DepartmentIsActive,0)
FROM (
	SELECT DepartmentNumber
		,DepartmentDescription
		,CONCAT (
			DepartmentNumber
			,' - '
			,DepartmentDescription
			) DepartmentNumberDescription
		,CONCAT (
			DepartmentDescription
			,' ('
			,DepartmentNumber
			,')'
			) DepartmentDescriptionNumber
		,DepartmentIsActive
	FROM (
		SELECT DISTINCT DIMENSIONVALUE DepartmentNumber
			,dept.DESCRIPTION DepartmentDescription, 
			CASE WHEN ISSUSPENDED=1 THEN 0 ELSE 1 END as DepartmentIsActive
		FROM [dbo].[FinancialDimensionValueEntityStaging] Dept
		WHERE Dept.FINANCIALDIMENSION = 'Department'
		) z
	) z
WHERE z.departmentnumber = dimdepartment.departmentnumber

INSERT INTO DimDepartment (
	[DepartmentNumber]
	,[DepartmentDescription]
	,[DepartmentNumberDescription]
	,[DepartmentDescriptionNumber]
	,DepartmentIsActive
	)
SELECT DepartmentNumber
	,DepartmentDescription
	,CONCAT (
		DepartmentNumber
		,' - '
		,DepartmentDescription
		) DepartmentNumberDescription
	,CONCAT (
		DepartmentDescription
		,' ('
		,DepartmentNumber
		,')'
		) DepartmentDescriptionNumber
	,DepartmentIsActive
FROM (
	SELECT DISTINCT DIMENSIONVALUE DepartmentNumber
		,dept.DESCRIPTION DepartmentDescription, 
		CASE WHEN ISSUSPENDED=1 THEN 0 ELSE 1 END as DepartmentIsActive
	FROM [dbo].[FinancialDimensionValueEntityStaging] Dept
	WHERE Dept.FINANCIALDIMENSION = 'Department'
	) z
WHERE DepartmentNumber NOT IN (
		SELECT DISTINCT departmentnumber
		FROM dimdepartment
		)

UPDATE DimDepartment
SET DepartmentIsActive=0 WHERE DepartmentIsActive IS NULL





--		insert into DimDepartment([DepartmentNumber]
--      ,[DepartmentDescription]
--      ,[DepartmentNumberDescription]
--      ,[DepartmentDescriptionNumber]
--      ,[securitykey])

--SELECT DepartmentNumber
--	,DepartmentDescription
--	,CONCAT (
--		DepartmentNumber
--		,' - '
--		,DepartmentDescription
--		) DepartmentNumberDescription
--	,CONCAT (
--		DepartmentDescription
--		,' ('
--		,DepartmentNumber
--		,')'
--		) DepartmentDescriptionNumber
--		,securitykey
--FROM (
--	SELECT DISTINCT DIMENSIONVALUE DepartmentNumber
--		,dept.DESCRIPTION DepartmentDescription
--	FROM [dbo].[FinancialDimensionValueEntityStaging] Dept
--	WHERE Dept.FINANCIALDIMENSION = 'Department'
--	) z
--	left join [D365Security] d on d.department = z.DepartmentNumber
----123
GO
PRINT N'Creating [dbo].[spDimEntity]...';


GO
CREATE proc [dbo].[spDimEntity] as

update DimEntity 
set	   DimEntity.[EntityID] =				  z.[EntityID] 
      ,DimEntity.[EntityDescription] =		  z.[EntityDescription] 
      ,DimEntity.[EntityDescriptionID] =	  z.[EntityDescriptionID]
      ,DimEntity.[EntityIDDescription] =	  z.[EntityIDDescription]
	  from (select distinct DATAAREAID EntityID
			,case when f.ORGANIZATIONNAME is null 
				then 'Description Not Available'
				else f.ORGANIZATIONNAME
					end  EntityDescription
		,case when f.ORGANIZATIONNAME is null 
				then 'Description Not Available'
				else concat(f.ORGANIZATIONNAME,' (',DATAAREAID,')')
					end  EntityDescriptionID
		,case when f.ORGANIZATIONNAME is null 
				then 'Description Not Available'
				else concat(DATAAREAID,' - ',f.ORGANIZATIONNAME)
					end  EntityIDDescription
		--,securityKey
  from (select distinct dataareaid from GeneralJournalAccountEntryStaging 
			union select distinct dataareaid from BudgetRegisterEntryStaging) g
  left join [dbo].[DirPartyV2Staging]  f
		on g.DATAAREAID =  f.LEGALENTITYDATAAREA
			and f.PARTYTYPE = 'LegalEntity'
	where DATAAREAID in (select distinct entityid from dimentity)
	) z where  z.EntityID = DimEntity.entityid


insert into DimEntity ( [EntityID]
      ,[EntityDescription]
      ,[EntityDescriptionID]
      ,[EntityIDDescription]
     -- ,[SecurityKey]
	 )
select distinct DATAAREAID EntityID
			,case when f.ORGANIZATIONNAME is null 
				then 'Description Not Available'
				else f.ORGANIZATIONNAME
					end  EntityDescription
		,case when f.ORGANIZATIONNAME is null 
				then 'Description Not Available'
				else concat(f.ORGANIZATIONNAME,' (',DATAAREAID,')')
					end  EntityDescriptionID
		,case when f.ORGANIZATIONNAME is null 
				then 'Description Not Available'
				else concat(DATAAREAID,' - ',f.ORGANIZATIONNAME)
					end  EntityIDDescription
		--,securityKey
  from (select distinct dataareaid from GeneralJournalAccountEntryStaging 
			union select distinct dataareaid from BudgetRegisterEntryStaging) g
  left join [dbo].[DirPartyV2Staging]  f
		on g.DATAAREAID =  f.LEGALENTITYDATAAREA
			and f.PARTYTYPE = 'LegalEntity'
	where DATAAREAID not in (select distinct entityid from dimentity)
--	left join [D365Security] d on d.entity =  g.DATAAREAID
GO
PRINT N'Creating [dbo].[spDimFinancialCalendar]...';


GO


CREATE PROCEDURE [dbo].[spDimFinancialCalendar] as 

--select * from DimFinancialCalendar


WITH gen AS (
    SELECT 1 AS num
    UNION ALL
    SELECT num+1 FROM gen WHERE num+1<=31
)

SELECT * Into #TempNum FROM gen
option (maxrecursion 10000)
--drop table DimFinancialCalendar

truncate table DimFinancialCalendar
insert into DimFinancialCalendar
([FiscalMonth]
      ,[MonthNumer]
      ,[MonthName]
      ,[DayNumber]
      ,[Year]
      ,[FullDate]
      ,[Quarter]
      ,[FiscalYear]
      ,[PeriodName]
      ,[ShortName]
      ,[StartDate]
      ,[EndDate]
      ,[Type]
      ,[Calendar]
      ,[CalendarType]
      ,[Days]
	  ,OpenClosed
	  ,EntityKey
	--  ,FiscalPeriodKey
	  )
	  select distinct * from (
SELECT  [MONTH] FiscalMonth
	  ,Month(startDate) MonthNumer
	  , format(STARTDATE,'MMMM') MonthName
	  ,num DayNumber
	  ,year(startDate) Year
	  ,DATEFROMPARTS(year(startDate),Month(startDate),num) FullDate  
      ,case when [QUARTER] =0 then 'Q1'
			when [QUARTER] =1 then 'Q2'
			when [QUARTER] =2 then 'Q3'
			when [QUARTER] =3 then 'Q4' end Quarter
      ,[FISCALYEAR] FiscalYear
      ,f.[PERIODNAME] PeriodName
      ,[SHORTNAME] ShortName
      ,[STARTDATE] StartDate
	  ,[ENDDATE] EndDate
      ,[TYPE] Type
      ,f.[CALENDAR] Calendar
      ,[CALENDARTYPE] CalendarType
      ,[DAYS] Days
      --,[RECID] FiscalPeriodKey

	  ,case when periodstatus = 1 then 'Open' else 'Closed' end  OpenClosed
	  ,e.entitykey
--	  ,CONCAT(year(startDate),month(startDate),num,e.EntityKey)  FiscalPeriodKey
  FROM [dbo].[FiscalPeriodStaging] f
  left join #TempNum t on t.num >= Day(startdate)
		and t.num <= day(enddate)
	left join LedgerFiscalPeriodStaging lf on lf.periodname = f.periodname and lf.yearname = year(startdate)
  left join DimEntity e on e.EntityID = LEDGERNAME
  where f.PERIODNAME not in ('Period 13','Period 0')
	and DATEFROMPARTS(year(startDate),Month(startDate),num) not in (  select distinct fulldate from 
 DimFinancialCalendar
))z

  drop table #TempNum

  update DimFinancialCalendar
  set CYTDFlag = null

  update DimFinancialCalendar
  set CYTDFlag = 1
  where [Year] = year(getdate())
  and FullDate <=  format(getdate(),'yyyy-MM-dd')
  
  update DimFinancialCalendar
  set PYTDFlag = null

  update DimFinancialCalendar
  set PYTDFlag = 1
  where [Year] = year(getdate())-1
  and FullDate <=  format(DATEFROMPARTS(year(getdate())-1,month(getdate()),day(getdate())),'yyyy-MM-dd')


  update DimFinancialCalendar
  set CYQuarterToDate = null

  update DimFinancialCalendar
  set CYQuarterToDate = 1
  from(select distinct quarter from DimFinancialCalendar
	where format(getdate(),'yyyy-MM-dd') = fulldate) z
	where z.Quarter = DimFinancialCalendar.Quarter
	and year(getdate()) = DimFinancialCalendar.Year
	and FullDate <=  format(getdate(),'yyyy-MM-dd')
  
  update DimFinancialCalendar
  set PYQuarterToDate = null

  update DimFinancialCalendar
  set PYQuarterToDate = 1 
    from(select distinct quarter from DimFinancialCalendar
	where format(getdate(),'yyyy-MM-dd') = fulldate) z
	where z.Quarter = DimFinancialCalendar.Quarter
	and year(getdate()) -1 = DimFinancialCalendar.Year
	and FullDate <= datefromparts(year(getdate())-1,month(getdate()),day(getdate()))

update DimFinancialCalendar
set PQuarterToDate = null


update DimFinancialCalendar
set PQuarterToDate = 1
from( select distinct case when quarter = 'Q1' then 'Q4'
				when quarter = 'Q2' then 'Q1'
				when quarter = 'Q3' then 'Q2'
				when quarter = 'Q4' then 'Q3' end QT,
				case when quarter = 'Q1' then year(fulldate)-1
				when quarter = 'Q2' then year(fulldate)
				when quarter = 'Q3' then year(fulldate)
				when quarter = 'Q4' then year(fulldate) end YR
				  from DimFinancialCalendar
where fulldate = format(getdate(),'yyyy-MM-dd') )z
where z.QT = Quarter
and z.yr = Year

  update DimFinancialCalendar
  set CYMonthToDate = null

  update DimFinancialCalendar
  set CYMonthToDate = 1
  where month(fulldate) = month(getdate())
		and year(fulldate) = year(getdate())
	--	and day(fulldate) <= day(getdate())
  
  update DimFinancialCalendar
  set PYMonthToDate = null

  update DimFinancialCalendar
  set PYMonthToDate = 1
  where month(fulldate) = month(getdate())
		and year(fulldate) = year(getdate()) -1
	--	and day(fulldate) <= day(getdate())

update DimfinancialCalendar
set Rolling12Closed = 1
from (
--select max(fulldate)dte,datefromparts(year(max(fulldate))-1,month(max(fulldate)),day(max(fulldate)))mindte ,entitykey from DimFinancialCalendar
--where OpenClosed = 'closed' and FullDate <= getdate()
--group by entitykey
-- Some interesting logic to accommodate the last closed period being a leap year in February.
select max(fulldate)dte,
	datefromparts(year(max(fulldate))-1,month(max(fulldate)),
		case when day(max(fulldate))<>29 or month(max(fulldate)) <>2 then day(max(fulldate))
			 else 28 end 
		)
		mindte ,
	entitykey from DimFinancialCalendar
where OpenClosed = 'closed' and FullDate <= getdate()
group by entitykey
)z
where 
mindte < fulldate 
and OpenClosed = 'closed'
and z.EntityKey = DimFinancialCalendar.EntityKey

update DimfinancialCalendar 
set LastClosedMonth = null

update DimfinancialCalendar 
set LastClosedMonth = 1
from (select max(fulldate) fd,EntityKey ek from DimfinancialCalendar
		where  OpenClosed = 'closed'
		group by EntityKey)z
		where fd = FullDate 
		and ek = EntityKey

update DimfinancialCalendar 
set openclosed = 'closed'
where fulldate <= (select distinct dateadd(m,-1,max(fulldate)) MaxDate--,OpenClosed 
from DimFinancialCalendar

where openclosed = 'closed'
group by OpenClosed)

--select * from DimFinancialCalendar
update DimFinancialCalendar
set OpenClosed = 'Closed'
where EntityKey = 19
and month(fulldate) =6
and year(fulldate) =2020
GO
PRINT N'Creating [dbo].[spDimFinancialDimensions]...';


GO
CREATE PROCEDURE spDimFinancialDimensions AS

DROP TABLE DimFinancialDimensions
DECLARE @AttributeName varchar(1000),
	@SQLString varchar(max),
	@SQLString2 varchar(max)

SELECT @SQLString='CREATE TABLE DimFinancialDimensions(LedgerDimension bigint'
SELECT @SQLString2='INSERT INTO DimFinancialDimensions(LedgerDimension'

DECLARE AttributeCursor CURSOR FOR
SELECT Distinct Attributename
FROM [dbo].[RSMFinancialDimensionStaging]
WHERE NOT AttributeName like 'SystemGeneratedAttribute%'
ORDER BY AttributeName

OPEN AttributeCursor

FETCH NEXT FROM AttributeCursor INTO @AttributeName

WHILE @@FETCH_STATUS=0
BEGIN
	SELECT @SQLString=@SQLString+','+@AttributeName+'Value VARCHAR(1000), '+ @AttributeName+'Description VARCHAR(1000)'
	SELECT @SQLString2=@SQLString2+','+@AttributeName+'Value'
	FETCH NEXT FROM AttributeCursor INTO @AttributeName
END

CLOSE AttributeCursor
DEALLOCATE AttributeCursor

SELECT @SQLString=@SQLString+')'

EXEC (@SQLString)

SELECT @SQLString2=@SQLString2+') SELECT DISTINCT fc.LedgerDimension'

DECLARE LoadCursor CURSOR FOR
SELECT Distinct Attributename
FROM [dbo].[RSMFinancialDimensionStaging]
WHERE NOT AttributeName like 'SystemGeneratedAttribute%'
ORDER BY AttributeName

OPEN LoadCursor

FETCH NEXT FROM LoadCursor INTO @AttributeName

WHILE @@FETCH_STATUS=0
BEGIN
	SELECT @SQLString2=@SQLString2+',ISNULL((SELECT AttributeValue
	FROM RSMFinancialDimensionStaging fd
	WHERE fd.AttributeName='+''''+@AttributeName+''''+ ' and fc.LEDGERDIMENSION=fd.LEDGERDIMENSION),''''+'''') as '+ @AttributeName

	FETCH NEXT FROM LoadCursor INTO @AttributeName
END

CLOSE LoadCursor
DEALLOCATE LoadCursor

SELECT @SQLString2=@SQLString2+
	' FROM RSMFinancialDimensionStaging fc'

EXEC (@SQLString2)
--select @SQLString2

UPDATE DimFinancialDimensions
SET DepartmentDescription=
	(SELECT DESCRIPTION
	FROM FinancialDimensionValueEntityStaging fd
	WHERE fd.FINANCIALDIMENSION='Department' and 
		fd.DIMENSIONVALUE=DimFinancialDimensions.DepartmentValue)

UPDATE DimFinancialDimensions
SET ProjectDescription=
	(SELECT DESCRIPTION
	FROM FinancialDimensionValueEntityStaging fd
	WHERE fd.FINANCIALDIMENSION='PROJECT' and 
		fd.DIMENSIONVALUE=DimFinancialDimensions.ProjectValue)

UPDATE DimFinancialDimensions
SET TASKDescription=
	(SELECT DESCRIPTION
	FROM FinancialDimensionValueEntityStaging fd
	WHERE fd.FINANCIALDIMENSION='TASK' and 
		fd.DIMENSIONVALUE=DimFinancialDimensions.TaskValue)

UPDATE DimFinancialDimensions
SET LegalEntityDescription=
	(SELECT DESCRIPTION
	FROM FinancialDimensionValueEntityStaging fd
	WHERE fd.FINANCIALDIMENSION='LegalEntity' and 
		fd.DIMENSIONVALUE=DimFinancialDimensions.LegalEntityValue)
GO
PRINT N'Creating [dbo].[spDimHierarchy]...';


GO
CREATE proc [dbo].[spDimHierarchy] as

truncate table DimHierarchy
insert into DimHierarchy
select [HierarchyDepth]
      ,[HierarchyType]
      ,[RootPartyNumber]
	  ,d1.[NAMEALIAS] RootPartyNumberNameAlias
      ,d1.[ORGANIZATIONNAME] RootPartyOriganizationName
      ,[LeafPartyNumber]
	  ,d2.[NAMEALIAS] LeafPartyNumberNameAlias
      ,d2.[ORGANIZATIONNAME] LeafPartyNumberOriganizationName
      ,[LeafOperatingUnit]
      ,[Level1PartyNumber]
	  ,d3.[NAMEALIAS] Level1PartyNumberNameAlias
      ,d3.[ORGANIZATIONNAME] Level1PartyNumberOriganizationName
	  ,[Level2PartyNumber]
	  ,d4.[NAMEALIAS] Level2PartyNumberNameAlias
      ,d4.[ORGANIZATIONNAME] Level2PartyNumberOriganizationName
	  ,[Level3PartyNumber]
	  ,d5.[NAMEALIAS] Level3PartyNumberNameAlias
      ,d5.[ORGANIZATIONNAME] Level3PartyNumberOriganizationName
	  ,[Level4PartyNumber] 
	  ,d6.[NAMEALIAS] Level4PartyNumberNameAlias
      ,d6.[ORGANIZATIONNAME] Level4PartyNumberOriganizationName
	  ,dept.DepartmentKey
	     from(
SELECT [HierarchyDepth]
      ,[HierarchyType]
      ,[RootPartyNumber]
      ,[LeafPartyNumber]
      ,[LeafOperatingUnit]
      ,[Level1PartyNumber]
      ,case when [HierarchyDepth] = 1 then [Level1PartyNumber]
			else [Level2PartyNumber] end [Level2PartyNumber]
      ,case when [HierarchyDepth] = 1 then [Level1PartyNumber]
			when [HierarchyDepth] = 2 then [Level2PartyNumber]
			else [Level3PartyNumber] end [Level3PartyNumber]
      ,case when [HierarchyDepth] = 1 then [Level1PartyNumber]
			when [HierarchyDepth] = 2 then [Level2PartyNumber]
			when [HierarchyDepth] = 3 then [Level3PartyNumber]
			else [Level4PartyNumber] end [Level4PartyNumber]
  FROM [dbo].[OrganizationHierarchy] )OH
  left join  [dbo].[DirPartyV2Staging]  D1 on d1.PARTYNUMBER = OH.RootPartyNumber
		and d1.PARTYTYPE = 'OperatingUnit'
  left join  [dbo].[DirPartyV2Staging]  D2 on D2.PARTYNUMBER = OH.LeafPartyNumber
		and d2.PARTYTYPE = 'OperatingUnit'
  left join  [dbo].[DirPartyV2Staging]  D3 on D3.PARTYNUMBER = OH.Level1PartyNumber
		and d3.PARTYTYPE = 'OperatingUnit'
  left join  [dbo].[DirPartyV2Staging]  D4 on D4.PARTYNUMBER = OH.Level2PartyNumber
		and d4.PARTYTYPE = 'OperatingUnit'
  left join  [dbo].[DirPartyV2Staging]  D5 on D5.PARTYNUMBER = OH.Level3PartyNumber
		and d5.PARTYTYPE = 'OperatingUnit'
  left join  [dbo].[DirPartyV2Staging]  D6 on D6.PARTYNUMBER = OH.Level4PartyNumber
		and d6.PARTYTYPE = 'OperatingUnit'
		join DimDepartment dept on dept.DepartmentNumber = oh.LeafOperatingUnit
GO
PRINT N'Creating [dbo].[spDimProject]...';


GO
CREATE PROCEDURE [dbo].[spDimProject] as

/****** Script for SelectTopNRows command from SSMS  ******/
UPDATE Dimproject
SET Dimproject.[ProjectNumber] = z.[ProjectNumber]
	,Dimproject.[ProjectDescription] = z.[ProjectDescription]
	,Dimproject.[ProjectNumberDescription] = z.[ProjectNumberDescription]
	,Dimproject.[ProjectDescriptionNumber] = z.[ProjectDescriptionNumber]
	,Dimproject.[Partition] = z.[Partition]
	,Dimproject.[DataAreaID] = z.[DataAreaID]
	,Dimproject.ProjectIsActive = z.ProjectIsActive
FROM (
	SELECT ProjectNumber
		,ProjectDescription
		,CONCAT (
			ProjectNumber
			,' - '
			,ProjectDescription
			) ProjectNumberDescription
		,CONCAT (
			ProjectDescription
			,' ('
			,ProjectNumber
			,')'
			) ProjectDescriptionNumber
		,PARTITION
		,DataAreaID
		,ProjectIsActive
	FROM (
		SELECT DISTINCT [Project] ProjectNumber
			,Proj.DESCRIPTION ProjectDescription
			,D.[Partition]
			,[DataAreaID]
			,CASE WHEN proj.ISSUSPENDED=0 THEN 1 ELSE 0 END as ProjectIsActive 
		FROM [dbo].[DisplayValueExplosion] D
		LEFT JOIN [dbo].[FinancialDimensionValueEntityStaging] Proj ON Proj.DIMENSIONVALUE = D.Project
			AND D.PARTITION = Proj.PARTITION
			AND Proj.FINANCIALDIMENSION = 'PROJECT'
		) z
	) z
WHERE z.projectnumber = dimproject.projectnumber
	AND z.dataareaid = dimproject.dataareaid
	AND z.PARTITION = dimproject.PARTITION

INSERT INTO DimProject (
	[ProjectNumber]
	,[ProjectDescription]
	,[ProjectNumberDescription]
	,[ProjectDescriptionNumber]
	,[Partition]
	,[DataAreaID]
	,ProjectIsActive
	)
SELECT ProjectNumber
	,ProjectDescription
	,CONCAT (
		ProjectNumber
		,' - '
		,ProjectDescription
		) ProjectNumberDescription
	,CONCAT (
		ProjectDescription
		,' ('
		,ProjectNumber
		,')'
		) ProjectDescriptionNumber
	,PARTITION
	,DataAreaID
	,ProjectIsActive
FROM (
	SELECT DISTINCT [Project] ProjectNumber
		,Proj.DESCRIPTION ProjectDescription
		,D.[Partition]
		,[DataAreaID]
		,CASE WHEN proj.ISSUSPENDED=0 THEN 1 ELSE 0 END as ProjectIsActive 
	FROM [dbo].[DisplayValueExplosion] D
	LEFT JOIN [dbo].[FinancialDimensionValueEntityStaging] Proj ON Proj.DIMENSIONVALUE = D.Project
		AND D.PARTITION = Proj.PARTITION
		AND Proj.FINANCIALDIMENSION = 'PROJECT'
	) z
WHERE CONCAT (
		dataareaid
		,'-'
		,projectnumber
		) NOT IN (
		SELECT DISTINCT CONCAT (
				dataareaid
				,'-'
				,projectnumber
				)
		FROM dimproject
		)

update dimproject 
set projectid = z.projectnumber
from(SELECT ProjectKey
	,CASE 
		WHEN len(CASE 
					WHEN HoldNumber > HoldNumber1
						THEN HoldNumber
					ELSE null--HoldNumber1
					END) < 3
			THEN NULL
		ELSE (
				CASE 
					WHEN HoldNumber > HoldNumber1
						THEN HoldNumber
					ELSE null --HoldNumber1
					END
				)
		END ProjectNumber
FROM (
	SELECT ProjectKey,projectdescription
		,LEFT(SUBSTRING(projectdescription, PATINDEX('%[0-9.-]%', projectdescription), 8000), PATINDEX('%[^0-9.-]%', SUBSTRING(projectdescription, PATINDEX('%[0-9.-]%', projectdescription), 8000) + 'X') - 1) HoldNumber
		,replace(projectdescription, LEFT(SUBSTRING(projectdescription, PATINDEX('%[0-9.-]%', projectdescription), 8000), PATINDEX('%[^0-9.-]%', SUBSTRING(projectdescription, PATINDEX('%[0-9.-]%', projectdescription), 8000) + 'X') - 1), '') HoldNumber2
		
		
		,LEFT(SUBSTRING(replace(projectdescription, 
		LEFT(SUBSTRING(projectdescription, PATINDEX('%[0-9.-]%', projectdescription), 8000), PATINDEX('%[^0-9.-]%', 
			SUBSTRING(projectdescription, PATINDEX('%[0-9.-]%', projectdescription), 8000) + 'X') - 1), ''), PATINDEX('%[0-9.-]%', replace(projectdescription, LEFT(SUBSTRING(projectdescription, PATINDEX('%[0-9.-]%', projectdescription), 8000), PATINDEX('%[^0-9.-]%', SUBSTRING(projectdescription, PATINDEX('%[0-9.-]%', projectdescription), 8000) + 'X') - 1), '')), 8000), PATINDEX('%[^0-9.-]%', SUBSTRING(replace(projectdescription, LEFT(SUBSTRING(projectdescription, PATINDEX('%[0-9.-]%', projectdescription), 8000), PATINDEX('%[^0-9.-]%', SUBSTRING(projectdescription, PATINDEX('%[0-9.-]%', projectdescription), 8000) + 'X') - 1), ''), PATINDEX('%[0-9.-]%', replace(projectdescription, LEFT(SUBSTRING(projectdescription, PATINDEX('%[0-9.-]%', projectdescription), 8000), PATINDEX('%[^0-9.-]%', SUBSTRING(projectdescription, PATINDEX('%[0-9.-]%', projectdescription), 8000) + 'X') - 1), '')), 8000) + 'X') - 1) 
		HoldNumber1
	FROM DimProject

	) z

)z where z.ProjectKey = DimProject.ProjectKey

update dimproject 
set projectid = 0
WHERE projectid is null


update dimproject 
set ProjectIsActive = 0
WHERE ProjectIsActive is null
GO
PRINT N'Creating [dbo].[spDimTask]...';


GO

CREATE PROCEDURE [dbo].[spDimTask]
AS
UPDATE DimTask
SET dimtask.[TaskNumber] = z.[TaskNumber]
	,dimtask.[TaskDescription] = z.[TaskDescription]
	,dimtask.[TaskNumberDescription] = z.[TaskNumberDescription]
	,dimtask.[TaskDescriptionNumber] = z.[TaskDescriptionNumber]
	,dimtask.[Partition] = z.[Partition]
	,dimtask.[DataAreaID] = z.[DataAreaID]
FROM (
	SELECT TaskNumber
		,Task.DESCRIPTION TaskDescription
		,CONCAT (
			TaskNumber
			,' - '
			,Task.DESCRIPTION
			) TaskNumberDescription
		,CONCAT (
			Task.DESCRIPTION
			,' ('
			,TaskNumber
			,')'
			) TaskDescriptionNumber
		,z.[Partition]
		,[DataAreaID]
	FROM (
		SELECT DISTINCT [Task] TaskNumber
			--,
			,D.[Partition]
			,[DataAreaID]
		FROM [dbo].[DisplayValueExplosion] D
		) z
	LEFT JOIN [dbo].[FinancialDimensionValueEntityStaging] Task ON task.DIMENSIONVALUE = z.TaskNumber
		AND z.PARTITION = task.PARTITION
		AND task.FINANCIALDIMENSION = 'TASK'
	) z
WHERE z.TaskNumber = dimtask.TaskNumber
	AND z.DataAreaID = dimtask.DataAreaID
	AND z.PARTITION = dimtask.PARTITION

INSERT INTO DimTask (
	[TaskNumber]
	,[TaskDescription]
	,[TaskNumberDescription]
	,[TaskDescriptionNumber]
	,[Partition]
	,[DataAreaID]
	)
SELECT TaskNumber
	,Task.DESCRIPTION TaskDescription
	,CONCAT (
		TaskNumber
		,' - '
		,Task.DESCRIPTION
		) TaskNumberDescription
	,CONCAT (
		Task.DESCRIPTION
		,' ('
		,TaskNumber
		,')'
		) TaskDescriptionNumber
	,z.[Partition]
	,[DataAreaID]
FROM (
	SELECT DISTINCT [Task] TaskNumber
		--,
		,D.[Partition]
		,[DataAreaID]
	FROM [dbo].[DisplayValueExplosion] D
	) z
LEFT JOIN [dbo].[FinancialDimensionValueEntityStaging] Task ON task.DIMENSIONVALUE = z.TaskNumber
	AND z.PARTITION = task.PARTITION
	AND task.FINANCIALDIMENSION = 'TASK'
WHERE CONCAT (
		dataareaid
		,'-'
		,tasknumber
		) NOT IN (
		SELECT DISTINCT CONCAT (
				dataareaid
				,'-'
				,tasknumber
				)
		FROM DimTask
		)
GO
PRINT N'Creating [dbo].[spEmployeeHierarchy]...';


GO
CREATE PROCEDURE [dbo].[spEmployeeHierarchy] as

--select * from AliceTempSecurity where NetworkAlias like 'jp%'
--select * from EmployeeHierarchy where ReportsToEMail like 'jp%'

TRUNCATE Table EmployeeHierarchy

insert into EmployeeHierarchy
  select distinct u.Email as ReportsToEMail,u.FullName as EmployeeFullName, d.DepartmentNumber, 
	u.FullName+'-'+Convert(varchar(50),d.DepartmentNumber) as SecurityKey
	from FACTCOMMITMENTS AS FC
  join DIMUser u on u.[UserKey]=fc.RequesterKey
  join DimDepartment d on d.DepartmentKey=fc.departmentkey
  

insert into EmployeeHierarchy
  select distinct s.NetworkAlias as ReportsToEMail, 
	u.FullName as EmployeeFullName, d.DepartmentNumber, 
	u.FullName +'-'+Convert(varchar(50),d.DepartmentNumber) as SecurityKey
  from AliceTempSecurity s
  
  join DimEntity e on e.EntityID=s.Entity
  join DimDepartment d on d.DepartmentNumber=s.DepartmentID and ISNUMERIC(DepartmentNumber)=1
  --Note on 9/17/2020 Harry Chen Commented the following two lines and add different DimUser join to get user FullName
  join FACTCOMMITMENTS fc on fc.Entity=s.Entity and fc.DepartmentKey=d.DepartmentKey and not fc.RequesterKey is NULL
  join DIMUser u on u.[UserKey]=fc.RequesterKey
  --join DIMUser u on lower(u.Email)=lower(s.NetworkAlias) --This is required to get correct FullName from DimUser table instead of the input file
  where not exists 
	(select * from EmployeeHierarchy eh
	where eh.ReportsToEMail=s.NetworkAlias and
	eh.EmployeeFullName=u.FullName and
	eh.SecurityKey=u.FullName+'-'+Convert(varchar(50),d.DepartmentNumber))

-- Don't include akcea accounts
DELETE FROM EmployeeHierarchy WHERE ReportsToEMail like '%akcea%'

-- Set to the long email in security table
UPDATE EmployeeHierarchy
SET ReportsToEMail=
	(SELECT [FinalEmployeeEmail]
	FROM [dbo].[AliceTempLongShortEmails] ae
	WHERE ae.EmployeeEmail=EmployeeHierarchy.ReportsToEMail)
WHERE EXISTS
	(SELECT [FinalEmployeeEmail]
	FROM [dbo].[AliceTempLongShortEmails] ae
	WHERE ae.EmployeeEmail=EmployeeHierarchy.ReportsToEMail)
GO
PRINT N'Creating [dbo].[spFactAccountingSourceExplorer]...';


GO


CREATE PROCEDURE [dbo].[spFactAccountingSourceExplorer] as
TRUNCATE TABLE FactAccountingSourceExplorer
INSERT INTO FactAccountingSourceExplorer
-- Main
SELECT 'Journal',
	gje.JournalNumber,
	gje.AccountingDate,
	gje.VOUCHER,
	gje.DocumentNumber,
	gje.DocumentDate,
	gje.JournalCategory,
	gje.PostingType,
	gje.DESCRIPTION,
	gje.LedgerAccount,
	gje.TransactionCurrencyCode,
	jdc.LedgerDimension,
	gje.Recid as GeneralJournalAccountEntry,
	gje.IsCorrection,
	0 as Side,
	gje.AccountingCurrencyAmount,
	gje.ReportingCurrencyAmount,
	gje.TransactionCurrencyAmount,
	null as MonetaryAmount,
	0 as AccountingDistributionRecId,
	gje.DATAAREAID as DestinationCompany,
	CONVERT(varchar(1000),'') as TypeEnumName,
	0 as SourceDocumentRecId,
	CONVERT(varchar(1000),'') as SourceRelationType,
	0 as MainAccountId,
	CONVERT(varchar(1000),'') as MainAccountName,
	CONVERT(varchar(1000),'') as PartyNumber,
	CONVERT(varchar(1000),'') as PartyName,
	'' as LINEDOCUMENTREFERENCE
	
FROM GeneralJournalAccountEntryStaging gje
JOIN RSMJournalDimensionCrosswalkStaging jdc on jdc.GeneralJournalRecid=gje.RECID
WHERE NOT gje.RECID in (SELECT GENERALJOURNALACCOUNTENTRY FROM RSMsubledgerJournalAccountEntryStaging)
UNION
-- SubLedger
SELECT 'SubLedger Summary',
	gje.JournalNumber,
	gje.AccountingDate,
	gje.VOUCHER,
	gje.DocumentNumber,
	gje.DocumentDate,
	gje.JournalCategory,
	gje.PostingType,
	gje.DESCRIPTION,
	gje.LedgerAccount,
	gje.TransactionCurrencyCode,
	jdc.LedgerDimension,
	gje.Recid as GeneralJournalAccountEntry,
	gje.IsCorrection,
	sjae.Side,
	sjae.AccountingCurrencyAmount,
	sjae.ReportingCurrencyAmount,
	sjae.TransactionCurrencyAmount,
	null as MonetaryAmount,
	0 as AccountingDistributionRecId,
	gje.DATAAREAID as DestinationCompany,
	sdh.TypeEnumName,
	ae.SOURCEDOCUMENTHEADER as SourceDocumentRecId,
	sdh.SourceRelationType,
	0 as MainAccountId,
	'' as MainAccountName,
	'' as PartyNumber,
	'' as PARTYNAME,
	'' as LINEDOCUMENTREFERENCE
FROM GeneralJournalAccountEntryStaging gje
JOIN RSMJournalDimensionCrosswalkStaging jdc on jdc.GeneralJournalRecid=gje.RECID
JOIN RSMsubledgerJournalAccountEntryStaging sjae on sjae.GENERALJOURNALACCOUNTENTRY=gje.GENERALJOURNALACCOUNTENTRYRECID
JOIN RSMSubLedgerJournalEntryStaging sje on sje.RECID=sjae.SubledgerJournalEntry
JOIN rsmAccountingEventStaging ae on ae.RECID=sje.AccountingEvent
JOIN rsmSourceDocumentHeaderEntStaging sdh on sdh.RECID=ae.SOURCEDOCUMENTHEADER
WHERE NOT sjae.RECID in (SELECT subledgerJournalAccountEntry FROM RSMSubLedgerJournalAccountEntryDistributionStaging)
UNION
-- SubLedger Distribution
SELECT 'SubLedger Detail',
	gje.JournalNumber,
	gje.AccountingDate,
	gje.VOUCHER,
	gje.DocumentNumber,
	gje.DocumentDate,
	gje.JournalCategory,
	gje.PostingType,
	gje.DESCRIPTION,
	gje.LedgerAccount,
	gje.TransactionCurrencyCode,
	jdc.LedgerDimension,
	gje.Recid as GeneralJournalAccountEntry,
	gje.IsCorrection,
	sjae.Side,
	sjad.AccountingCurrencyAmount,
	sjad.ReportingCurrencyAmount,
	ad.TransactionCurrencyAmount,
	ad.MonetaryAmount,
	ad.RECID as AccountingDistributionRecId,
	ad.ACCOUNTINGLEGALENTITY_DATAAREA as DestinationCompany,
	sdh.TypeEnumName,
	ae.SOURCEDOCUMENTHEADER as SourceDocumentRecId,
	sdh.SourceRelationType,
	0 as MainAccountId,
	'' as MainAccountName,
	'' as PartyNumber,
	'' as PARTYNAME,
	aeri.LINEDOCUMENTREFERENCE
FROM GeneralJournalAccountEntryStaging gje
JOIN RSMJournalDimensionCrosswalkStaging jdc on jdc.GeneralJournalRecid=gje.RECID
JOIN RSMsubledgerJournalAccountEntryStaging sjae on sjae.GENERALJOURNALACCOUNTENTRY=gje.GENERALJOURNALACCOUNTENTRYRECID
JOIN RSMSubLedgerJournalEntryStaging sje on sje.RECID=sjae.SubledgerJournalEntry
JOIN rsmAccountingEventStaging ae on ae.RECID=sje.AccountingEvent
JOIN rsmSourceDocumentHeaderEntStaging sdh on sdh.RECID=ae.SOURCEDOCUMENTHEADER
JOIN RSMSubLedgerJournalAccountEntryDistributionStaging sjad on sjad.subledgerJournalAccountEntry=sjae.RECID
JOIN rsmAccountingDistributionStaging ad on ad.RECID=sjad.AccountingDistribution
JOIN rsmSourceDocumentLineReferenceIdentityStaging aeri on aeri.SOURCEDOCUMENTLINE=ad.SOURCEDOCUMENTLINE

-- Update From Vend Trans
UPDATE FactAccountingSourceExplorer
	SET SubLedgerPartyNumber = v.VENDORACCOUNTNUMBER,
	subLedgerPartyName = p.ORGANIZATIONNAME
	FROM FactAccountingSourceExplorer AS fas
	JOIN RSMVendTransStaging vt on fas.VOUCHER = vt.VOUCHER and fas.DestinationCompany = vt.DATAAREAID
	JOIN VendVendorV2Staging v on v.VENDORACCOUNTNUMBER=vt.VendorAccountNum
	JOIN DirPartyV2Staging p on p.PARTYNUMBER=v.VENDORPARTYNUMBER

-- Set Documents based on vendtrans if not populated
UPDATE FactAccountingSourceExplorer
SET DOCUMENTNUMBER=
	(SELECT TOP 1 vt.INVOICE
	FROM RSMVendTransStaging vt
	WHERE vt.VOUCHER=FactAccountingSourceExplorer.VOUCHER and
		vt.TRANSDATE=FactAccountingSourceExplorer.AccountingDate and
		not vt.INVOICE is null),
	DOCUMENTDATE=
	(SELECT TOP 1 vt.DOCUMENTDATE
	FROM RSMVendTransStaging vt
	WHERE vt.VOUCHER=FactAccountingSourceExplorer.VOUCHER and
		vt.TRANSDATE=FactAccountingSourceExplorer.AccountingDate and
		not vt.DOCUMENTDATE is null)
WHERE (DOCUMENTNUMBER='' or DOCUMENTNUMBER is null) and
EXISTS 
	(SELECT *
	FROM RSMVendTransStaging vt
	WHERE vt.VOUCHER=FactAccountingSourceExplorer.VOUCHER and
		vt.TRANSDATE=FactAccountingSourceExplorer.AccountingDate and
		not vt.INVOICE is null)

-- Set Documents based on custtrans if not populated
UPDATE FactAccountingSourceExplorer
SET DOCUMENTNUMBER=
	(SELECT TOP 1 vt.INVOICE
	FROM RSMCustTransStaging vt
	WHERE vt.VOUCHER=FactAccountingSourceExplorer.VOUCHER and
		vt.TRANSDATE=FactAccountingSourceExplorer.AccountingDate and
		not vt.INVOICE is null),
	DOCUMENTDATE=
	(SELECT TOP 1 vt.DOCUMENTDATE
	FROM RSMCustTransStaging vt
	WHERE vt.VOUCHER=FactAccountingSourceExplorer.VOUCHER and
		vt.TRANSDATE=FactAccountingSourceExplorer.AccountingDate and
		not vt.DOCUMENTDATE is null)
WHERE (DOCUMENTNUMBER='' or DOCUMENTNUMBER is null) and
EXISTS 
	(SELECT *
	FROM RSMCustTransStaging vt
	WHERE vt.VOUCHER=FactAccountingSourceExplorer.VOUCHER and
		vt.TRANSDATE=FactAccountingSourceExplorer.AccountingDate and
		not vt.INVOICE is null)

-- Update Transaction Currency Sign
UPDATE FactAccountingSourceExplorer
SET SubLedgerTransactionCurrencyAmount = -1 * SubLedgerTransactionCurrencyAmount
WHERE (SubLedgerAccountingCurrencyAmount < 0 and SubLedgerTransactionCurrencyAmount>0)
or (SubLedgerTransactionCurrencyAmount<0 and SubLedgerAccountingCurrencyAmount>0)
GO
PRINT N'Creating [dbo].[spFactTransaction]...';


GO




CREATE PROCEDURE [dbo].[spFactTransaction] as

--select * from FactTransaction where FCastQ1Amount<>0

truncate table facttransaction
insert into FACTTRANSACTION ([AccountString]
      ,[TransactionDate]
      ,[Scenario]
	  ,SubScenario
	  ,InvoiceNumber
      ,[TransactionDescription]
      ,REPORTINGCURRENCYAMOUNT
		,ACCOUNTINGCURRENCYAMOUNT
		,TRANSACTIONAMOUNT
      ,[BudgetAmount]
      ,[IsAllocated]
      ,[RecID]
      ,[Partition]
      ,[AccountKey]
      ,[DepartmentKey]
      ,[ProjectKey]
      ,[TaskKey]
	  ,EntityKey
      ,[FiscalPeriodKey]
	  ,ReportingCurrencyCode 
	  ,AccountingCurrencyCode 
	  ,TransactionCurrencyCode
	  ,Voucher
	  ,FCastQ1Amount
	  ,FCastQ2Amount
	  ,FCastQ3Amount
	  ,FCastQ4Amount
      )
-- Normal actual transaction records (not headcount)
SELECT z.DisplayValue AccountString
		,z.Date TransactionDate
		,z.TransactionType Scenario 
		,z.SubScenario
		,z.InvoiceNumber
		,DESCRIPTION TransactionDescription
		,REPORTINGCURRENCYAMOUNT
		,ACCOUNTINGCURRENCYAMOUNT
		,TRANSACTIONCURRENCYAMOUNT
		,z.BudgetAmount
		,IsAllocated
		,z.RECID RecID
		,z.partition Partition
		,AccountKey
		,DepartmentKey
		,ProjectKey
		,TaskKey
		,entitykey
		,z.[FiscalPeriodKey]
		,ReportingCurrencyCode 
	    ,AccountingCurrencyCode 
	    ,TransactionCurrencyCode,
		VOUCHER
		,FCastQ1
		,FCastQ2
		,FCastQ3
		,FCastQ4
FROM (
SELECT DISTINCT ACCOUNTDISPLAYVALUE DisplayValue
	,[MainAccount] Account
    ,[Department] Department
    ,[Project] Project
    ,[Task] Task
	,ACCOUNTINGDATE Date
	,[FiscalPeriodKey] AS FiscalPeriodKey
	,'Actual' TransactionType
	,'Actual' SubScenario
	,case when a.DESCRIPTION like 'Purchase Invoice%' then DOCUMENTNUMBER end InvoiceNumber
	,CASE WHEN ac.MainAccountType in ('Liability','Revenue') THEN -1 ELSE 1 END *
		REPORTINGCURRENCYAMOUNT ReportingCurrencyAmount
	,CASE WHEN ac.MainAccountType in ('Liability','Revenue') THEN -1 ELSE 1 END *
		ACCOUNTINGCURRENCYAMOUNT AccountingCurrencyAmount
	,CASE WHEN ac.MainAccountType in ('Liability','Revenue') THEN -1 ELSE 1 END *
		TRANSACTIONCURRENCYAMOUNT TransactionCurrencyAmount
	,null BudgetAmount
	,'N/A' IsAllocated
	,a.DESCRIPTION
	,a.RECID
	,a.PARTITION Partition
	,a.DataAreaID LegalEntity
	,AccountKey
	,ProjectKey
	,DepartmentKey
	,TaskKey
	,e.EntityKey
	,l.[REPORTINGCURRENCY] [REPORTINGCURRENCYCODE]
      ,l.[ACCOUNTINGCURRENCY] [ACCOUNTINGCURRENCYCODE]
	  ,a.TRANSACTIONCURRENCYCODE,
	  a.VOUCHER
	  ,0 as FCastQ1
		,0 as FCastQ2
		,0 as FCastQ3
		,0 as FCastQ4
FROM GeneralJournalAccountEntryStaging a
left JOIN [dbo].[DisplayValueExplosion] d ON d.DisplayValue = a.ACCOUNTDISPLAYVALUE
			and d.DataAreaID = a.DataAreaID
			and d.Partition = a.PARTITION
	left join dimaccount ac on ac.MainAccountNumber = d.MainAccount and ac.partition = d.partition
	left join DimDepartment dep on dep.DepartmentNumber = d.Department --and d.partition = z.partition
	left join dimproject pro on pro.dataareaid = a.DATAAREAID and pro.ProjectNumber = d.Project and pro.partition = a.partition
	left join dimtask t on t.dataareaid = a.DATAAREAID and t.TaskNumber = d.task and t.partition = a.partition
	left join dimentity e on e.entityID = a.DATAAREAID
	left 	 JOIN DimFinancialCalendar P ON P.FullDate = ACCOUNTINGDATE and p.EntityKey = e.EntityKey
	left join [dbo].[LedgerEntityStaging] l on l.[LEGALENTITYID] = a.dataareaid 
	where LEDGERACCOUNT not LIKE 'hc%'

	union 

	
SELECT DISTINCT  ACCOUNTDISPLAYVALUE DisplayValue
	,[MainAccount] Account
    ,[Department] Department
    ,[Project] Project
    ,[Task] Task
	,FullDate Date
	,[FiscalPeriodKey] AS FiscalPeriodKey
	,'Actual' TransactionType
	,'Actual' SubScenario
	,'' InvoiceNumber
	,0 ReportingCurrencyAmount
	,0 AccountingCurrencyAmount
	,0 TransactionCurrencyAmount
	,null BudgetAmount
	,'N/A' IsAllocated
	, '' DESCRIPTION
	,[FiscalPeriodKey]
	,a.PARTITION Partition
	,a.DataAreaID LegalEntity
	,AccountKey
	,ProjectKey
	,DepartmentKey
	,TaskKey
	,e.EntityKey
	,'' [REPORTINGCURRENCYCODE]
      ,'' [ACCOUNTINGCURRENCYCODE]
	  ,'' TRANSACTIONCURRENCYCODE,
	  '' VOUCHER
	  ,0 as FCastQ1
		,0 as FCastQ2
		,0 as FCastQ3
		,0 as FCastQ4
		
FROM (select distinct dataareaid, accountdisplayvalue,PARTITION from GeneralJournalAccountEntryStaging
where -- dataareaid = 'ions' and
	 accountdisplayvalue not LIKE 'hc%') a
left JOIN [dbo].[DisplayValueExplosion] d ON d.DisplayValue = a.ACCOUNTDISPLAYVALUE
			and d.DataAreaID = a.DataAreaID
			and d.Partition = a.PARTITION
	left join DimAccount ac on ac.MainAccountNumber = d.MainAccount and ac.partition = d.partition
	left join DimDepartment dep on dep.DepartmentNumber = d.Department --and d.partition = z.partition
	left join dimproject pro on pro.dataareaid = a.DATAAREAID and pro.ProjectNumber = d.Project and pro.partition = a.partition
	left join dimtask t on t.dataareaid = a.DATAAREAID and t.TaskNumber = d.task and t.partition = a.partition
	left join dimentity e on e.entityID = a.DATAAREAID
	left JOIN (select distinct FullDate ,[FiscalPeriodKey],EntityKey from DimFinancialCalendar where FullDate = eomonth(fulldate)) P ON  p.EntityKey = e.EntityKey
	--left join [dbo].[LedgerEntityStaging] l on l.[LEGALENTITYID] = a.dataareaid 
	where year(fulldate) >2017
	and year(fulldate) >= year(getdate())-2

	union

	
-- Normal baseline budget entries
SELECT DISTINCT DIMENSIONDISPLAYVALUE
	,[MainAccount]
    ,[Department]
    ,[Project]
    ,[Task]
	,DATE
	,[FiscalPeriodKey] AS FISCALPERIODKEY
	,'Budget' TransactionType
	,BUDGETMODELID SubScenario
	,null
	,null
	,null
	,null
	,TRANSACTIONCURRENCYAMOUNT
	,'N/A' IsAllocated
	,b.COMMENT_
	,b.RECID
	,b.PARTITION
	,b.DataAreaID
	,AccountKey
	,ProjectKey
	,DepartmentKey
	,TaskKey
	,e.entitykey
	,null
	,null
	,null
	,null
	,0 as FCastQ1
	,0 as FCastQ2
	,0 as FCastQ3
	,0 as FCastQ4
FROM BudgetRegisterEntryStaging b
 JOIN [dbo].[DisplayValueExplosion] d ON d.DisplayValue = b.DIMENSIONDISPLAYVALUE
			and d.DataAreaID = b.DataAreaID
			and d.Partition = b.PARTITION
	left join DimAccount ac on ac.MainAccountNumber = d.MainAccount and ac.partition = d.partition
	left join DimDepartment dep on dep.DepartmentNumber = d.Department --and d.partition = z.partition
	left join dimproject pro on pro.dataareaid = b.DATAAREAID and pro.ProjectNumber = d.Project and pro.partition = b.partition
	left join dimtask t on t.dataareaid = b.DATAAREAID and t.TaskNumber = d.task and t.partition = b.partition
	left join dimentity e on e.entityID = b.DATAAREAID	
	left 	 JOIN DimFinancialCalendar P ON P.FullDate = DATE and p.EntityKey = e.EntityKey
	where b.DIMENSIONDISPLAYVALUE not LIKE 'hc%' and ( BUDGETMODELID like 'GP%' or budgetmodelid ='BUDGET')-- Baseline budgets

union


SELECT DISTINCT  DIMENSIONDISPLAYVALUE DisplayValue
	,[MainAccount] Account
    ,[Department] Department
    ,[Project] Project
    ,[Task] Task
	,FullDate Date
	,[FiscalPeriodKey] AS FiscalPeriodKey
	,'Budget' TransactionType
	,'Budget' SubScenario
	,'' InvoiceNumber
	,0 ReportingCurrencyAmount
	,0 AccountingCurrencyAmount
	,0 TransactionCurrencyAmount
	,0 BudgetAmount
	,'N/A' IsAllocated
	, '' DESCRIPTION
	,[FiscalPeriodKey]
	,a.PARTITION Partition
	,a.DataAreaID LegalEntity
	,AccountKey
	,ProjectKey
	,DepartmentKey
	,TaskKey
	,e.EntityKey
	,'' [REPORTINGCURRENCYCODE]
      ,'' [ACCOUNTINGCURRENCYCODE]
	  ,'' TRANSACTIONCURRENCYCODE,
	  '' VOUCHER
	  ,0 as FCastQ1
		,0 as FCastQ2
		,0 as FCastQ3
		,0 as FCastQ4
		
FROM (select distinct dataareaid, DIMENSIONDISPLAYVALUE,PARTITION 
from BudgetRegisterEntryStaging
where --dataareaid = 'ions' and
	 DIMENSIONDISPLAYVALUE not LIKE 'hc%') a
left JOIN [dbo].[DisplayValueExplosion] d ON d.DisplayValue = a.DIMENSIONDISPLAYVALUE
			and d.DataAreaID = a.DataAreaID
			and d.Partition = a.PARTITION
	left join DimAccount ac on ac.MainAccountNumber = d.MainAccount and ac.partition = d.partition
	left join DimDepartment dep on dep.DepartmentNumber = d.Department --and d.partition = z.partition
	left join dimproject pro on pro.dataareaid = a.DATAAREAID and pro.ProjectNumber = d.Project and pro.partition = a.partition
	left join dimtask t on t.dataareaid = a.DATAAREAID and t.TaskNumber = d.task and t.partition = a.partition
	left join dimentity e on e.entityID = a.DATAAREAID
	left JOIN (select distinct FullDate ,[FiscalPeriodKey],EntityKey from DimFinancialCalendar where FullDate = eomonth(fulldate)) P ON  p.EntityKey = e.EntityKey
	--left join [dbo].[LedgerEntityStaging] l on l.[LEGALENTITYID] = a.dataareaid 
	where year(fulldate) >2017
	and year(fulldate) >= year(getdate())-2
						
union
-- Actual Headcount journal entries
SELECT DISTINCT ACCOUNTDISPLAYVALUE DisplayValue
	,[MainAccount] Account
    ,[Department] Department
    ,[Project] Project
    ,[Task] Task
	,ACCOUNTINGDATE Date
	,[FiscalPeriodKey] AS FiscalPeriodKey
	,'Actual Headcount' TransactionType
	,'Actual Headcount' SubScenario
	,null
	,TRANSACTIONCURRENCYAMOUNT
	,null
	,null
	,null BudgetAmount
	,'N/A' IsAllocated
	,a.DESCRIPTION
	,a.RECID
	,a.PARTITION Partition
	,a.DataAreaID LegalEntity
	,AccountKey
	,ProjectKey
	,DepartmentKey
	,TaskKey
	,e.EntityKey
	,null
	,null
	,null
	,null
	,0 as FCastQ1
	,0 as FCastQ2
	,0 as FCastQ3
	,0 as FCastQ4
FROM GeneralJournalAccountEntryStaging a
 JOIN [dbo].[DisplayValueExplosion] d ON d.DisplayValue = a.ACCOUNTDISPLAYVALUE
			and d.DataAreaID = a.DataAreaID
			and d.Partition = a.PARTITION
	left join DimAccount ac on ac.MainAccountNumber = d.MainAccount and ac.partition = d.partition
	left join DimDepartment dep on dep.DepartmentNumber = d.Department --and d.partition = z.partition
	left join dimproject pro on pro.dataareaid = a.DATAAREAID and pro.ProjectNumber = d.Project and pro.partition = a.partition
	left join dimtask t on t.dataareaid = a.DATAAREAID and t.TaskNumber = d.task and t.partition = a.partition
	left join dimentity e on e.entityID = a.DATAAREAID
	left 	 JOIN DimFinancialCalendar P ON P.FullDate = ACCOUNTINGDATE and p.EntityKey = e.EntityKey
						
		 where LEDGERACCOUNT LIKE 'hc-%'
UNION
-- Headcount baseline budget entries
SELECT DISTINCT DIMENSIONDISPLAYVALUE
	,[MainAccount]
    ,[Department]
    ,[Project]
    ,[Task]
	,DATE
	,[FiscalPeriodKey] AS FISCALPERIODKEY
	,'Budget Headcount' TransactionType
	,BUDGETMODELID SubScenario
	,null
	,null
	,null
	,null
	,QUANTITY
	,'N/A' IsAllocated
	,b.COMMENT_
	,b.RECID
	,b.PARTITION
	,b.DataAreaID
	,AccountKey
	,ProjectKey
	,DepartmentKey
	,TaskKey
	,e.entitykey
	,null
	,null
	,null
	,null
	,0 as FCastQ1
	,0 as FCastQ2
	,0 as FCastQ3
	,0 as FCastQ4
FROM BudgetRegisterEntryStaging b
 JOIN [dbo].[DisplayValueExplosion] d ON d.DisplayValue = b.DIMENSIONDISPLAYVALUE
			and d.DataAreaID = b.DataAreaID
			and d.Partition = b.PARTITION
	left join DimAccount ac on ac.MainAccountNumber = d.MainAccount and ac.partition = d.partition
	left join DimDepartment dep on dep.DepartmentNumber = d.Department --and d.partition = z.partition
	left join dimproject pro on pro.dataareaid = b.DATAAREAID and pro.ProjectNumber = d.Project and pro.partition = b.partition
	left join dimtask t on t.dataareaid = b.DATAAREAID and t.TaskNumber = d.task and t.partition = b.partition
	left join dimentity e on e.entityID = b.DATAAREAID
	left 	 JOIN DimFinancialCalendar P ON P.FullDate = DATE and p.EntityKey = e.EntityKey
	where DIMENSIONDISPLAYVALUE LIKE 'hc-%' and ( BUDGETMODELID like 'GP%' or budgetmodelid ='BUDGET') -- Baseline budgets

UNION
-- Normal forecast entries
SELECT DISTINCT DIMENSIONDISPLAYVALUE
	,[MainAccount]
    ,[Department]
    ,[Project]
    ,[Task]
	,DATE
	,[FiscalPeriodKey] AS FISCALPERIODKEY
	,'Forecast' TransactionType
	,BUDGETMODELID SubScenario
	,null
	,null
	,null
	,null
	,0
	,'N/A' IsAllocated
	,b.COMMENT_
	,b.RECID
	,b.PARTITION
	,b.DataAreaID
	,AccountKey
	,ProjectKey
	,DepartmentKey
	,TaskKey
	,e.entitykey
	,null
	,null
	,null
	,null
	,Case When BUDGETMODELID='FCSTQ1' THen TRANSACTIONCURRENCYAMOUNT ELSE 0 END as FCastQ1
	,Case When BUDGETMODELID='FCSTQ2' THen TRANSACTIONCURRENCYAMOUNT ELSE 0 END as FCastQ2
	,Case When BUDGETMODELID='FCSTQ3' THen TRANSACTIONCURRENCYAMOUNT ELSE 0 END as FCastQ3
	,Case When BUDGETMODELID='FCSTQ4' THen TRANSACTIONCURRENCYAMOUNT ELSE 0 END as FCastQ4
FROM BudgetRegisterEntryStaging b
 JOIN [dbo].[DisplayValueExplosion] d ON d.DisplayValue = b.DIMENSIONDISPLAYVALUE
			and d.DataAreaID = b.DataAreaID
			and d.Partition = b.PARTITION
	left join DimAccount ac on ac.MainAccountNumber = d.MainAccount and ac.partition = d.partition
	left join DimDepartment dep on dep.DepartmentNumber = d.Department --and d.partition = z.partition
	left join dimproject pro on pro.dataareaid = b.DATAAREAID and pro.ProjectNumber = d.Project and pro.partition = b.partition
	left join dimtask t on t.dataareaid = b.DATAAREAID and t.TaskNumber = d.task and t.partition = b.partition
	left join dimentity e on e.entityID = b.DATAAREAID	
	left 	 JOIN DimFinancialCalendar P ON P.FullDate = DATE and p.EntityKey = e.EntityKey
	where b.DIMENSIONDISPLAYVALUE not LIKE 'hc%' and BUDGETMODELID like 'FCSTQ%' -- Forecast budgets

UNION
-- Headcount forecast entries
SELECT DISTINCT DIMENSIONDISPLAYVALUE
	,[MainAccount]
    ,[Department]
    ,[Project]
    ,[Task]
	,DATE
	,[FiscalPeriodKey] AS FISCALPERIODKEY
	,'Forecast' TransactionType
	,BUDGETMODELID SubScenario
	,null
	,null
	,null
	,null
	,0
	,'N/A' IsAllocated
	,b.COMMENT_
	,b.RECID
	,b.PARTITION
	,b.DataAreaID
	,AccountKey
	,ProjectKey
	,DepartmentKey
	,TaskKey
	,e.entitykey
	,null
	,null
	,null
	,null
	,Case When BUDGETMODELID='FCSTQ1' THen QUANTITY ELSE 0 END as FCastQ1
	,Case When BUDGETMODELID='FCSTQ2' THen QUANTITY ELSE 0 END as FCastQ2
	,Case When BUDGETMODELID='FCSTQ3' THen QUANTITY ELSE 0 END as FCastQ3
	,Case When BUDGETMODELID='FCSTQ4' THen QUANTITY ELSE 0 END as FCastQ4
FROM BudgetRegisterEntryStaging b
 JOIN [dbo].[DisplayValueExplosion] d ON d.DisplayValue = b.DIMENSIONDISPLAYVALUE
			and d.DataAreaID = b.DataAreaID
			and d.Partition = b.PARTITION
	left join DimAccount ac on ac.MainAccountNumber = d.MainAccount and ac.partition = d.partition
	left join DimDepartment dep on dep.DepartmentNumber = d.Department --and d.partition = z.partition
	left join dimproject pro on pro.dataareaid = b.DATAAREAID and pro.ProjectNumber = d.Project and pro.partition = b.partition
	left join dimtask t on t.dataareaid = b.DATAAREAID and t.TaskNumber = d.task and t.partition = b.partition
	left join dimentity e on e.entityID = b.DATAAREAID	
	left 	 JOIN DimFinancialCalendar P ON P.FullDate = DATE and p.EntityKey = e.EntityKey
	where b.DIMENSIONDISPLAYVALUE  LIKE 'hc%' and BUDGETMODELID like 'FCSTQ%' -- Forecast budgets
		)Z
	where [FiscalPeriodKey] is not null
UPDATE FactTransaction
SET SecurityKey=
	(SELECT SecurityMasterID
	FROM D365SecurityMaster sm
	WHERE sm.DepartmentKey=FactTransaction.DepartmentKey and
		sm.EntityKey=FactTransaction.EntityKey)

/*
IONIS ADDED: Pull Adaptive Forecast from Azure Storage file
*/
--DROP AND CREATE STAGING TABLE
DROP TABLE zRLC_AdaptiveForecastStage;

CREATE TABLE zRLC_AdaptiveForecastStage (
	AccountName VARCHAR(500) NOT NULL,
	AccountCode VARCHAR(50) NOT NULL,
	LevelName VARCHAR(100) NOT NULL,
	Project VARCHAR(50),
	Task VARCHAR(50),
	Jan2020 FLOAT,
	Feb2020 FLOAT,
	Mar2020 FLOAT,
	Apr2020 FLOAT,
	May2020 FLOAT,
	Jun2020 FLOAT,
	Jul2020 FLOAT,
	Aug2020 FLOAT,
	Sep2020 FLOAT,
	Oct2020 FLOAT,
	Nov2020 FLOAT,
	Dec2020 FLOAT
)

--BULK INSERT CSV to STAGING TABLE
BULK INSERT zRLC_AdaptiveForecastStage
FROM 'Adaptive5.csv'
WITH (
	DATA_SOURCE = 'boomifilestorage',
	FORMAT = 'CSV',
	FIRSTROW = 2
)

--DO SOME IN-PLACE CLEAN UP
UPDATE zRLC_AdaptiveForecastStage
SET Project = '000 - General Admin'
WHERE Project = 'Project'

UPDATE zRLC_AdaptiveForecastStage
SET Task = '000 - GEWNERAL'
WHERE Task = 'Task'

INSERT INTO FactTransaction (AccountString, TransactionDate, Scenario, SubScenario,
							 TransactionDescription, AccountKey, DepartmentKey, ProjectKey, TaskKey, 
							 FiscalPeriodKey, EntityKey, FCastQ3Amount, RecID, [Partition])
SELECT CONCAT(LEFT(AD.AccountCode,4),'-',LEFT(AD.LevelName,3),'-',LEFT(AD.Project,3),'-',LEFT(AD.Task,3)) AS AccountString,
	AD.PeriodDate AS TransactionDate,
	'Forecast' AS Scenario,
	'FCSTQ3' AS SubScenario,
	'Adaptive forecast data' AS TransactionDescription,
	A.AccountKey,
	D.DepartmentKey,
	P.ProjectKey,
	T.TaskKey,
	C.[FiscalPeriodKey],
	E.EntityKey,
	PeriodAmount AS 'FCastQ3Amount',
	407+ROW_NUMBER() OVER(ORDER BY AD.AccountCode) AS ReID,
	'initial' as Partition
FROM (SELECT AccountName, AccountCode, LevelName, Project, Task, 
			CASE PeriodName
				WHEN 'Jan2020' THEN '01/01/2020'
				WHEN 'Feb2020' THEN '02/01/2020'
				WHEN 'Mar2020' THEN '03/01/2020'
				WHEN 'Apr2020' THEN '04/01/2020'
				WHEN 'May2020' THEN '05/01/2020'
				WHEN 'Jun2020' THEN '06/01/2020'
				WHEN 'Jul2020' THEN '07/01/2020'
				WHEN 'Aug2020' THEN '08/01/2020'
				WHEN 'Sep2020' THEN '09/01/2020'
				WHEN 'Oct2020' THEN '10/01/2020'
				WHEN 'Nov2020' THEN '11/01/2020'
				WHEN 'Dec2020' THEN '12/01/2020'
				END AS PeriodDate, 
				PeriodAmount
		FROM 
			(SELECT AccountName, AccountCode, LevelName, Project, Task, Jan2020, Feb2020, Mar2020, Apr2020, May2020, Jun2020, Jul2020, Aug2020, Sep2020, Oct2020, Nov2020, Dec2020
			 FROM zRLC_AdaptiveForecastStage) p
			UNPIVOT
			(PeriodAmount FOR PeriodName IN
				(Jan2020, Feb2020, Mar2020, Apr2020, May2020, Jun2020, Jul2020, Aug2020, Sep2020, Oct2020, Nov2020, Dec2020)
			) AS unpvt
		) AS AD
	INNER JOIN DimAccount AS A ON LEFT(AD.AccountCode,4) = A.MainAccountNumber
	INNER JOIN DimDepartment AS D ON LEFT(AD.LevelName,3) = D.DepartmentNumber
	INNER JOIN DimEntity AS E ON RIGHT(AD.LevelName,4) = E.EntityID
	INNER JOIN DimProject AS P ON LEFT(AD.Project,3) = P.ProjectNumber AND E.EntityID = P.DataAreaID
	INNER JOIN DimTask AS T ON LEFT(AD.Task,3) = T.TaskNumber AND E.EntityID = T.DataAreaID
	INNER JOIN DimFinancialCalendar AS C ON DATEPART(day,AD.PeriodDate) = C.DayNumber
										AND DATEPART(month,AD.PeriodDate) = C.MonthNumer 
										AND DATEPART(year,AD.PeriodDate) = C.FiscalYear
										AND E.EntityKey = C.EntityKey
										AND C.Calendar = 'FISCAL'
WHERE AD.LevelName <> 'Consolidated'

DROP TABLE zRLC_AdaptiveForecastStage;
		
/*
IONIS ADDED: Pull Adaptive Forecast from Azure Storage file
*/
--DROP AND CREATE STAGING TABLE
DROP TABLE IF EXISTS #AdaptiveBudgetStage
GO
PRINT N'Creating [dbo].[spFactTransactionPL]...';


GO

CREATE PROCEDURE [dbo].[spFactTransactionPL] as


truncate table facttransactionPL
insert into FACTTRANSACTIONPL ([AccountString]
      ,[TransactionDate]
      ,[Scenario]
	  ,InvoiceNumber
      ,[TransactionDescription]
      ,REPORTINGCURRENCYAMOUNT
		,ACCOUNTINGCURRENCYAMOUNT
		,TRANSACTIONAMOUNT
      ,[BudgetAmount]
      ,[IsAllocated]
      ,[RecID]
      ,[Partition]
      ,[AccountKey]
      ,[DepartmentKey]
      ,[ProjectKey]
      ,[TaskKey]
	  ,EntityKey
      ,[FiscalPeriodKey]
	  ,ReportingCurrencyCode 
	  ,AccountingCurrencyCode 
	  ,TransactionCurrencyCode
	  ,Voucher
      )
SELECT z.DisplayValue AccountString
		,z.Date TransactionDate
		,z.TransactionType Scenario 
		,z.InvoiceNumber
		,DESCRIPTION TransactionDescription
		,REPORTINGCURRENCYAMOUNT
		,ACCOUNTINGCURRENCYAMOUNT
		,TRANSACTIONCURRENCYAMOUNT
		,z.BudgetAmount
		,IsAllocated
		--,z.legalentity Entity
		--,le.EntityDescription
		--,le.EntityDescriptionID
		,z.RECID RecID
		,z.partition Partition
		,AccountKey
		,DepartmentKey
		,ProjectKey
		,TaskKey
		,entitykey
		,z.[FiscalPeriodKey]
		,ReportingCurrencyCode 
	    ,AccountingCurrencyCode 
	    ,TransactionCurrencyCode,
		VOUCHER
FROM (
SELECT DISTINCT ACCOUNTDISPLAYVALUE DisplayValue
	,[MainAccount] Account
    ,[Department] Department
    ,[Project] Project
    ,[Task] Task
	,ACCOUNTINGDATE Date
	,[FiscalPeriodKey] AS FiscalPeriodKey
	,'Actual' TransactionType
	,case when a.DESCRIPTION like 'Purchase Invoice%' then DOCUMENTNUMBER end InvoiceNumber
	--,CASE WHEN [MainAccount] LIKE '1%' OR [MainAccount] LIKE '3%' OR [MainAccount] LIKE '4%' THEN -1 ELSE 1 END *
	--	TRANSACTIONCURRENCYAMOUNT ActualAmount
	,--CASE WHEN ac.MainAccountType in ('Liability','Revenue') THEN -1 ELSE 1 END *
		REPORTINGCURRENCYAMOUNT ReportingCurrencyAmount
	,--CASE WHEN ac.MainAccountType in ('Liability','Revenue') THEN -1 ELSE 1 END *
		ACCOUNTINGCURRENCYAMOUNT AccountingCurrencyAmount
	,--CASE WHEN ac.MainAccountType in ('Liability','Revenue') THEN -1 ELSE 1 END *
		TRANSACTIONCURRENCYAMOUNT TransactionCurrencyAmount
		--TRANSACTIONCURRENCYAMOUNT,ACCOUNTINGCURRENCYAMOUNT,REPORTINGCURRENCYAMOUNT
	,null BudgetAmount
	,'N/A' IsAllocated
	,a.DESCRIPTION
	,a.RECID
	,a.PARTITION Partition
	,a.DataAreaID LegalEntity
	,AccountKey
	,ProjectKey
	,DepartmentKey
	,TaskKey
	,e.EntityKey
	,l.[REPORTINGCURRENCY] [REPORTINGCURRENCYCODE]
      ,l.[ACCOUNTINGCURRENCY] [ACCOUNTINGCURRENCYCODE]
	  ,a.TRANSACTIONCURRENCYCODE,
	  a.VOUCHER
FROM GeneralJournalAccountEntryStaging a
left JOIN [dbo].[DisplayValueExplosion] d ON d.DisplayValue = a.ACCOUNTDISPLAYVALUE
			and d.DataAreaID = a.DataAreaID
			and d.Partition = a.PARTITION
	left join DimAccount ac on ac.MainAccountNumber = d.MainAccount and ac.partition = d.partition
	left join DimDepartment dep on dep.DepartmentNumber = d.Department --and d.partition = z.partition
	left join dimproject pro on pro.dataareaid = a.DATAAREAID and pro.ProjectNumber = d.Project and pro.partition = a.partition
	left join dimtask t on t.dataareaid = a.DATAAREAID and t.TaskNumber = d.task and t.partition = a.partition
	left join dimentity e on e.entityID = a.DATAAREAID
	left 	 JOIN DimFinancialCalendar P ON P.FullDate = ACCOUNTINGDATE and p.EntityKey = e.EntityKey
	left join [dbo].[LedgerEntityStaging] l on l.[LEGALENTITYID] = a.dataareaid 
		
	--where a.RECID > (select max(recid) from RecordLog 
	--					where sourceTable = 'FactTransaction' 
	--						and type = 'Actual' )
						
--		 where DisplayValue = '1001---'
	where LEDGERACCOUNT not LIKE 'hc%'
UNION

SELECT DISTINCT DIMENSIONDISPLAYVALUE
	,[MainAccount]
    ,[Department]
    ,[Project]
    ,[Task]
	,DATE
	,[FiscalPeriodKey] AS FiscalPeriodKey
	,'Budget' TransactionType
	,null
	,null
	,null
	,null
	,TRANSACTIONCURRENCYAMOUNT
	,'N/A' IsAllocated
	,b.COMMENT_
	,b.RECID
	,b.PARTITION
	,b.DataAreaID
	,AccountKey
	,ProjectKey
	,DepartmentKey
	,TaskKey
	,e.entitykey
	,null
	,null
	,null
	,null
FROM BudgetRegisterEntryStaging b
 JOIN [dbo].[DisplayValueExplosion] d ON d.DisplayValue = b.DIMENSIONDISPLAYVALUE
			and d.DataAreaID = b.DataAreaID
			and d.Partition = b.PARTITION
	left join DimAccount ac on ac.MainAccountNumber = d.MainAccount and ac.partition = d.partition
	left join DimDepartment dep on dep.DepartmentNumber = d.Department --and d.partition = z.partition
	left join dimproject pro on pro.dataareaid = b.DATAAREAID and pro.ProjectNumber = d.Project and pro.partition = b.partition
	left join dimtask t on t.dataareaid = b.DATAAREAID and t.TaskNumber = d.task and t.partition = b.partition
	left join dimentity e on e.entityID = b.DATAAREAID	
	left 	 JOIN DimFinancialCalendar P ON P.FullDate = DATE and p.EntityKey = e.EntityKey
	--where b.RECID > (select max(recid) from RecordLog 
	--					where sourceTable = 'FactTransaction' 
	--						and type = 'Budget' )
	where b.DIMENSIONDISPLAYVALUE not LIKE 'hc%'
						
union
SELECT DISTINCT ACCOUNTDISPLAYVALUE DisplayValue
	,[MainAccount] Account
    ,[Department] Department
    ,[Project] Project
    ,[Task] Task
	,ACCOUNTINGDATE Date
	,[FiscalPeriodKey] AS FiscalPeriodKey
	,'Actual Headcount' TransactionType
	,null
	--,CASE WHEN [MainAccount] LIKE '1%' OR [MainAccount] LIKE '3%' OR [MainAccount] LIKE '4%' THEN -1 ELSE 1 END *
	--	TRANSACTIONCURRENCYAMOUNT ActualAmount
	,QUANTITY
	,null
	,null
		--TRANSACTIONCURRENCYAMOUNT,ACCOUNTINGCURRENCYAMOUNT,REPORTINGCURRENCYAMOUNT
	,null BudgetAmount
	,'N/A' IsAllocated
	,a.DESCRIPTION
	,a.RECID
	,a.PARTITION Partition
	,a.DataAreaID LegalEntity
	,AccountKey
	,ProjectKey
	,DepartmentKey
	,TaskKey
	,e.EntityKey
	,null
	,null
	,null
	,null
FROM GeneralJournalAccountEntryStaging a
 JOIN [dbo].[DisplayValueExplosion] d ON d.DisplayValue = a.ACCOUNTDISPLAYVALUE
			and d.DataAreaID = a.DataAreaID
			and d.Partition = a.PARTITION
	left join DimAccount ac on ac.MainAccountNumber = d.MainAccount and ac.partition = d.partition
	left join DimDepartment dep on dep.DepartmentNumber = d.Department --and d.partition = z.partition
	left join dimproject pro on pro.dataareaid = a.DATAAREAID and pro.ProjectNumber = d.Project and pro.partition = a.partition
	left join dimtask t on t.dataareaid = a.DATAAREAID and t.TaskNumber = d.task and t.partition = a.partition
	left join dimentity e on e.entityID = a.DATAAREAID
	--where a.RECID > (select max(recid) from RecordLog 
	--					where sourceTable = 'FactTransaction' 
	--						and type = 'Actual' )
	left 	 JOIN DimFinancialCalendar P ON P.FullDate = ACCOUNTINGDATE and p.EntityKey = e.EntityKey
						
		 where LEDGERACCOUNT LIKE 'hc-%'
UNION

SELECT DISTINCT DIMENSIONDISPLAYVALUE
	,[MainAccount]
    ,[Department]
    ,[Project]
    ,[Task]
	,DATE
	,[FiscalPeriodKey] AS FiscalPeriodKey
	,'Budget Headcount' TransactionType
	,null
	,null
	,null
	,null
	,QUANTITY
	,'N/A' IsAllocated
	,b.COMMENT_
	,b.RECID
	,b.PARTITION
	,b.DataAreaID
	,AccountKey
	,ProjectKey
	,DepartmentKey
	,TaskKey
	,e.entitykey
	,null
	,null
	,null
	,null
FROM BudgetRegisterEntryStaging b
 JOIN [dbo].[DisplayValueExplosion] d ON d.DisplayValue = b.DIMENSIONDISPLAYVALUE
			and d.DataAreaID = b.DataAreaID
			and d.Partition = b.PARTITION
	left join DimAccount ac on ac.MainAccountNumber = d.MainAccount and ac.partition = d.partition
	left join DimDepartment dep on dep.DepartmentNumber = d.Department --and d.partition = z.partition
	left join dimproject pro on pro.dataareaid = b.DATAAREAID and pro.ProjectNumber = d.Project and pro.partition = b.partition
	left join dimtask t on t.dataareaid = b.DATAAREAID and t.TaskNumber = d.task and t.partition = b.partition
	left join dimentity e on e.entityID = b.DATAAREAID
	left 	 JOIN DimFinancialCalendar P ON P.FullDate = DATE and p.EntityKey = e.EntityKey
	where DIMENSIONDISPLAYVALUE LIKE 'hc-%'
	)Z
	where [FiscalPeriodKey] is not null

UPDATE FACTTRANSACTIONPL
SET SecurityKey=
	(SELECT SecurityMasterID
	FROM D365SecurityMaster sm
	WHERE sm.DepartmentKey=FACTTRANSACTIONPL.DepartmentKey and
		sm.EntityKey=FACTTRANSACTIONPL.EntityKey)
GO
PRINT N'Creating [dbo].[spInitializeDimEmployee]...';


GO
CREATE procedure [dbo].[spInitializeDimEmployee] as

truncate table ActiveEmployeesHistory

insert into ActiveEmployeesHistory

SELECT [RowID]
      ,[EmployeeID]
      ,[LastName]
      ,[FirstName]
      ,[NickName]
      ,[MiddleName]
      ,[WorkPhone]
      ,[CellPhone]
      ,[Email]
      ,[Title]
      ,[ReportsToEmployeeID]
      ,[CompanyCode]
	  --,CASE WHEN NOT CompanyCode in (SELECT EntityID from DimEntity) or CompanyCode is null THEN 'IONS' ELSE CompanyCode END
      ,[Department]
      ,[Building]
	  --,CASE WHEN NOT CompanyCode in (SELECT EntityID from DimEntity) or CompanyCode is null THEN 'XXXX' ELSE [Building] END
      ,[DepartmentCode]
	  --,CASE WHEN DepartmentCode is null then 'NULL' ELSE DepartmentCode end
      ,[EndDate]
      ,[ExemptStatus]
      ,[FullTimeEquivalent]
      ,[PersonJobStartDate]
      ,[StatusCode]
      ,[WorkStatus]
      ,[StockLevelCode]
      ,[JobCode]
      ,[JobDescription]
      ,[StatusStartDate] 
	  ,convert(date,Getdate()) as FromDate
	  ,'1/1/2099' as ToDate
	  from ActiveEmployees

update ActiveEmployeesHistory
set FromDate=PersonJobStartDate

TRUNCATE TABLE DimEmployee
INSERT INTO DimEmployee
SELECT [RowID]
      ,[EmployeeID]
      ,[LastName]
      ,[FirstName]
      ,[NickName]
      ,[MiddleName]
      ,[WorkPhone]
      ,[CellPhone]
      ,[Email]
      ,[Title]
      ,[ReportsToEmployeeID]
      ,[CompanyCode]
      ,[Department]
      ,[Building]
      ,[DepartmentCode]
      ,ae.[EndDate]
      ,[ExemptStatus]
      ,[FullTimeEquivalent]
      ,[PersonJobStartDate]
      ,[StatusCode]
      ,[WorkStatus]
      ,[StockLevelCode]
      ,[JobCode]
      ,[JobDescription]
      ,[StatusStartDate] 
	  ,fc.MonthNumer, 
	  fc.MonthName, 
	  fc.Year, 
	  fc.[FiscalPeriodKey]
FROM ActiveEmployeesHistory ae
JOIN DimEntity e on e.EntityID=ae.CompanyCode
JOIN DimFinancialCalendar fc on fc.EntityKey=e.EntityKey and fc.FullDate>=ae.FromDate and 
	fc.FullDate<=dateadd(m,1,GETDATE()) and fc.FullDate>='1/1/2019' and
	fc.FullDate<=ae.ToDate and MONTH(dateadd(d,1,fc.FullDate))<>MONTH(fc.FullDate)
ORDER BY EmployeeID
GO
PRINT N'Creating [dbo].[spLoadDimEmployee]...';


GO
CREATE PROCEDURE spLoadDimEmployee as
-- Move Current to Previous in prep for refreshing current
TRUNCATE TABLE ActiveEmployeesPrevious

-- Reload current table from the latest load
INSERT INTO ActiveEmployeesPrevious
SELECT [RowID]
      ,[EmployeeID]
      ,[LastName]
      ,[FirstName]
      ,[NickName]
      ,[MiddleName]
      ,[WorkPhone]
      ,[CellPhone]
      ,[Email]
      ,[Title]
      ,[ReportsToEmployeeID]
      ,[CompanyCode]
      ,[Department]
      ,[Building]
      ,[DepartmentCode]
      ,[EndDate]
      ,[ExemptStatus]
      ,[FullTimeEquivalent]
      ,[PersonJobStartDate]
      ,[StatusCode]
      ,[WorkStatus]
      ,[StockLevelCode]
      ,[JobCode]
      ,[JobDescription]
      ,[StatusStartDate]
      ,[EEOEstablishmentName]
FROM [dbo].[ActiveEmployeesCurrent]

-- Empty the current table
TRUNCATE TABLE ActiveEmployeesCurrent

-- Reload current table from the latest load
INSERT INTO ActiveEmployeesCurrent
SELECT [RowID]
      ,[EmployeeID]
      ,[LastName]
      ,[FirstName]
      ,[NickName]
      ,[MiddleName]
      ,[WorkPhone]
      ,[CellPhone]
      ,[Email]
      ,[Title]
      ,[ReportsToEmployeeID]
      ,[CompanyCode]
      ,[Department]
      ,[Building]
      ,[DepartmentCode]
      ,[EndDate]
      ,[ExemptStatus]
      ,[FullTimeEquivalent]
      ,[PersonJobStartDate]
      ,[StatusCode]
      ,[WorkStatus]
      ,[StockLevelCode]
      ,[JobCode]
      ,[JobDescription]
      ,[StatusStartDate]
      ,[EEOEstablishmentName]
FROM [dbo].[ActiveEmployees] 

TRUNCATE TABLE ActiveEmployeesInserted

-- Load records in latest set not in previous set of active employees
INSERT INTO ActiveEmployeesInserted

SELECT [RowID]
      ,[EmployeeID]
      ,[LastName]
      ,[FirstName]
      ,[NickName]
      ,[MiddleName]
      ,[WorkPhone]
      ,[CellPhone]
      ,[Email]
      ,[Title]
      ,[ReportsToEmployeeID]
      ,[CompanyCode]
      ,[Department]
      ,[Building]
      ,[DepartmentCode]
      ,[EndDate]
      ,[ExemptStatus]
      ,[FullTimeEquivalent]
      ,[PersonJobStartDate]
      ,[StatusCode]
      ,[WorkStatus]
      ,[StockLevelCode]
      ,[JobCode]
      ,[JobDescription]
      ,[StatusStartDate]
      ,[EEOEstablishmentName] FROM ActiveEmployeesCurrent

EXCEPT

SELECT [RowID]
      ,[EmployeeID]
      ,[LastName]
      ,[FirstName]
      ,[NickName]
      ,[MiddleName]
      ,[WorkPhone]
      ,[CellPhone]
      ,[Email]
      ,[Title]
      ,[ReportsToEmployeeID]
      ,[CompanyCode]
      ,[Department]
      ,[Building]
      ,[DepartmentCode]
      ,[EndDate]
      ,[ExemptStatus]
      ,[FullTimeEquivalent]
      ,[PersonJobStartDate]
      ,[StatusCode]
      ,[WorkStatus]
      ,[StockLevelCode]
      ,[JobCode]
      ,[JobDescription]
      ,[StatusStartDate]
      ,[EEOEstablishmentName] FROM ActiveEmployeesPrevious


TRUNCATE TABLE ActiveEmployeesDeleted

-- Load records in latest set not in current set of active employees
INSERT INTO ActiveEmployeesDeleted

SELECT [RowID]
      ,[EmployeeID]
      ,[LastName]
      ,[FirstName]
      ,[NickName]
      ,[MiddleName]
      ,[WorkPhone]
      ,[CellPhone]
      ,[Email]
      ,[Title]
      ,[ReportsToEmployeeID]
      ,[CompanyCode]
      ,[Department]
      ,[Building]
      ,[DepartmentCode]
      ,[EndDate]
      ,[ExemptStatus]
      ,[FullTimeEquivalent]
      ,[PersonJobStartDate]
      ,[StatusCode]
      ,[WorkStatus]
      ,[StockLevelCode]
      ,[JobCode]
      ,[JobDescription]
      ,[StatusStartDate]
      ,[EEOEstablishmentName] FROM ActiveEmployeesPrevious

EXCEPT

SELECT [RowID]
      ,[EmployeeID]
      ,[LastName]
      ,[FirstName]
      ,[NickName]
      ,[MiddleName]
      ,[WorkPhone]
      ,[CellPhone]
      ,[Email]
      ,[Title]
      ,[ReportsToEmployeeID]
      ,[CompanyCode]
      ,[Department]
      ,[Building]
      ,[DepartmentCode]
      ,[EndDate]
      ,[ExemptStatus]
      ,[FullTimeEquivalent]
      ,[PersonJobStartDate]
      ,[StatusCode]
      ,[WorkStatus]
      ,[StockLevelCode]
      ,[JobCode]
      ,[JobDescription]
      ,[StatusStartDate]
      ,[EEOEstablishmentName] FROM ActiveEmployeesCurrent

-- Terminate the ones that are not in current file
UPDATE ActiveEmployeesHistory
SET ToDate=CONVERT(DATE,GETDATE())
WHERE EmployeeID in (SELECT EmployeeiD FROM ActiveEmployeesDeleted) and
	ToDate='1/1/2099'

-- Load the new records
INSERT INTO ActiveEmployeesHistory
SELECT [RowID]
      ,[EmployeeID]
      ,[LastName]
      ,[FirstName]
      ,[NickName]
      ,[MiddleName]
      ,[WorkPhone]
      ,[CellPhone]
      ,[Email]
      ,[Title]
      ,[ReportsToEmployeeID]
      ,[CompanyCode]
      ,[Department]
      ,[Building]
      ,[DepartmentCode]
      ,[EndDate]
      ,[ExemptStatus]
      ,[FullTimeEquivalent]
      ,[PersonJobStartDate]
      ,[StatusCode]
      ,[WorkStatus]
      ,[StockLevelCode]
      ,[JobCode]
      ,[JobDescription]
      ,[StatusStartDate] 
	  ,convert(date,Getdate()) as FromDate
	  ,'1/1/2099' as ToDate
	  from ActiveEmployeesInserted

-- Reload DimEmployee based on new history
TRUNCATE TABLE DimEmployee
INSERT INTO DimEmployee
SELECT [RowID]
      ,[EmployeeID]
      ,[LastName]
      ,[FirstName]
      ,[NickName]
      ,[MiddleName]
      ,[WorkPhone]
      ,[CellPhone]
      ,[Email]
      ,[Title]
      ,[ReportsToEmployeeID]
      ,[CompanyCode]
      ,[Department]
      ,[Building]
      ,[DepartmentCode]
      ,ae.[EndDate]
      ,[ExemptStatus]
      ,[FullTimeEquivalent]
      ,[PersonJobStartDate]
      ,[StatusCode]
      ,[WorkStatus]
      ,[StockLevelCode]
      ,[JobCode]
      ,[JobDescription]
      ,[StatusStartDate] 
	  ,fc.MonthNumer, 
	  fc.MonthName, 
	  fc.Year, 
	  fc.[FiscalPeriodKey]
FROM ActiveEmployeesHistory ae
JOIN DimEntity e on e.EntityID=ae.CompanyCode
JOIN DimFinancialCalendar fc on fc.EntityKey=e.EntityKey and fc.FullDate>=ae.FromDate and 
	-- Don't go beyond current month
	fc.FullDate<=dateadd(m,1,GETDATE()) and 
	-- Starting in 2019
	fc.FullDate>='1/1/2019' and
	-- This gets us so we only consider the last date of the month
	fc.FullDate<=ae.ToDate and MONTH(dateadd(d,1,fc.FullDate))<>MONTH(fc.FullDate)
ORDER BY EmployeeID
GO
PRINT N'Creating [dbo].[spLoadDisplayValueExplosion]...';


GO
CREATE PROCEDURE [dbo].[spLoadDisplayValueExplosion] as
DECLARE @MainAccountID varchar(10), @Department varchar(10), @Project varchar(10), @Task varchar(10), @DisplayValue varchar(50),
	@DashPos1 int,@DashPos2 int,@DashPos3 int, @Partition varchar(20), @DataAreaID varchar(4)

--CREATE TABLE DisplayValueExplosion(
--	DisplayValue varchar(100),
--	MainAccount varchar(10),
--	Department varchar(10),
--	Project varchar(10),
--	Task varchar(10),
--	Partition varchar(20),
--	DataAreaID varchar(4))

-- select * from DisplayValueExplosion

TRUNCATE TABLE DisplayValueExplosion

DECLARE AccountDisplayCursor CURSOR FOR
SELECT DISTINCT ACCOUNTDISPLAYVALUE, PARTITION, DataAreaID
FROM GeneralJournalAccountEntryStaging
UNION
SELECT DISTINCT DIMENSIONDISPLAYVALUE, PARTITION, DataAreaID
FROM BudgetRegisterEntryStaging

OPEN AccountDisplayCursor
FETCH NEXT FROM AccountDisplayCursor INTO @DisplayValue, @Partition, @DataAreaID

WHILE @@FETCH_STATUS=0
BEGIN
	SELECT @DashPos1=CHARINDEX('-',@DisplayValue)
	SELECT @DashPos2=@DashPos1+CHARINDEX('-',SUBSTRING(@DisplayValue,@DashPos1+1,50))
	SELECT @DashPos3=@DashPos2+CHARINDEX('-',SUBSTRING(@DisplayValue,@DashPos2+1,50))
	--SELECT @DisplayValue,@DashPos1,@DashPos2,@DashPos3


	SELECT @MainAccountID=SUBSTRING(@DisplayValue, 1, @DashPos1-1)
	SELECT @Department=SUBSTRING(@DisplayValue, @DashPos1+1, @DashPos2-(@DashPos1+1))
	SELECT @Project=SUBSTRING(@DisplayValue, @DashPos2+1, @DashPos3-(@DashPos2+1))
	SELECT @Task=SUBSTRING(@DisplayValue, @DashPos3+1, 50)

	INSERT INTO DisplayValueExplosion
	SELECT @DisplayValue,@MainAccountID,@Department, @Project, @Task, @Partition, @DataAreaID

	FETCH NEXT FROM AccountDisplayCursor INTO @DisplayValue, @Partition, @DataAreaID
END
CLOSE AccountDisplayCursor
DEALLOCATE AccountDisplayCursor
GO
PRINT N'Creating [dbo].[spLoadOMOrganizationHierarchy]...';


GO
CREATE PROCEDURE [dbo].[spLoadOMOrganizationHierarchy] AS

-- SELECT * FROM OrganizationHierarchy
-- SELECT * FROM [OMOrganizationHierarchyPublishedV2Staging]

TRUNCATE TABLE OrganizationHierarchy

DECLARE @HierarchyType as varchar(50),
	@RootPartyNumber as varchar(50), 
	@Level1PartyNumber as varchar(50), 
	@Level2PartyNumber as varchar(50), 
	@Level3PartyNumber as varchar(50), 
	@Level4PartyNumber as varchar(50), 
	@Level5PartyNumber as varchar(50), 
	@Level6PartyNumber as varchar(50), 
	@Level7PartyNumber as varchar(50)

--select * from [OMOrganizationHierarchyPublishedV2Staging]
-- Retrieve the top level of the hierarchy
DECLARE RootLevelCursor CURSOR FOR
SELECT CHILDORGANIZATIONPARTYNUMBER, HIERARCHYTYPE
FROM [dbo].[OMOrganizationHierarchyPublishedV2Staging] o
WHERE PARENTORGANIZATIONPARTYNUMBER =''
ORDER BY HIERARCHYTYPE

OPEN RootLevelCursor
FETCH NEXT FROM RootLevelCursor INTO @RootPartyNumber, @HierarchyType

WHILE @@FETCH_STATUS=0
BEGIN

	DECLARE Level1Cursor CURSOR FOR
	SELECT CHILDORGANIZATIONPARTYNUMBER
	FROM [dbo].[OMOrganizationHierarchyPublishedV2Staging] o
	WHERE PARENTORGANIZATIONPARTYNUMBER =@RootPartyNumber and HIERARCHYTYPE=@HierarchyType

	OPEN Level1Cursor
	FETCH NEXT FROM Level1Cursor INTO @Level1PartyNumber

	WHILE @@FETCH_STATUS=0
	BEGIN
		INSERT INTO [dbo].[OrganizationHierarchy](HierarchyDepth, HierarchyType, RootPartyNumber, Level1PartyNumber)
		SELECT  '1', @HierarchyType,@RootPartyNumber,@Level1PartyNumber

		DECLARE Level2Cursor CURSOR FOR
		SELECT CHILDORGANIZATIONPARTYNUMBER
		FROM [dbo].[OMOrganizationHierarchyPublishedV2Staging] o
		WHERE PARENTORGANIZATIONPARTYNUMBER =@Level1PartyNumber and HIERARCHYTYPE=@HierarchyType

		OPEN Level2Cursor
		FETCH NEXT FROM Level2Cursor INTO @Level2PartyNumber

		WHILE @@FETCH_STATUS=0
		BEGIN
			INSERT INTO [dbo].[OrganizationHierarchy](HierarchyDepth, HierarchyType, RootPartyNumber, Level1PartyNumber, Level2PartyNumber)
			SELECT '2', @HierarchyType,@RootPartyNumber,@Level1PartyNumber,@Level2PartyNumber

			DECLARE Level3Cursor CURSOR FOR
			SELECT CHILDORGANIZATIONPARTYNUMBER
			FROM [dbo].[OMOrganizationHierarchyPublishedV2Staging] o
			WHERE PARENTORGANIZATIONPARTYNUMBER =@Level2PartyNumber and HIERARCHYTYPE=@HierarchyType

			OPEN Level3Cursor
			FETCH NEXT FROM Level3Cursor INTO @Level3PartyNumber

			WHILE @@FETCH_STATUS=0
			BEGIN
				INSERT INTO [dbo].[OrganizationHierarchy](HierarchyDepth, HierarchyType, RootPartyNumber, Level1PartyNumber, Level2PartyNumber, Level3PartyNumber)
				SELECT '3', @HierarchyType,@RootPartyNumber,@Level1PartyNumber,@Level2PartyNumber,@Level3PartyNumber

				DECLARE Level4Cursor CURSOR FOR
				SELECT CHILDORGANIZATIONPARTYNUMBER
				FROM [dbo].[OMOrganizationHierarchyPublishedV2Staging] o
				WHERE PARENTORGANIZATIONPARTYNUMBER =@Level3PartyNumber and HIERARCHYTYPE=@HierarchyType

				OPEN Level4Cursor
				FETCH NEXT FROM Level4Cursor INTO @Level4PartyNumber

				WHILE @@FETCH_STATUS=0
				BEGIN
					INSERT INTO [dbo].[OrganizationHierarchy](HierarchyDepth, HierarchyType, RootPartyNumber, Level1PartyNumber, Level2PartyNumber, 
						Level3PartyNumber, Level4PartyNumber)
					SELECT '4', @HierarchyType,@RootPartyNumber,@Level1PartyNumber,@Level2PartyNumber,@Level3PartyNumber,@Level4PartyNumber

					DECLARE Level5Cursor CURSOR FOR
					SELECT CHILDORGANIZATIONPARTYNUMBER
					FROM [dbo].[OMOrganizationHierarchyPublishedV2Staging] o
					WHERE PARENTORGANIZATIONPARTYNUMBER =@Level4PartyNumber and HIERARCHYTYPE=@HierarchyType

					OPEN Level5Cursor
					FETCH NEXT FROM Level5Cursor INTO @Level5PartyNumber

					WHILE @@FETCH_STATUS=0
					BEGIN
						INSERT INTO [dbo].[OrganizationHierarchy](HierarchyDepth, HierarchyType, RootPartyNumber, Level1PartyNumber, Level2PartyNumber, 
							Level3PartyNumber, Level4PartyNumber, Level5PartyNumber)
						SELECT '5', @HierarchyType,@RootPartyNumber,@Level1PartyNumber,@Level2PartyNumber,@Level3PartyNumber,@Level4PartyNumber,@Level5PartyNumber


						DECLARE Level6Cursor CURSOR FOR
						SELECT CHILDORGANIZATIONPARTYNUMBER
						FROM [dbo].[OMOrganizationHierarchyPublishedV2Staging] o
						WHERE PARENTORGANIZATIONPARTYNUMBER =@Level5PartyNumber and HIERARCHYTYPE=@HierarchyType

						OPEN Level6Cursor
						FETCH NEXT FROM Level6Cursor INTO @Level6PartyNumber

						WHILE @@FETCH_STATUS=0
						BEGIN
							INSERT INTO [dbo].[OrganizationHierarchy](HierarchyDepth, HierarchyType, RootPartyNumber, Level1PartyNumber, Level2PartyNumber, 
								Level3PartyNumber, Level4PartyNumber, Level5PartyNumber, Level6PartyNumber)
							SELECT '6', @HierarchyType,@RootPartyNumber,@Level1PartyNumber,@Level2PartyNumber,@Level3PartyNumber,@Level4PartyNumber,@Level5PartyNumber,
								@Level6PartyNumber

							DECLARE Level7Cursor CURSOR FOR
							SELECT CHILDORGANIZATIONPARTYNUMBER
							FROM [dbo].[OMOrganizationHierarchyPublishedV2Staging] o
							WHERE PARENTORGANIZATIONPARTYNUMBER =@Level6PartyNumber and HIERARCHYTYPE=@HierarchyType

							OPEN Level7Cursor
							FETCH NEXT FROM Level7Cursor INTO @Level7PartyNumber

							WHILE @@FETCH_STATUS=0
							BEGIN
								INSERT INTO [dbo].[OrganizationHierarchy](HierarchyDepth, HierarchyType, RootPartyNumber, Level1PartyNumber, Level2PartyNumber, 
									Level3PartyNumber, Level4PartyNumber, Level5PartyNumber, Level6PartyNumber, Level7PartyNumber)
								SELECT '7', @HierarchyType,@RootPartyNumber,@Level1PartyNumber,@Level2PartyNumber,@Level3PartyNumber,@Level4PartyNumber,
									@Level5PartyNumber,@Level6PartyNumber,@Level7PartyNumber

								FETCH NEXT FROM Level6Cursor INTO @Level7PartyNumber
							END
							CLOSE Level7Cursor
							DEALLOCATE Level7Cursor

							FETCH NEXT FROM Level6Cursor INTO @Level6PartyNumber
						END
						CLOSE Level6Cursor
						DEALLOCATE Level6Cursor


						FETCH NEXT FROM Level5Cursor INTO @Level5PartyNumber
					END
					CLOSE Level5Cursor
					DEALLOCATE Level5Cursor

					FETCH NEXT FROM Level4Cursor INTO @Level4PartyNumber
				END
				CLOSE Level4Cursor
				DEALLOCATE Level4Cursor

				FETCH NEXT FROM Level3Cursor INTO @Level3PartyNumber
			END
			CLOSE Level3Cursor
			DEALLOCATE Level3Cursor



			FETCH NEXT FROM Level2Cursor INTO @Level2PartyNumber
		END
		CLOSE Level2Cursor
		DEALLOCATE Level2Cursor


		FETCH NEXT FROM Level1Cursor INTO @Level1PartyNumber
	END
	CLOSE Level1Cursor
	DEALLOCATE Level1Cursor

	FETCH NEXT FROM RootLevelCursor INTO @RootPartyNumber, @HierarchyType
END
CLOSE RootLevelCursor
DEALLOCATE RootLevelCursor
-- SELECT * FROM OMOrganizationHierarchy

DELETE FROM OrganizationHierarchy
WHERE HierarchyDepth=1 and
	EXISTS
	(SELECT * FROM OrganizationHierarchy h
	WHERE h.HierarchyType = OrganizationHierarchy.HierarchyType and
		h.Level1PartyNumber = OrganizationHierarchy.Level1PartyNumber and
		h.Level2PartyNumber is NOT NULL and
		h.HierarchyDepth=2)

DELETE FROM OrganizationHierarchy
WHERE HierarchyDepth=2 and
	EXISTS
	(SELECT * FROM OrganizationHierarchy h
	WHERE h.HierarchyType = OrganizationHierarchy.HierarchyType and
		h.Level2PartyNumber = OrganizationHierarchy.Level2PartyNumber and
		h.Level3PartyNumber is NOT NULL and
		h.HierarchyDepth=3)

DELETE FROM OrganizationHierarchy
WHERE HierarchyDepth=3 and
	EXISTS
	(SELECT * FROM OrganizationHierarchy h
	WHERE h.HierarchyType = OrganizationHierarchy.HierarchyType and
		h.Level3PartyNumber = OrganizationHierarchy.Level3PartyNumber and
		h.Level4PartyNumber is NOT NULL and
		h.HierarchyDepth=4)

DELETE FROM OrganizationHierarchy
WHERE HierarchyDepth=4 and
	EXISTS
	(SELECT * FROM OrganizationHierarchy h
	WHERE h.HierarchyType = OrganizationHierarchy.HierarchyType and
		h.Level4PartyNumber = OrganizationHierarchy.Level4PartyNumber and
		h.Level5PartyNumber is NOT NULL and
		h.HierarchyDepth=5)

DELETE FROM OrganizationHierarchy
WHERE HierarchyDepth=5 and
	EXISTS
	(SELECT * FROM OrganizationHierarchy h
	WHERE h.HierarchyType = OrganizationHierarchy.HierarchyType and
		h.Level5PartyNumber = OrganizationHierarchy.Level5PartyNumber and
		h.Level6PartyNumber is NOT NULL and
		h.HierarchyDepth=6)

DELETE FROM OrganizationHierarchy
WHERE HierarchyDepth=6 and
	EXISTS
	(SELECT * FROM OrganizationHierarchy h
	WHERE h.HierarchyType = OrganizationHierarchy.HierarchyType and
		h.Level6PartyNumber = OrganizationHierarchy.Level6PartyNumber and
		h.Level7PartyNumber is NOT NULL and
		h.HierarchyDepth=7)

Update OrganizationHierarchy
SET [LeafPartyNumber]=
	Case WHEN HierarchyDepth=1 THEN Level1PartyNumber
	WHEN HierarchyDepth=2 THEN Level2PartyNumber
	WHEN HierarchyDepth=3 THEN Level3PartyNumber
	WHEN HierarchyDepth=4 THEN Level4PartyNumber
	WHEN HierarchyDepth=5 THEN Level5PartyNumber
	WHEN HierarchyDepth=6 THEN Level6PartyNumber
	WHEN HierarchyDepth=7 THEN Level7PartyNumber
	ELSE 'NA' END

Update OrganizationHierarchy
SET LeafOperatingUnit=
	(SELECT [OPERATINGUNITNUMBER]
	FROM [dbo].[DirPartyV2Staging] p
	WHERE p.[PARTYNUMBER]=OrganizationHierarchy.[LeafPartyNumber])
GO
PRINT N'Creating [dbo].[spLoadTotalingAccountTree]...';


GO
CREATE PROCEDURE [dbo].[spLoadTotalingAccountTree] as

DECLARE @LeafAccountID int, @Level1AccountID int, @Level2AccountID int, @Level3AccountID int

--CREATE TABLE TotalingAccountTree(
--LeafAccountID int,
--Level1AccountID int,
--Level2AccountID int,
--Level3AccountID int)

TRUNCATE TABLE TotalingAccountTree
--SELECT * FROM TotalingAccountTree

DECLARE AccountCursor CURSOR FOR
SELECT COMPONENTMAINACCOUNTID
FROM vwTotalingAccountExplosion
WHERE COMPONENTMAINACCOUNTID < 10000

OPEN AccountCursor
FETCH NEXT FROM AccountCursor INTO @LeafAccountID

WHILE @@FETCH_STATUS=0
BEGIN
	SELECT @Level1AccountID = [TOTALINGMAINACCOUNTID]
	FROM vwTotalingAccountExplosion
	where COMPONENTMAINACCOUNTID=@LeafAccountID

	SELECT @Level2AccountID = [TOTALINGMAINACCOUNTID]
	FROM vwTotalingAccountExplosion
	where COMPONENTMAINACCOUNTID=@Level1AccountID

	SELECT @Level3AccountID = [TOTALINGMAINACCOUNTID]
	FROM vwTotalingAccountExplosion
	where COMPONENTMAINACCOUNTID=@Level2AccountID

	INSERT INTO TotalingAccountTree
	SELECT @LeafAccountID, @Level1AccountID, @Level2AccountID, @Level3AccountID


	FETCH NEXT FROM AccountCursor INTO @LeafAccountID
END
CLOSE AccountCursor
DEALLOCATE AccountCursor

--select [TOTALINGMAINACCOUNTID]
--from vwtotalingAccountExplosion
--where COMPONENTMAINACCOUNTID=5000

--select [TOTALINGMAINACCOUNTID]
--from vwtotalingAccountExplosion
--where COMPONENTMAINACCOUNTID=509999

--select [TOTALINGMAINACCOUNTID]
--from vwtotalingAccountExplosion
--where COMPONENTMAINACCOUNTID=739999
GO
PRINT N'Creating [dbo].[spPLAllocation]...';


GO
CREATE proc [dbo].[spPLAllocation]

as

UPDATE facttransactionpl
SET isallocated = 'Not Allocated'
WHERE CONCAT (
		recid
		,'-'
		,entitykey
		) IN (
		SELECT DISTINCT CONCAT (
				recid
				,'-'
				,a.entitykey
				)
		FROM FactTransactionpl a
		JOIN DimEntity e ON e.EntityKey = a.EntityKey
		JOIN [dbo].[DisplayValueExplosion] d ON d.DisplayValue = a.AccountString
			AND d.DataAreaID = e.EntityID
			AND d.PARTITION = a.PARTITION
		JOIN [dbo].[ProjectAllocation] pa ON pa.department = d.Department
			AND pa.DataAreaID = e.EntityID
			AND a.TransactionDate >= StartDate
			AND a.TransactionDate <= EndDate
			AND d.Project = '000'
		WHERE mainaccount IN (
				SELECT DISTINCT MainAccountNumber
				FROM DimAccount
				WHERE mainaccounttype IN (
						'Cost'
					--	,'Revenue'
						)
				and MainAccountNumber not in 
				(select distinct account 
				from PLExclusionAccount 
				where include = 'n')
				)
			AND IsAllocated = 'N/A'
		)



INSERT INTO FactTransactionpl (
	[AccountString]
	,[TransactionDate]
	,[Scenario]
	,[TransactionDescription]
	,[BudgetAmount]
	,[IsAllocated]
	,[RecID]
	,[Partition]
	,[AccountKey]
	,[DepartmentKey]
	,[ProjectKey]
	,[TaskKey]
	,[FiscalPeriodKey]
	,[EntityKey]
	,[TransactionAmount]
	,[ReportingCurrencyAmount]
	,[AccountingCurrencyAmount]
	,[ReportingCurrencyCode]
	,[AccountingCurrencyCode]
	,[TransactionCurrencyCode]
	,[InvoiceNumber]
	,[SecurityKey]
	,[Voucher]
	)
SELECT DISTINCT CONCAT (
		d.MainAccount
		,'-'
		,d.department
		,'-'
		,pa.Project
		,'-'
		,'000'
		)
	,a.TransactionDate
	,'Actual'
	,a.TransactionDescription
	,NULL
	,'Allocated'
	,a.recid
	,a.PARTITION
	,a.accountkey
	,a.DepartmentKey
	,dp.ProjectKey
	,(
		SELECT taskkey
		FROM dimtask t
		WHERE TaskNumber = '000'
			AND t.DataAreaID = e.EntityID
		)
	,a.FiscalPeriodKey
	,a.EntityKey
	,round(a.TransactionAmount * AllocationPercentage, 2) AllocatedTransactionCurrencyAmount
	,round(a.ReportingCurrencyAmount * AllocationPercentage, 2) AllocatedReportingCurrencyAmount
	,round(a.AccountingCurrencyAmount * AllocationPercentage, 2) AllocatedAccountingCurrencyAmount
	,a.ReportingCurrencyCode
	,a.AccountingCurrencyCode
	,a.TransactionCurrencyCode
	,a.InvoiceNumber
	,a.SecurityKey
	,a.Voucher
FROM FactTransactionpl a
JOIN DimEntity e ON e.EntityKey = a.EntityKey
JOIN [dbo].[DisplayValueExplosion] d ON d.DisplayValue = a.AccountString
	AND d.DataAreaID = e.EntityID
	AND d.PARTITION = a.PARTITION
JOIN [dbo].[ProjectAllocation] pa ON pa.department = d.Department
	AND pa.DataAreaID = e.EntityID
	AND a.TransactionDate >= StartDate
	AND a.TransactionDate <= EndDate
	AND d.Project = '000'
left join DimProject dp on dp.ProjectNumber = pa.Project
	and pa.DataAreaID = dp.DataAreaID
WHERE mainaccount IN (SELECT DISTINCT MainAccountNumber
				FROM DimAccount
				WHERE mainaccounttype IN (
						'Cost'
					--	,'Revenue'
						)
				and MainAccountNumber not in 
				(select distinct account 
				from PLExclusionAccount 
				where include = 'n')
		)
	AND IsAllocated = 'Not Allocated'
	
	update facttransactionpl
	set [TransactionAmount] = [TransactionAmount] + TA,
	[ReportingCurrencyAmount] = [ReportingCurrencyAmount] + RA
	,[AccountingCurrencyAmount] = [AccountingCurrencyAmount]+AA
	from(
SELECT pl.recid
	,pl.entitykey
	,proj.ProjectKey
	,sum(pl.[TransactionAmount]) - al.TransactionAmount TA
	,sum(pl.[ReportingCurrencyAmount]) - ReportingAmount RA
	,sum(pl.[AccountingCurrencyAmount]) -AccountingAmoint AA
FROM FactTransactionpl pl
JOIN (
	SELECT recid
		,entitykey
		,sum([TransactionAmount]) TransactionAmount
		,sum([ReportingCurrencyAmount]) ReportingAmount
		,sum([AccountingCurrencyAmount]) AccountingAmoint
	FROM FactTransactionpl
	WHERE isallocated = 'Allocated'
	GROUP BY recid
		,entitykey
	) al ON al.recid = pl.recid
	AND al.entitykey = pl.entitykey
	join (	select recid,entitykey,max(projectkey) ProjectKey from facttransactionpl
	where isallocated = 'allocated'
	group by recid,entitykey)Proj on proj.recid = pl.recid and proj.entitykey = pl.entitykey
WHERE isallocated = 'Not Allocated'
GROUP BY pl.recid
	,pl.entitykey
	,al.TransactionAmount
	,al.ReportingAmount
	,al.AccountingAmoint
	,proj.ProjectKey
	) Recon 
	where recon.recid  = facttransactionpl.recid 
	and facttransactionpl.entitykey = Recon.entitykey 
	and Recon.ProjectKey = facttransactionpl.projectkey



	update FactTransactionPL 
set FactTransactionPL.ProjectKey = z.projectkey
from (select projectkey,ProjectNumber,DataAreaID ,e.EntityKey
from DimProject p
join DimEntity e on p.DataAreaID = e.EntityID
where ProjectNumber = '000')z
where FactTransactionPL.ProjectKey in (select projectkey from DimProject
where 
ProjectDescription is null)
and FactTransactionPL.EntityKey = z.EntityKey
GO
PRINT N'Creating [dbo].[spPLCrosswalk]...';


GO

CREATE proc [dbo].[spPLCrosswalk]
as 
truncate table PL_Crosswalk 
insert into PL_Crosswalk
select ta.*
from(
SELECT DISTINCT TotalingAccount
	,TotalingAccountDescription
	,mainAccount
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'External GAAP' PLType
	,CASE 
		WHEN totalingAccount = 491001
			THEN totalingAccountDescription
		WHEN totalingAccount = 491002
			THEN totalingAccountDescription
		WHEN totalingAccount = 491003
			THEN totalingAccountDescription
		WHEN totalingAccount = 491999
			THEN totalingAccountDescription
		WHEN totalingAccount = 492999
			THEN totalingAccountDescription
		WHEN totalingAccount = 493999
			THEN totalingAccountDescription
		WHEN totalingAccount = 499999
			THEN totalingAccountDescription
		WHEN totalingAccount = 732999
			THEN 'Cost of Sales'
		WHEN totalingAccount = 999999 -- need
			AND DepartmentNumber = 170
			THEN 'Cost of Sales'
		WHEN (
				totalingAccount = 999999
				AND DepartmentNumber >= 200
				AND DepartmentNumber <= 399
				)
			OR (
				totalingAccount = 999999
				AND DepartmentNumber >= 600
				AND DepartmentNumber <= 899
				)
			THEN 'R&D'
		WHEN totalingAccount = 999999
			AND DepartmentNumber >= 400
			AND DepartmentNumber <= 599
			THEN 'SG&A'
		WHEN totalingAccount = 410000
			THEN totalingAccountDescription
		WHEN totalingAccount = 981999
			THEN totalingAccountDescription
		WHEN totalingAccount = 983999
			THEN totalingAccountDescription
		WHEN totalingAccount = 984999
			THEN totalingAccountDescription
		WHEN totalingAccount = 985999
			THEN totalingAccountDescription
		WHEN totalingAccount = 986999
			THEN totalingAccountDescription
		WHEN totalingAccount = 988999
			THEN totalingAccountDescription
		WHEN totalingAccount = 987999
			THEN totalingAccountDescription
		WHEN totalingAccount = 982999
			THEN 'Net Income (Loss)'
		WHEN totalingAccount = 400000
			THEN 'Net Income (Loss)'
		ELSE NULL
		END PLGroup
	,CASE 
		WHEN totalingAccount = 491001
			THEN 1
		WHEN totalingAccount = 491002
			THEN 2
		WHEN totalingAccount = 491003
			THEN 3
		WHEN totalingAccount = 491999
			THEN 5
		WHEN totalingAccount = 492999
			THEN 6
		WHEN totalingAccount = 493999
			THEN 7
		WHEN totalingAccount = 499999
			THEN 8
		WHEN totalingAccount = 732999
			THEN 12
		WHEN totalingAccount = 999999
			AND DepartmentNumber = 170
			THEN 12
		WHEN (
				totalingAccount = 999999
				AND DepartmentNumber >= 200
				AND DepartmentNumber <= 399
				)
			OR (
				totalingAccount = 999999
				AND DepartmentNumber >= 600
				AND DepartmentNumber <= 899
				)
			THEN 15
		WHEN totalingAccount = 999999
			AND DepartmentNumber >= 400
			AND DepartmentNumber <= 599
			THEN 16
		WHEN totalingAccount = 410000
			THEN 20
		WHEN totalingAccount = 981999
			THEN 22
		WHEN totalingAccount = 983999
			THEN 23
		WHEN totalingAccount = 984999
			THEN 24
		WHEN totalingAccount = 985999
			THEN 25
		WHEN totalingAccount = 986999
			THEN 26
		WHEN totalingAccount = 988999
			THEN 27
		WHEN totalingAccount = 987999
			THEN 28
		WHEN totalingAccount = 982999
			THEN 29
		WHEN totalingAccount = 400000
			THEN 29
		ELSE NULL
		END PLOrder
	,case when totalingAccount = 400000 
			then -1
		when totalingAccount = 983999 then -1 
		WHEN totalingAccount = 984999
			THEN -1
		WHEN totalingAccount = 985999
			THEN -1
		WHEN totalingAccount = 410000
			THEN -1
		WHEN totalingAccount = 491001
			THEN 1
		WHEN totalingAccount = 491002
			THEN -1
		WHEN totalingAccount = 491003
			THEN -1
		WHEN totalingAccount = 491999
			THEN -1
		WHEN totalingAccount = 492999
			THEN -1
		WHEN totalingAccount = 493999
			THEN -1
		WHEN totalingAccount = 499999
			THEN -1
		WHEN totalingAccount = 986999
			THEN -1
		else 1 end Factor 
FROM PLStage


union all

SELECT DISTINCT TotalingAccount
	,TotalingAccountDescription
	,mainAccount
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'External GAAP' PLType
	,CASE 		WHEN totalingAccount = 999999
			THEN totalingAccountDescription
		WHEN totalingAccount = 982999
			THEN totalingAccountDescription
		WHEN totalingAccount = 400000
			THEN totalingAccountDescription
		END PLGroup
	,CASE 
		WHEN totalingAccount = 999999
			THEN 18
		WHEN totalingAccount = 982999
			THEN 31
		WHEN totalingAccount = 400000
			THEN 32
		ELSE NULL
		END PLOrder
	,case  WHEN totalingAccount = 400000
			THEN -1 else 1 end Factor
FROM PLStage


union all

SELECT DISTINCT totalingAccount
	,totalingAccountDescription
	,mainAccount totalingAccountDescription
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'Internal GAAP' PLType
	,CASE 
		WHEN totalingAccount = 491001
			THEN totalingAccountDescription
		WHEN totalingAccount = 491002
			THEN totalingAccountDescription
		WHEN totalingAccount = 491003
			THEN totalingAccountDescription
		WHEN totalingAccount = 491999
			THEN totalingAccountDescription
		WHEN totalingAccount = 492999
			THEN totalingAccountDescription
		WHEN totalingAccount = 493999
			THEN totalingAccountDescription
		WHEN totalingAccount = 499999
			THEN totalingAccountDescription
		WHEN totalingAccount = 732999
			THEN 'Supply Chain - NC'
		WHEN totalingAccount = 739999
			AND DepartmentNumber = 170
			THEN 'Supply Chain - C'
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 200
			AND DepartmentNumber <= 280
			THEN 'Antisense'
		WHEN totalingAccount = 731999
			AND DepartmentNumber = 290
			THEN 'Translational Medicine'
		WHEN (
				totalingAccount = 731999
				AND DepartmentNumber >= 700
				AND DepartmentNumber <= 799
				)
			OR (
				totalingAccount = 731999
				AND DepartmentNumber = 685
				)
			THEN 'Development'
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 610
			AND DepartmentNumber <= 699
			AND DepartmentNumber != 685
			THEN 'Mfg and Operations'
		WHEN (
				totalingAccount = 731999
				AND DepartmentNumber >= 800
				AND DepartmentNumber <= 890
				)
			OR (
				totalingAccount = 731999
				AND DepartmentNumber = 899
				)
			THEN 'R&D Support'
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 304
			AND DepartmentNumber <= 399
			THEN 'Medical Affairs'
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 400
			AND DepartmentNumber <= 499
			THEN 'Commercial'
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 500
			AND DepartmentNumber <= 599
			THEN 'SG&A'
		WHEN totalingAccount = 892999
			THEN 'Corporate Expenses'
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 901
			AND DepartmentNumber <= 930
			THEN 'Corporate Expenses'
		WHEN totalingAccount = 891999
			THEN totalingAccountDescription
		WHEN totalingAccount = 999999
			THEN totalingAccountDescription
		WHEN totalingAccount = 410000
			THEN totalingAccountDescription
		WHEN totalingAccount = 891999
			THEN totalingAccountDescription
		WHEN totalingAccount = 983999
			THEN totalingAccountDescription
		WHEN totalingAccount = 984999
			THEN totalingAccountDescription
		WHEN totalingAccount = 985999
			THEN totalingAccountDescription
		WHEN totalingAccount = 986999
			THEN totalingAccountDescription
		WHEN totalingAccount = 988999
			THEN totalingAccountDescription
		WHEN totalingAccount = 987999
			THEN totalingAccountDescription
		WHEN totalingAccount = 982999
			THEN totalingAccountDescription
		WHEN totalingAccount = 400000
			THEN totalingAccountDescription
		ELSE NULL
		END PLGroup
	,CASE 
		WHEN totalingAccount = 491001
			THEN 33
		WHEN totalingAccount = 491002
			THEN 34
		WHEN totalingAccount = 491003
			THEN 35
		WHEN totalingAccount = 491999
			THEN 37
		WHEN totalingAccount = 492999
			THEN 39
		WHEN totalingAccount = 493999
			THEN 40
		WHEN totalingAccount = 499999
			THEN 42
		WHEN totalingAccount = 732999
			THEN 45
		WHEN totalingAccount = 739999
			AND DepartmentNumber = 170
			THEN 46
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 200
			AND DepartmentNumber <= 280
			THEN 48
		WHEN totalingAccount = 731999
			AND DepartmentNumber = 290
			THEN 49
		WHEN (
				totalingAccount = 731999
				AND DepartmentNumber >= 700
				AND DepartmentNumber <= 799
				)
			OR (
				totalingAccount = 731999
				AND DepartmentNumber = 685
				)
			THEN 50
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 610
			AND DepartmentNumber <= 699
			AND DepartmentNumber != 685
			THEN 51
		WHEN (
				totalingAccount = 731999
				AND DepartmentNumber >= 800
				AND DepartmentNumber <= 890
				)
			OR (
				totalingAccount = 731999
				AND DepartmentNumber = 899
				)
			THEN 52
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 304
			AND DepartmentNumber <= 399
			THEN 53
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 400
			AND DepartmentNumber <= 499
			THEN 54
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 500
			AND DepartmentNumber <= 599
			THEN 55
		WHEN totalingAccount = 892999
			THEN 56
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 901
			AND DepartmentNumber <= 930
			THEN 56
		WHEN totalingAccount = 891999
			THEN 59
		WHEN totalingAccount = 999999
			THEN 61
		WHEN totalingAccount = 410000
			THEN 63
		WHEN totalingAccount = 891999
			THEN 65
		WHEN totalingAccount = 983999
			THEN 66
		WHEN totalingAccount = 984999
			THEN 67
		WHEN totalingAccount = 985999
			THEN 68
		WHEN totalingAccount = 986999
			THEN 69
		WHEN totalingAccount = 988999
			THEN 70
		WHEN totalingAccount = 987999
			THEN 71
		WHEN totalingAccount = 982999
			THEN 74
		WHEN totalingAccount = 400000
			THEN 76
		ELSE NULL
		END PLGroup
	
	,case WHEN totalingAccount = 491001
			THEN -1
		WHEN totalingAccount = 400000
			THEN -1
		WHEN totalingAccount = 491002
			THEN -1
		WHEN totalingAccount = 491003
			THEN -1
		WHEN totalingAccount = 491999
			THEN -1
		WHEN totalingAccount = 492999
			THEN -1
		WHEN totalingAccount = 493999
			THEN -1
		WHEN totalingAccount = 499999
			THEN -1
		WHEN totalingAccount = 410000
			THEN -1
		WHEN totalingAccount = 983999
			THEN -1
		WHEN totalingAccount = 984999
			THEN -1
		WHEN totalingAccount = 985999
			THEN -1
		WHEN totalingAccount = 986999
			THEN -1
			 else 1 end Factor
FROM PLStage


union all


SELECT DISTINCT TotalingAccount
	,TotalingAccountDescription
	,mainAccount
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'Internal GAAP' PLType
	,CASE WHEN totalingAccount = 982999
			THEN 'Net Income (Loss)'
		WHEN totalingAccount = 400000
			THEN 'Net Income (Loss)'
		END PLGroup
	,CASE 
		WHEN totalingAccount = 982999
			THEN 73
		WHEN totalingAccount = 400000
			THEN 73
		ELSE NULL
		END PLOrder
	,case when totalingAccount = 400000 then -1 else 1 end Factor 
FROM PLStage


union all


SELECT DISTINCT totalingAccount
	,totalingAccountDescription
	,mainAccount totalingAccountDescription
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'ExternalProForma' PLType
	,CASE 
		WHEN totalingAccount = 491001
			THEN totalingAccountDescription
		WHEN totalingAccount = 491002
			THEN totalingAccountDescription
		WHEN totalingAccount = 491003
			THEN totalingAccountDescription
		WHEN totalingAccount = 491999
			THEN totalingAccountDescription
		WHEN totalingAccount = 492999
			THEN totalingAccountDescription
		WHEN totalingAccount = 493999
			THEN totalingAccountDescription
		WHEN totalingAccount = 499999
			THEN totalingAccountDescription
		WHEN totalingAccount = 732999
			THEN 'Cost of Sales'

--GOOD

		WHEN totalingAccount = 999999
			AND DepartmentNumber = 170
			THEN 'Cost of Sales'
		WHEN totalingAccount = 891999 
			AND DepartmentNumber = 170 --NEG
			THEN 'Cost of Sales'
		WHEN (
				totalingAccount = 999999
				AND DepartmentNumber >= 200
				AND DepartmentNumber <= 399
				)
			OR (
				totalingAccount = 999999
				AND DepartmentNumber >= 600
				AND DepartmentNumber <= 899
				)
			THEN 'R&D'
		WHEN (
				totalingAccount = 891999
				AND DepartmentNumber >= 600
				AND DepartmentNumber <= 899
				)
				OR (
				totalingAccount = 891999
				AND DepartmentNumber >= 200
				AND DepartmentNumber <= 299
				) --NEG
			THEN 'R&D'
		WHEN totalingAccount = 999999
			AND DepartmentNumber >= 400
			AND DepartmentNumber <= 599
			THEN 'SG&A'
		WHEN (
				totalingAccount = 891999
				AND DepartmentNumber >= 400
				AND DepartmentNumber <= 599
				) --NEG
			THEN 'SG&A'
		WHEN totalingAccount = 981999
			THEN totalingAccountDescription
		WHEN totalingAccount = 983999
			THEN totalingAccountDescription
		WHEN totalingAccount = 984999
			THEN totalingAccountDescription
		WHEN totalingAccount = 985999
			THEN totalingAccountDescription
		WHEN totalingAccount = 986999
			THEN totalingAccountDescription
		WHEN totalingAccount = 988999
			THEN totalingAccountDescription
		WHEN totalingAccount = 987999
			THEN totalingAccountDescription
		ELSE NULL
		END PLGroup
	,CASE 
		WHEN totalingAccount = 491001
			THEN 77
		WHEN totalingAccount = 491002
			THEN 78
		WHEN totalingAccount = 491003
			THEN 79
		WHEN totalingAccount = 491999
			THEN 81
		WHEN totalingAccount = 492999
			THEN 82
		WHEN totalingAccount = 493999
			THEN 83
		WHEN totalingAccount = 499999
			THEN 85
		WHEN totalingAccount = 732999
			THEN 88

--GOOD

		WHEN totalingAccount = 999999
			AND DepartmentNumber = 170
			THEN 88
		WHEN totalingAccount = 891999 
			AND DepartmentNumber = 170 --NEG
			THEN 88
		WHEN (
				totalingAccount = 999999
				AND DepartmentNumber >= 200
				AND DepartmentNumber <= 399
				)
			OR (
				totalingAccount = 999999
				AND DepartmentNumber >= 600
				AND DepartmentNumber <= 899
				)
			THEN 91
		WHEN (
				totalingAccount = 891999
				AND DepartmentNumber >= 600
				AND DepartmentNumber <= 899
				)
				OR (
				totalingAccount = 891999
				AND DepartmentNumber >= 200
				AND DepartmentNumber <= 299
				) --NEG
			THEN 91
		WHEN totalingAccount = 999999
			AND DepartmentNumber >= 400
			AND DepartmentNumber <= 599
			THEN 92
		WHEN (
				totalingAccount = 891999
				AND DepartmentNumber >= 400
				AND DepartmentNumber <= 599
				) --NEG
			THEN 92
		WHEN totalingAccount = 981999
			THEN 98
		WHEN totalingAccount = 983999
			THEN 99
		WHEN totalingAccount = 984999
			THEN 100
		WHEN totalingAccount = 985999
			THEN 101
		WHEN totalingAccount = 986999
			THEN 102
		WHEN totalingAccount = 988999
			THEN 103
		WHEN totalingAccount = 987999
			THEN 104
		ELSE NULL
		END PLOrder
	
	,CASE 
		WHEN totalingAccount = 891999 
			AND DepartmentNumber = 170 --NEG
			THEN -1
		WHEN (
				totalingAccount = 891999
				AND DepartmentNumber >= 600
				AND DepartmentNumber <= 899
				)
				OR (
				totalingAccount = 891999
				AND DepartmentNumber >= 200
				AND DepartmentNumber <= 299
				) --NEG
			THEN -1
		WHEN (
				totalingAccount = 891999
				AND DepartmentNumber >= 400
				AND DepartmentNumber <= 599
				) --NEG
			THEN -1
		WHEN totalingAccount = 491001
			THEN -1
		WHEN totalingAccount = 491002
			THEN -1
		WHEN totalingAccount = 491003
			THEN -1
		WHEN totalingAccount = 491999
			THEN -1
		WHEN totalingAccount = 492999
			THEN -1
		WHEN totalingAccount = 493999
			THEN -1
		WHEN totalingAccount = 499999
			THEN -1
		WHEN totalingAccount = 983999
			THEN -1
		WHEN totalingAccount = 984999
			THEN -1
		WHEN totalingAccount = 985999
			THEN -1
		WHEN totalingAccount = 986999
			THEN -1
		WHEN totalingAccount = 988999
			THEN -1
		WHEN totalingAccount = 987999
			THEN -1
		ELSE 1
		END Factor
FROM PLStage


union all


SELECT DISTINCT totalingAccount
	,totalingAccountDescription
	,mainAccount totalingAccountDescription
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'ExternalProForma' PLType
	,CASE when totalingAccount = 999999
			then 'Total operating expenses'
			when totalingAccount = 891999
			then 'Total operating expenses'
		END PLGroup
	,CASE when totalingAccount = 999999
			then 94
			when totalingAccount = 891999
			then 94
		ELSE NULL
		END PLOrder
	
	,CASE when totalingAccount = 999999
			then 1
			when totalingAccount = 891999
			then -1
		ELSE 1
		END Factor
FROM PLStage

union all

SELECT DISTINCT totalingAccount
	,totalingAccountDescription
	,mainAccount totalingAccountDescription
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'ExternalProForma' PLType
	,CASE when TotalingAccount = 410000
			then 'Income (loss) from operations'
			when TotalingAccount = 891999
			then 'Income (loss) from operations'
		END PLGroup
	,CASE when TotalingAccount = 410000
			then 96
			when TotalingAccount = 891999
			then 96
		ELSE NULL
		END PLOrder
	
	,CASE when TotalingAccount = 410000
			then -1
			when TotalingAccount = 891999
			then 1
		ELSE 1
		END Factor
FROM PLStage

union all

SELECT DISTINCT totalingAccount
	,totalingAccountDescription
	,mainAccount totalingAccountDescription
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'ExternalProForma' PLType
	,CASE when TotalingAccount = 400000
			then 'Net Income (Loss)'
			when TotalingAccount = 982999
			then 'Net Income (Loss)'
			when TotalingAccount = 891999
			then 'Net Income (Loss)'
		END PLGroup
	,CASE when TotalingAccount = 400000
			then 106
			when TotalingAccount = 982999
			then 106
			when TotalingAccount = 891999
			then 106
		ELSE NULL
		END PLOrder
	
	,CASE when TotalingAccount = 400000
			then -1
			when TotalingAccount = 982999
			then 1
			when TotalingAccount = 891999
			then 1
		ELSE 1
		END Factor
FROM PLStage

union all

SELECT DISTINCT totalingAccount
	,totalingAccountDescription
	,mainAccount totalingAccountDescription
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'ExternalProForma' PLType
	,CASE when TotalingAccount = 982999
			then 'Net loss attributable to noncontrolling interest'
			
		END PLGroup
	,CASE when TotalingAccount = 982999
			then 107
			
		ELSE NULL
		END PLOrder
	
	,1 Factor
FROM PLStage

union all

SELECT DISTINCT totalingAccount
	,totalingAccountDescription
	,mainAccount totalingAccountDescription
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'ExternalProForma' PLType
	,CASE when TotalingAccount = 400000
			then 'Net income (loss) attributable to common stockholders'
			when TotalingAccount = 891999
			then 'Net income (loss) attributable to common stockholders'
		END PLGroup
	,CASE when TotalingAccount = 400000
			then 108
			when TotalingAccount = 891999
			then 108
		ELSE NULL
		END PLOrder
	
	,CASE when TotalingAccount = 400000
			then -1
		ELSE 1
		END Factor
FROM PLStage

union all

SELECT DISTINCT totalingAccount
	,totalingAccountDescription
	,mainAccount totalingAccountDescription
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'Internal ProForma' PLType
	,CASE 
		WHEN totalingAccount = 491001
			THEN totalingAccountDescription
		WHEN totalingAccount = 491002
			THEN totalingAccountDescription
		WHEN totalingAccount = 491003
			THEN totalingAccountDescription
		WHEN totalingAccount = 491999
			THEN totalingAccountDescription
		WHEN totalingAccount = 492999
			THEN totalingAccountDescription
		WHEN totalingAccount = 493999
			THEN totalingAccountDescription
		WHEN totalingAccount = 499999
			THEN totalingAccountDescription
		WHEN totalingAccount = 732999
			THEN 'Supply Chain - NC'
		WHEN totalingAccount = 739999
			AND DepartmentNumber = 170
			THEN 'Supply Chain - C'
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 200
			AND DepartmentNumber <= 280
			THEN 'Antisense'
		WHEN totalingAccount = 731999
			AND DepartmentNumber = 290
			THEN 'Translational Medicine'
		WHEN (
				totalingAccount = 731999
				AND DepartmentNumber >= 700
				AND DepartmentNumber <= 799
				)
			OR (
				totalingAccount = 731999
				AND DepartmentNumber = 685
				)
			THEN 'Development'
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 610
			AND DepartmentNumber <= 699
			AND DepartmentNumber != 685
			THEN 'Mfg and Operations'
		WHEN (
				totalingAccount = 731999
				AND DepartmentNumber >= 800
				AND DepartmentNumber <= 890
				)
			OR (
				totalingAccount = 731999
				AND DepartmentNumber = 899
				)
			THEN 'R&D Support'
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 304
			AND DepartmentNumber <= 399
			THEN 'Medical Affairs'
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 400
			AND DepartmentNumber <= 499
			THEN 'Commercial'
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 500
			AND DepartmentNumber <= 599
			THEN 'SG&A'
		WHEN totalingAccount = 892999
			THEN 'Corporate Expenses'
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 901
			AND DepartmentNumber <= 930
			THEN 'Corporate Expenses'
		WHEN totalingAccount = 981999
			THEN totalingAccountDescription
		WHEN totalingAccount = 983999
			THEN totalingAccountDescription
		WHEN totalingAccount = 984999
			THEN totalingAccountDescription
		WHEN totalingAccount = 985999
			THEN totalingAccountDescription
		WHEN totalingAccount = 986999
			THEN totalingAccountDescription
		WHEN totalingAccount = 988999
			THEN totalingAccountDescription
		WHEN totalingAccount = 987999
			THEN totalingAccountDescription
		when  totalingAccount = 999999
			THEN totalingAccountDescription
		when  totalingAccount = 981999
			THEN totalingAccountDescription
		ELSE NULL
		END PLGroup
	,CASE  
		WHEN totalingAccount = 491001
			THEN 109
		WHEN totalingAccount = 491002
			THEN 110
		WHEN totalingAccount = 491003
			THEN 111
		WHEN totalingAccount = 491999
			THEN 113
		WHEN totalingAccount = 492999
			THEN 115
		WHEN totalingAccount = 493999
			THEN 116
		WHEN totalingAccount = 499999
			THEN 118
		WHEN totalingAccount = 732999
			THEN 121
		WHEN totalingAccount = 739999
			AND DepartmentNumber = 170
			THEN 122
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 200
			AND DepartmentNumber <= 280
			THEN 124
		WHEN totalingAccount = 731999
			AND DepartmentNumber = 290
			THEN 125
		WHEN (
				totalingAccount = 731999
				AND DepartmentNumber >= 700
				AND DepartmentNumber <= 799
				)
			OR (
				totalingAccount = 731999
				AND DepartmentNumber = 685
				)
			THEN 126
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 610
			AND DepartmentNumber <= 699
			AND DepartmentNumber != 685
			THEN 127
		WHEN (
				totalingAccount = 731999
				AND DepartmentNumber >= 800
				AND DepartmentNumber <= 890
				)
			OR (
				totalingAccount = 731999
				AND DepartmentNumber = 899
				)
			THEN 128
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 304
			AND DepartmentNumber <= 399
			THEN 129
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 400
			AND DepartmentNumber <= 499
			THEN 130
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 500
			AND DepartmentNumber <= 599
			THEN 131
		WHEN totalingAccount = 892999
			THEN 132
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 901
			AND DepartmentNumber <= 930
			THEN 132
		WHEN totalingAccount = 981999
			THEN 140
		WHEN totalingAccount = 983999
			THEN 141
		WHEN totalingAccount = 984999
			THEN 142
		WHEN totalingAccount = 985999
			THEN 143
		WHEN totalingAccount = 986999
			THEN 144
		WHEN totalingAccount = 988999
			THEN 145
		WHEN totalingAccount = 987999
			THEN 146		
		when  totalingAccount = 999999
			THEN 136
		when  totalingAccount = 981999
			THEN 136
		ELSE NULL
		END PLOrder
	
	,case WHEN totalingAccount = 985999
			THEN -1
		WHEN totalingAccount = 986999
			THEN -1
		WHEN totalingAccount = 491001
			THEN -1
		WHEN totalingAccount = 491002
			THEN -1
		WHEN totalingAccount = 491003
			THEN -1
		WHEN totalingAccount = 491999
			THEN -1
		WHEN totalingAccount = 492999
			THEN -1 
		WHEN totalingAccount = 499999
			THEN -1
		WHEN totalingAccount = 983999
			THEN -1
		WHEN totalingAccount = 984999
			THEN -1
		
		when  totalingAccount = 999999
			THEN 1
		when  totalingAccount = 981999
			THEN -1
		else 1 end Factor
FROM PLStage

union all

SELECT DISTINCT totalingAccount
	,totalingAccountDescription
	,mainAccount totalingAccountDescription
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'Internal ProForma' PLType
	,CASE when TotalingAccount = 999999
		then 'Total Operating Expenses'
		when totalingaccount = 891999 then 
		'Total Operating Expenses'
	ELSE NULL
		END PLGroup
	,CASE when TotalingAccount = 999999
		then 136
		when totalingaccount = 891999 then 
		136
	ELSE NULL
	END PLOrder
	
	,CASE when totalingaccount = 891999 then -1
	ELSE null
	END Factor
FROM PLStage

union all

SELECT DISTINCT totalingAccount
	,totalingAccountDescription
	,mainAccount totalingAccountDescription
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'Internal ProForma' PLType
	,CASE when TotalingAccount = 410000
		then 'Income (Loss) From Operations'
		when totalingaccount = 891999 then 
		'Income (Loss) From Operations'
	ELSE NULL
		END PLGroup
	,CASE when TotalingAccount = 410000
		then 138
		when totalingaccount = 891999 then 
		138
	ELSE NULL
	END PLOrder
	
	,CASE when totalingaccount = 410000 then -1
	ELSE 1
	END Factor
FROM PLStage
where TotalingAccount in ( '410000','891999')

union all

SELECT DISTINCT totalingAccount
	,totalingAccountDescription
	,mainAccount totalingAccountDescription
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'Internal ProForma' PLType
	,CASE when TotalingAccount = 410000
		then 'Net Income (Loss)'
		when totalingaccount = 891999 then 
		'Net Income (Loss)'
		when totalingaccount = 982999 then 
		'Net Income (Loss)'
	ELSE NULL
		END PLGroup
	,CASE when TotalingAccount = 410000
		then 148
		when totalingaccount = 891999 then 
		148
		when totalingaccount = 982999 then  148
	ELSE NULL
	END PLOrder
	
	,CASE when totalingaccount = 410000 then -1
	ELSE 1
	END Factor
FROM PLStage  

union all

SELECT DISTINCT totalingAccount
	,totalingAccountDescription
	,mainAccount totalingAccountDescription
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'Internal ProForma' PLType
	,CASE when TotalingAccount = 982999
		then totalingAccountDescription
	ELSE NULL
		END PLGroup
	,CASE when TotalingAccount = 982999
		then 149
	ELSE NULL
	END PLOrder
	
	,1 Factor
FROM PLStage

union all

SELECT DISTINCT totalingAccount
	,totalingAccountDescription
	,mainAccount totalingAccountDescription
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'Internal ProForma' PLType
	,CASE when TotalingAccount = 400000
		then 'Net income (loss) attributable to common stockholders'
		when totalingaccount = 891999
		then 'Net income (loss) attributable to common stockholders'
	ELSE NULL
		END PLGroup
	,CASE when TotalingAccount = 400000
		then 150
		when totalingaccount = 891999 then 
		150
	ELSE NULL
	END PLOrder
	
	,CASE when totalingaccount = 400000 then -1
	ELSE 1
	END Factor
FROM PLStage


) ta


Truncate table PL_Crosswalk_AKCEA
insert into PL_Crosswalk_AKCEA
select ta.*
from(
SELECT DISTINCT TotalingAccount
	,TotalingAccountDescription
	,mainAccount
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'External GAAP' PLType
	,CASE 
		WHEN totalingAccount = 491001
			THEN totalingAccountDescription
		WHEN totalingAccount = 491002
			THEN totalingAccountDescription
		WHEN totalingAccount = 491003
			THEN totalingAccountDescription
		WHEN totalingAccount = 491999
			THEN totalingAccountDescription
		WHEN totalingAccount = 492999
			THEN totalingAccountDescription
		WHEN totalingAccount = 493999
			THEN totalingAccountDescription
		WHEN totalingAccount = 499999
			THEN totalingAccountDescription
		WHEN totalingAccount = 732999
			THEN 'Cost of Sales'
		WHEN totalingAccount = 999999 -- need
			AND DepartmentNumber = 170
			THEN 'Cost of Sales'
		WHEN (
				totalingAccount = 999999
				AND DepartmentNumber >= 200
				AND DepartmentNumber <= 399
				)
			OR (
				totalingAccount = 999999
				AND DepartmentNumber >= 600
				AND DepartmentNumber <= 899
				)
			THEN 'R&D'
		WHEN totalingAccount = 999999
			AND DepartmentNumber >= 400
			AND DepartmentNumber <= 599
			THEN 'SG&A'
		WHEN totalingAccount = 410000
			THEN totalingAccountDescription
		WHEN totalingAccount = 981999
			THEN totalingAccountDescription
		WHEN totalingAccount = 983999
			THEN totalingAccountDescription
		WHEN totalingAccount = 984999
			THEN totalingAccountDescription
		WHEN totalingAccount = 985999
			THEN totalingAccountDescription
		WHEN totalingAccount = 986999
			THEN totalingAccountDescription
		WHEN totalingAccount = 988999
			THEN totalingAccountDescription
		WHEN totalingAccount = 987999
			THEN totalingAccountDescription
		WHEN totalingAccount = 982999
			THEN 'Net Income (Loss)'
		WHEN totalingAccount = 400000
			THEN 'Net Income (Loss)'
		ELSE NULL
		END PLGroup
	,CASE 
		WHEN totalingAccount = 491001
			THEN 1
		WHEN totalingAccount = 491002
			THEN 2
		WHEN totalingAccount = 491003
			THEN 3
		WHEN totalingAccount = 491999
			THEN 5
		WHEN totalingAccount = 492999
			THEN 6
		WHEN totalingAccount = 493999
			THEN 7
		WHEN totalingAccount = 499999
			THEN 8
		WHEN totalingAccount = 732999
			THEN 12
		WHEN totalingAccount = 999999
			AND DepartmentNumber = 170
			THEN 12
		WHEN (
				totalingAccount = 999999
				AND DepartmentNumber >= 200
				AND DepartmentNumber <= 399
				)
			OR (
				totalingAccount = 999999
				AND DepartmentNumber >= 600
				AND DepartmentNumber <= 899
				)
			THEN 15
		WHEN totalingAccount = 999999
			AND DepartmentNumber >= 400
			AND DepartmentNumber <= 599
			THEN 16
		WHEN totalingAccount = 410000
			THEN 20
		WHEN totalingAccount = 981999
			THEN 22
		WHEN totalingAccount = 983999
			THEN 23
		WHEN totalingAccount = 984999
			THEN 24
		WHEN totalingAccount = 985999
			THEN 25
		WHEN totalingAccount = 986999
			THEN 26
		WHEN totalingAccount = 988999
			THEN 27
		WHEN totalingAccount = 987999
			THEN 28
		WHEN totalingAccount = 982999
			THEN 29
		WHEN totalingAccount = 400000
			THEN 29
		ELSE NULL
		END PLOrder
	,case when totalingAccount = 400000 
			then -1
		when totalingAccount = 983999 then -1 
		WHEN totalingAccount = 984999
			THEN -1
		WHEN totalingAccount = 985999
			THEN -1
		WHEN totalingAccount = 410000
			THEN -1
		WHEN totalingAccount = 491001
			THEN 1
		WHEN totalingAccount = 491002
			THEN -1
		WHEN totalingAccount = 491003
			THEN -1
		WHEN totalingAccount = 491999
			THEN -1
		WHEN totalingAccount = 492999
			THEN -1
		WHEN totalingAccount = 493999
			THEN -1
		WHEN totalingAccount = 499999
			THEN -1
		WHEN totalingAccount = 986999
			THEN -1
		else 1 end Factor 
FROM PLStage


union all

SELECT DISTINCT TotalingAccount
	,TotalingAccountDescription
	,mainAccount
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'External GAAP' PLType
	,CASE 		WHEN totalingAccount = 999999
			THEN totalingAccountDescription
		WHEN totalingAccount = 982999
			THEN totalingAccountDescription
		WHEN totalingAccount = 400000
			THEN totalingAccountDescription
		END PLGroup
	,CASE 
		WHEN totalingAccount = 999999
			THEN 18
		WHEN totalingAccount = 982999
			THEN 31
		WHEN totalingAccount = 400000
			THEN 32
		ELSE NULL
		END PLOrder
	,case  WHEN totalingAccount = 400000
			THEN -1 else 1 end Factor
FROM PLStage


union all

SELECT DISTINCT totalingAccount
	,totalingAccountDescription
	,mainAccount totalingAccountDescription
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'Internal GAAP' PLType
	,CASE 
		WHEN totalingAccount = 491001
			THEN totalingAccountDescription
		WHEN totalingAccount = 491002
			THEN totalingAccountDescription
		WHEN totalingAccount = 491003
			THEN totalingAccountDescription
		WHEN totalingAccount = 491999
			THEN totalingAccountDescription
		WHEN totalingAccount = 492999
			THEN totalingAccountDescription
		WHEN totalingAccount = 493999
			THEN totalingAccountDescription
		WHEN totalingAccount = 499999
			THEN totalingAccountDescription
		WHEN totalingAccount = 732999
			THEN 'Supply Chain - NC'
		WHEN totalingAccount = 739999
			AND DepartmentNumber = 170
			THEN 'Supply Chain - C'
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 200
			AND DepartmentNumber <= 280
			THEN 'Antisense'
		WHEN totalingAccount = 731999
			AND DepartmentNumber = 290
			THEN 'Translational Medicine'
		WHEN (
				totalingAccount = 731999
				AND DepartmentNumber >= 700
				AND DepartmentNumber <= 799
				)
			OR (
				totalingAccount = 731999
				AND DepartmentNumber = 685
				)
			THEN 'Development'
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 610
			AND DepartmentNumber <= 699
			AND DepartmentNumber != 685
			THEN 'Mfg and Operations'
		WHEN (
				totalingAccount = 731999
				AND DepartmentNumber >= 800
				AND DepartmentNumber <= 890
				)
			OR (
				totalingAccount = 731999
				AND DepartmentNumber = 899
				)
			THEN 'R&D Support'
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 304
			AND DepartmentNumber <= 399
			THEN 'Medical Affairs'
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 400
			AND DepartmentNumber <= 499
			THEN 'Commercial'
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 500
			AND DepartmentNumber <= 599
			THEN 'SG&A'
		WHEN totalingAccount = 892999
			THEN 'Corporate Expenses'
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 901
			AND DepartmentNumber <= 930
			THEN 'Corporate Expenses'
		WHEN totalingAccount = 891999
			THEN totalingAccountDescription
		WHEN totalingAccount = 999999
			THEN totalingAccountDescription
		WHEN totalingAccount = 410000
			THEN totalingAccountDescription
		WHEN totalingAccount = 891999
			THEN totalingAccountDescription
		WHEN totalingAccount = 983999
			THEN totalingAccountDescription
		WHEN totalingAccount = 984999
			THEN totalingAccountDescription
		WHEN totalingAccount = 985999
			THEN totalingAccountDescription
		WHEN totalingAccount = 986999
			THEN totalingAccountDescription
		WHEN totalingAccount = 988999
			THEN totalingAccountDescription
		WHEN totalingAccount = 987999
			THEN totalingAccountDescription
		WHEN totalingAccount = 982999
			THEN totalingAccountDescription
		WHEN totalingAccount = 400000
			THEN totalingAccountDescription
		ELSE NULL
		END PLGroup
	,CASE 
		WHEN totalingAccount = 491001
			THEN 33
		WHEN totalingAccount = 491002
			THEN 34
		WHEN totalingAccount = 491003
			THEN 35
		WHEN totalingAccount = 491999
			THEN 37
		WHEN totalingAccount = 492999
			THEN 39
		WHEN totalingAccount = 493999
			THEN 40
		WHEN totalingAccount = 499999
			THEN 42
		WHEN totalingAccount = 732999
			THEN 45
		WHEN totalingAccount = 739999
			AND DepartmentNumber = 170
			THEN 46
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 200
			AND DepartmentNumber <= 280
			THEN 48
		WHEN totalingAccount = 731999
			AND DepartmentNumber = 290
			THEN 49
		WHEN (
				totalingAccount = 731999
				AND DepartmentNumber >= 700
				AND DepartmentNumber <= 799
				)
			OR (
				totalingAccount = 731999
				AND DepartmentNumber = 685
				)
			THEN 50
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 610
			AND DepartmentNumber <= 699
			AND DepartmentNumber != 685
			THEN 51
		WHEN (
				totalingAccount = 731999
				AND DepartmentNumber >= 800
				AND DepartmentNumber <= 890
				)
			OR (
				totalingAccount = 731999
				AND DepartmentNumber = 899
				)
			THEN 52
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 304
			AND DepartmentNumber <= 399
			THEN 53
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 400
			AND DepartmentNumber <= 499
			THEN 54
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 500
			AND DepartmentNumber <= 599
			THEN 55
		WHEN totalingAccount = 892999
			THEN 56
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 901
			AND DepartmentNumber <= 930
			THEN 56
		WHEN totalingAccount = 891999
			THEN 59
		WHEN totalingAccount = 999999
			THEN 61
		WHEN totalingAccount = 410000
			THEN 63
		WHEN totalingAccount = 891999
			THEN 65
		WHEN totalingAccount = 983999
			THEN 66
		WHEN totalingAccount = 984999
			THEN 67
		WHEN totalingAccount = 985999
			THEN 68
		WHEN totalingAccount = 986999
			THEN 69
		WHEN totalingAccount = 988999
			THEN 70
		WHEN totalingAccount = 987999
			THEN 71
		WHEN totalingAccount = 982999
			THEN 74
		WHEN totalingAccount = 400000
			THEN 76
		ELSE NULL
		END PLGroup
	
	,case WHEN totalingAccount = 491001
			THEN -1
		WHEN totalingAccount = 400000
			THEN -1
		WHEN totalingAccount = 491002
			THEN -1
		WHEN totalingAccount = 491003
			THEN -1
		WHEN totalingAccount = 491999
			THEN -1
		WHEN totalingAccount = 492999
			THEN -1
		WHEN totalingAccount = 493999
			THEN -1
		WHEN totalingAccount = 499999
			THEN -1
		WHEN totalingAccount = 410000
			THEN -1
		WHEN totalingAccount = 983999
			THEN -1
		WHEN totalingAccount = 984999
			THEN -1
		WHEN totalingAccount = 985999
			THEN -1
		WHEN totalingAccount = 986999
			THEN -1
			 else 1 end Factor
FROM PLStage


union all


SELECT DISTINCT TotalingAccount
	,TotalingAccountDescription
	,mainAccount
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'Internal GAAP' PLType
	,CASE WHEN totalingAccount = 982999
			THEN 'Net Income (Loss)'
		WHEN totalingAccount = 400000
			THEN 'Net Income (Loss)'
		END PLGroup
	,CASE 
		WHEN totalingAccount = 982999
			THEN 73
		WHEN totalingAccount = 400000
			THEN 73
		ELSE NULL
		END PLOrder
	,case when totalingAccount = 400000 then -1 else 1 end Factor 
FROM PLStage


union all


SELECT DISTINCT totalingAccount
	,totalingAccountDescription
	,mainAccount totalingAccountDescription
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'ExternalProForma' PLType
	,CASE 
		WHEN totalingAccount = 491001
			THEN totalingAccountDescription
		WHEN totalingAccount = 491002
			THEN totalingAccountDescription
		WHEN totalingAccount = 491003
			THEN totalingAccountDescription
		WHEN totalingAccount = 491999
			THEN totalingAccountDescription
		WHEN totalingAccount = 492999
			THEN totalingAccountDescription
		WHEN totalingAccount = 493999
			THEN totalingAccountDescription
		WHEN totalingAccount = 499999
			THEN totalingAccountDescription
		WHEN totalingAccount = 732999
			THEN 'Cost of Sales'

--GOOD

		WHEN totalingAccount = 999999
			AND DepartmentNumber = 170
			THEN 'Cost of Sales'
		WHEN totalingAccount = 891999 
			AND DepartmentNumber = 170 --NEG
			THEN 'Cost of Sales'
		WHEN (
				totalingAccount = 999999
				AND DepartmentNumber >= 200
				AND DepartmentNumber <= 399
				)
			OR (
				totalingAccount = 999999
				AND DepartmentNumber >= 600
				AND DepartmentNumber <= 899
				)
			THEN 'R&D'
		WHEN (
				totalingAccount = 891999
				AND DepartmentNumber >= 600
				AND DepartmentNumber <= 899
				)
				OR (
				totalingAccount = 891999
				AND DepartmentNumber >= 200
				AND DepartmentNumber <= 299
				) --NEG
			THEN 'R&D'
		WHEN totalingAccount = 999999
			AND DepartmentNumber >= 400
			AND DepartmentNumber <= 599
			THEN 'SG&A'
		WHEN (
				totalingAccount = 891999
				AND DepartmentNumber >= 400
				AND DepartmentNumber <= 599
				) --NEG
			THEN 'SG&A'
		WHEN totalingAccount = 981999
			THEN totalingAccountDescription
		WHEN totalingAccount = 983999
			THEN totalingAccountDescription
		WHEN totalingAccount = 984999
			THEN totalingAccountDescription
		WHEN totalingAccount = 985999
			THEN totalingAccountDescription
		WHEN totalingAccount = 986999
			THEN totalingAccountDescription
		WHEN totalingAccount = 988999
			THEN totalingAccountDescription
		WHEN totalingAccount = 987999
			THEN totalingAccountDescription
		ELSE NULL
		END PLGroup
	,CASE 
		WHEN totalingAccount = 491001
			THEN 77
		WHEN totalingAccount = 491002
			THEN 78
		WHEN totalingAccount = 491003
			THEN 79
		WHEN totalingAccount = 491999
			THEN 81
		WHEN totalingAccount = 492999
			THEN 82
		WHEN totalingAccount = 493999
			THEN 83
		WHEN totalingAccount = 499999
			THEN 85
		WHEN totalingAccount = 732999
			THEN 88

--GOOD

		WHEN totalingAccount = 999999
			AND DepartmentNumber = 170
			THEN 88
		WHEN totalingAccount = 891999 
			AND DepartmentNumber = 170 --NEG
			THEN 88
		WHEN (
				totalingAccount = 999999
				AND DepartmentNumber >= 200
				AND DepartmentNumber <= 399
				)
			OR (
				totalingAccount = 999999
				AND DepartmentNumber >= 600
				AND DepartmentNumber <= 899
				)
			THEN 91
		WHEN (
				totalingAccount = 891999
				AND DepartmentNumber >= 600
				AND DepartmentNumber <= 899
				)
				OR (
				totalingAccount = 891999
				AND DepartmentNumber >= 200
				AND DepartmentNumber <= 299
				) --NEG
			THEN 91
		WHEN totalingAccount = 999999
			AND DepartmentNumber >= 400
			AND DepartmentNumber <= 599
			THEN 92
		WHEN (
				totalingAccount = 891999
				AND DepartmentNumber >= 400
				AND DepartmentNumber <= 599
				) --NEG
			THEN 92
		WHEN totalingAccount = 981999
			THEN 98
		WHEN totalingAccount = 983999
			THEN 99
		WHEN totalingAccount = 984999
			THEN 100
		WHEN totalingAccount = 985999
			THEN 101
		WHEN totalingAccount = 986999
			THEN 102
		WHEN totalingAccount = 988999
			THEN 103
		WHEN totalingAccount = 987999
			THEN 104
		ELSE NULL
		END PLOrder
	
	,CASE 
		WHEN totalingAccount = 891999 
			AND DepartmentNumber = 170 --NEG
			THEN -1
		WHEN (
				totalingAccount = 891999
				AND DepartmentNumber >= 600
				AND DepartmentNumber <= 899
				)
				OR (
				totalingAccount = 891999
				AND DepartmentNumber >= 200
				AND DepartmentNumber <= 299
				) --NEG
			THEN -1
		WHEN (
				totalingAccount = 891999
				AND DepartmentNumber >= 400
				AND DepartmentNumber <= 599
				) --NEG
			THEN -1
		WHEN totalingAccount = 491001
			THEN -1
		WHEN totalingAccount = 491002
			THEN -1
		WHEN totalingAccount = 491003
			THEN -1
		WHEN totalingAccount = 491999
			THEN -1
		WHEN totalingAccount = 492999
			THEN -1
		WHEN totalingAccount = 493999
			THEN -1
		WHEN totalingAccount = 499999
			THEN -1
		WHEN totalingAccount = 983999
			THEN -1
		WHEN totalingAccount = 984999
			THEN -1
		WHEN totalingAccount = 985999
			THEN -1
		WHEN totalingAccount = 986999
			THEN -1
		WHEN totalingAccount = 988999
			THEN -1
		WHEN totalingAccount = 987999
			THEN -1
		ELSE 1
		END Factor
FROM PLStage


union all


SELECT DISTINCT totalingAccount
	,totalingAccountDescription
	,mainAccount totalingAccountDescription
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'ExternalProForma' PLType
	,CASE when totalingAccount = 999999
			then 'Total operating expenses'
			when totalingAccount = 891999
			then 'Total operating expenses'
		END PLGroup
	,CASE when totalingAccount = 999999
			then 94
			when totalingAccount = 891999
			then 94
		ELSE NULL
		END PLOrder
	
	,CASE when totalingAccount = 999999
			then 1
			when totalingAccount = 891999
			then -1
		ELSE 1
		END Factor
FROM PLStage

union all

SELECT DISTINCT totalingAccount
	,totalingAccountDescription
	,mainAccount totalingAccountDescription
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'ExternalProForma' PLType
	,CASE when TotalingAccount = 410000
			then 'Income (loss) from operations'
			when TotalingAccount = 891999
			then 'Income (loss) from operations'
		END PLGroup
	,CASE when TotalingAccount = 410000
			then 96
			when TotalingAccount = 891999
			then 96
		ELSE NULL
		END PLOrder
	
	,CASE when TotalingAccount = 410000
			then -1
			when TotalingAccount = 891999
			then 1
		ELSE 1
		END Factor
FROM PLStage

union all

SELECT DISTINCT totalingAccount
	,totalingAccountDescription
	,mainAccount totalingAccountDescription
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'ExternalProForma' PLType
	,CASE when TotalingAccount = 400000
			then 'Net Income (Loss)'
			when TotalingAccount = 982999
			then 'Net Income (Loss)'
			when TotalingAccount = 891999
			then 'Net Income (Loss)'
		END PLGroup
	,CASE when TotalingAccount = 400000
			then 106
			when TotalingAccount = 982999
			then 106
			when TotalingAccount = 891999
			then 106
		ELSE NULL
		END PLOrder
	
	,CASE when TotalingAccount = 400000
			then -1
			when TotalingAccount = 982999
			then 1
			when TotalingAccount = 891999
			then 1
		ELSE 1
		END Factor
FROM PLStage

union all

SELECT DISTINCT totalingAccount
	,totalingAccountDescription
	,mainAccount totalingAccountDescription
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'ExternalProForma' PLType
	,CASE when TotalingAccount = 982999
			then 'Net loss attributable to noncontrolling interest'
			
		END PLGroup
	,CASE when TotalingAccount = 982999
			then 107
			
		ELSE NULL
		END PLOrder
	
	,1 Factor
FROM PLStage

union all

SELECT DISTINCT totalingAccount
	,totalingAccountDescription
	,mainAccount totalingAccountDescription
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'ExternalProForma' PLType
	,CASE when TotalingAccount = 400000
			then 'Net income (loss) attributable to common stockholders'
			when TotalingAccount = 891999
			then 'Net income (loss) attributable to common stockholders'
		END PLGroup
	,CASE when TotalingAccount = 400000
			then 108
			when TotalingAccount = 891999
			then 108
		ELSE NULL
		END PLOrder
	
	,CASE when TotalingAccount = 400000
			then -1
		ELSE 1
		END Factor
FROM PLStage

union all

SELECT DISTINCT totalingAccount
	,totalingAccountDescription
	,mainAccount totalingAccountDescription
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'Internal ProForma' PLType
	,CASE 
		WHEN totalingAccount = 491001
			THEN totalingAccountDescription
		WHEN totalingAccount = 491002
			THEN totalingAccountDescription
		WHEN totalingAccount = 491003
			THEN totalingAccountDescription
		WHEN totalingAccount = 491999
			THEN totalingAccountDescription
		WHEN totalingAccount = 492999
			THEN totalingAccountDescription
		WHEN totalingAccount = 493999
			THEN totalingAccountDescription
		WHEN totalingAccount = 499999
			THEN totalingAccountDescription
		WHEN totalingAccount = 732999
			THEN 'Supply Chain - NC'
		WHEN totalingAccount = 739999
			AND DepartmentNumber = 170
			THEN 'Supply Chain - C'
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 200
			AND DepartmentNumber <= 280
			THEN 'Antisense'
		WHEN totalingAccount = 731999
			AND DepartmentNumber = 290
			THEN 'Translational Medicine'
		WHEN (
				totalingAccount = 731999
				AND DepartmentNumber >= 700
				AND DepartmentNumber <= 799
				)
			OR (
				totalingAccount = 731999
				AND DepartmentNumber = 685
				)
			THEN 'Development'
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 610
			AND DepartmentNumber <= 699
			AND DepartmentNumber != 685
			THEN 'Mfg and Operations'
		WHEN (
				totalingAccount = 731999
				AND DepartmentNumber >= 800
				AND DepartmentNumber <= 890
				)
			OR (
				totalingAccount = 731999
				AND DepartmentNumber = 899
				)
			THEN 'R&D Support'
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 304
			AND DepartmentNumber <= 399
			THEN 'Medical Affairs'
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 400
			AND DepartmentNumber <= 499
			THEN 'Commercial'
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 500
			AND DepartmentNumber <= 599
			THEN 'SG&A'
		WHEN totalingAccount = 892999
			THEN 'Corporate Expenses'
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 901
			AND DepartmentNumber <= 930
			THEN 'Corporate Expenses'
		WHEN totalingAccount = 981999
			THEN totalingAccountDescription
		WHEN totalingAccount = 983999
			THEN totalingAccountDescription
		WHEN totalingAccount = 984999
			THEN totalingAccountDescription
		WHEN totalingAccount = 985999
			THEN totalingAccountDescription
		WHEN totalingAccount = 986999
			THEN totalingAccountDescription
		WHEN totalingAccount = 988999
			THEN totalingAccountDescription
		WHEN totalingAccount = 987999
			THEN totalingAccountDescription
		when  totalingAccount = 999999
			THEN totalingAccountDescription
		when  totalingAccount = 981999
			THEN totalingAccountDescription
		ELSE NULL
		END PLGroup
	,CASE  
		WHEN totalingAccount = 491001
			THEN 109
		WHEN totalingAccount = 491002
			THEN 110
		WHEN totalingAccount = 491003
			THEN 111
		WHEN totalingAccount = 491999
			THEN 113
		WHEN totalingAccount = 492999
			THEN 115
		WHEN totalingAccount = 493999
			THEN 116
		WHEN totalingAccount = 499999
			THEN 118
		WHEN totalingAccount = 732999
			THEN 121
		WHEN totalingAccount = 739999
			AND DepartmentNumber = 170
			THEN 122
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 200
			AND DepartmentNumber <= 280
			THEN 124
		WHEN totalingAccount = 731999
			AND DepartmentNumber = 290
			THEN 125
		WHEN (
				totalingAccount = 731999
				AND DepartmentNumber >= 700
				AND DepartmentNumber <= 799
				)
			OR (
				totalingAccount = 731999
				AND DepartmentNumber = 685
				)
			THEN 126
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 610
			AND DepartmentNumber <= 699
			AND DepartmentNumber != 685
			THEN 127
		WHEN (
				totalingAccount = 731999
				AND DepartmentNumber >= 800
				AND DepartmentNumber <= 890
				)
			OR (
				totalingAccount = 731999
				AND DepartmentNumber = 899
				)
			THEN 128
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 304
			AND DepartmentNumber <= 399
			THEN 129
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 400
			AND DepartmentNumber <= 499
			THEN 130
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 500
			AND DepartmentNumber <= 599
			THEN 131
		WHEN totalingAccount = 892999
			THEN 132
		WHEN totalingAccount = 731999
			AND DepartmentNumber >= 901
			AND DepartmentNumber <= 930
			THEN 132
		WHEN totalingAccount = 981999
			THEN 140
		WHEN totalingAccount = 983999
			THEN 141
		WHEN totalingAccount = 984999
			THEN 142
		WHEN totalingAccount = 985999
			THEN 143
		WHEN totalingAccount = 986999
			THEN 144
		WHEN totalingAccount = 988999
			THEN 145
		WHEN totalingAccount = 987999
			THEN 146		
		when  totalingAccount = 999999
			THEN 136
		when  totalingAccount = 981999
			THEN 136
		ELSE NULL
		END PLOrder
	
	,case WHEN totalingAccount = 985999
			THEN -1
		WHEN totalingAccount = 986999
			THEN -1
		WHEN totalingAccount = 491001
			THEN -1
		WHEN totalingAccount = 491002
			THEN -1
		WHEN totalingAccount = 491003
			THEN -1
		WHEN totalingAccount = 491999
			THEN -1
		WHEN totalingAccount = 492999
			THEN -1 
		WHEN totalingAccount = 499999
			THEN -1
		WHEN totalingAccount = 983999
			THEN -1
		WHEN totalingAccount = 984999
			THEN -1
		
		when  totalingAccount = 999999
			THEN 1
		when  totalingAccount = 981999
			THEN -1
		else 1 end Factor
FROM PLStage

union all

SELECT DISTINCT totalingAccount
	,totalingAccountDescription
	,mainAccount totalingAccountDescription
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'Internal ProForma' PLType
	,CASE when TotalingAccount = 999999
		then 'Total Operating Expenses'
		when totalingaccount = 891999 then 
		'Total Operating Expenses'
	ELSE NULL
		END PLGroup
	,CASE when TotalingAccount = 999999
		then 136
		when totalingaccount = 891999 then 
		136
	ELSE NULL
	END PLOrder
	
	,CASE when totalingaccount = 891999 then -1
	ELSE null
	END Factor
FROM PLStage

union all

SELECT DISTINCT totalingAccount
	,totalingAccountDescription
	,mainAccount totalingAccountDescription
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'Internal ProForma' PLType
	,CASE when TotalingAccount = 410000
		then 'Income (Loss) From Operations'
		when totalingaccount = 891999 then 
		'Income (Loss) From Operations'
	ELSE NULL
		END PLGroup
	,CASE when TotalingAccount = 410000
		then 138
		when totalingaccount = 891999 then 
		138
	ELSE NULL
	END PLOrder
	
	,CASE when totalingaccount = 410000 then -1
	ELSE 1
	END Factor
FROM PLStage
where TotalingAccount in ( '410000','891999')

union all

SELECT DISTINCT totalingAccount
	,totalingAccountDescription
	,mainAccount totalingAccountDescription
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'Internal ProForma' PLType
	,CASE when TotalingAccount = 410000
		then 'Net Income (Loss)'
		when totalingaccount = 891999 then 
		'Net Income (Loss)'
		when totalingaccount = 982999 then 
		'Net Income (Loss)'
	ELSE NULL
		END PLGroup
	,CASE when TotalingAccount = 410000
		then 148
		when totalingaccount = 891999 then 
		148
		when totalingaccount = 982999 then  148
	ELSE NULL
	END PLOrder
	
	,CASE when totalingaccount = 410000 then -1
	ELSE 1
	END Factor
FROM PLStage  

union all

SELECT DISTINCT totalingAccount
	,totalingAccountDescription
	,mainAccount totalingAccountDescription
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'Internal ProForma' PLType
	,CASE when TotalingAccount = 982999
		then totalingAccountDescription
	ELSE NULL
		END PLGroup
	,CASE when TotalingAccount = 982999
		then 149
	ELSE NULL
	END PLOrder
	
	,1 Factor
FROM PLStage

union all

SELECT DISTINCT totalingAccount
	,totalingAccountDescription
	,mainAccount totalingAccountDescription
	,AccountKey
	,DepartmentKey
	,DepartmentNumber
	,'Internal ProForma' PLType
	,CASE when TotalingAccount = 400000
		then 'Net income (loss) attributable to common stockholders'
		when totalingaccount = 891999
		then 'Net income (loss) attributable to common stockholders'
	ELSE NULL
		END PLGroup
	,CASE when TotalingAccount = 400000
		then 150
		when totalingaccount = 891999 then 
		150
	ELSE NULL
	END PLOrder
	
	,CASE when totalingaccount = 400000 then -1
	ELSE 1
	END Factor
FROM PLStage


) ta





 insert into  [dbo].[PL_Crosswalk_akcea] 
select distinct '999999','Total Operating Expenses',left(AccountString,4),f.accountkey,d.departmentkey,d.DepartmentNumber ,
'internal proforma','Total Operating Expenses','136','1'
from FactTransaction f 
left join DimDepartment d on d.departmentkey = f.departmentkey 
where AccountString  =  '7300-407-000-000'

--select * from PL_Crosswalk_akcea where pltype = 'internal proforma' and plgroup = 'Income (Loss) from Operations'

insert into  [dbo].[PL_Crosswalk_akcea] 
select distinct '999999','Total Operating Expenses',left(AccountString,4),f.accountkey,d.departmentkey,d.DepartmentNumber ,
'internal proforma','Total Operating Expenses','136','1'
from FactTransaction f 
left join DimDepartment d on d.departmentkey = f.departmentkey 
where AccountString  =  '6405-407-000-000'


delete  from  [dbo].[PL_Crosswalk_akcea] 
 where plgroup in ('Income (Loss) from Operations')
 and pltype in ('Internal ProForma')

 insert into  [dbo].[PL_Crosswalk_akcea] 
select '410000','Income (Loss) from Operations',mainaccount,accountkey,departmentkey,departmentnumber
,'Internal ProForma','Income (Loss) from Operations',138,case when plgroup in ('Total Operating Expenses') then -1* factor
when (plgroup = 'total revenue' and (mainaccount = '4317' AND departmentnumber = '000'))
or (plgroup = 'total revenue' and (mainaccount = '4318' AND departmentnumber = '000')) then -1
when plgroup = 'Total Revenue' then 1 else factor end 
 from  [dbo].[PL_Crosswalk_akcea] 
 where plgroup in ('Total Operating Expenses',
 'Total Revenue'
)
 and pltype in ('Internal ProForma')



 
delete from  [dbo].[PL_Crosswalk_akcea] 
where plgroup = 'Net income (loss) attributable to common stockholders' and pltype in ('Internal ProForma')

 insert into  [dbo].[PL_Crosswalk_akcea] 
select '400000','Total Net Income (Loss)',mainaccount,accountkey,departmentkey,departmentnumber
,'Internal ProForma','Net income (loss) attributable to common stockholders',150,
case when plgroup = 'Total Income Tax Benefit (Expense)' then factor*-1 else factor end 
from  [dbo].[PL_Crosswalk_akcea] 
 where plgroup in ('Total Income (Loss) from Operations','Total Income Tax Benefit (Expense)',
 'Total Investment Income','Total Other Income')
 and pltype in ('Internal ProForma')

 
--select * from PL_Crosswalk_akcea where pltype = 'internal proforma' and plgroup = 'Net income (loss) attributable to common stockholders'
 
delete from  [dbo].[PL_Crosswalk_akcea] 
where plgroup = 'Net Income (Loss)' and pltype in ('Internal ProForma')

 insert into  [dbo].[PL_Crosswalk_akcea] 
select '400000','Net Income (Loss)',mainaccount,accountkey,departmentkey,departmentnumber
,'Internal ProForma','Net Income (Loss)',148,
case when plgroup = 'Total Income Tax Benefit (Expense)' then factor*-1 else factor end 
from  [dbo].[PL_Crosswalk_akcea] 
 where plgroup in ('Total Income (Loss) from Operations','Total Income Tax Benefit (Expense)',
 'Total Investment Income','Total Other Income')
 and pltype in ('Internal ProForma')

--5019-745-000-000

insert into  [dbo].[PL_Crosswalk_akcea] 
select distinct '731999','Total Controllable (excl. COGS)',left(AccountString,4),f.accountkey,d.departmentkey,d.DepartmentNumber ,
'internal proforma','Mfg and Operations','127','1'
from FactTransaction f 
left join DimDepartment d on d.departmentkey = f.departmentkey 
where AccountString  =  '5019-670-000-000'


insert into  [dbo].[PL_Crosswalk_akcea] 
select distinct '731999','Total Controllable (excl. COGS)',left(AccountString,4),f.accountkey,d.departmentkey,d.DepartmentNumber ,
'internal proforma','Total Operating Expenses','136','1'
from FactTransaction f 
left join DimDepartment d on d.departmentkey = f.departmentkey 
where AccountString  =  '5019-745-000-000'


insert into  [dbo].[PL_Crosswalk_akcea] 
select distinct '731999','Total Controllable (excl. COGS)',left(AccountString,4),f.accountkey,d.departmentkey,d.DepartmentNumber ,
'internal proforma','Total Operating Expenses','136','1'
from FactTransaction f 
left join DimDepartment d on d.departmentkey = f.departmentkey 
where AccountString  =  '5019-670-000-000'


insert into  [dbo].[PL_Crosswalk_akcea] 
select distinct '731999','Total Controllable (excl. COGS)',left(AccountString,4),f.accountkey,d.departmentkey,d.DepartmentNumber ,
'internal proforma','Total Operating Expenses','136','1'
from FactTransaction f 
left join DimDepartment d on d.departmentkey = f.departmentkey 
where AccountString  =  '5005-318-000-000'


insert into  [dbo].[PL_Crosswalk_akcea] 
select distinct '731999','Total Controllable (excl. COGS)',left(AccountString,4),f.accountkey,d.departmentkey,d.DepartmentNumber ,
'internal proforma','Total Operating Expenses','136','1'
from FactTransaction f 
left join DimDepartment d on d.departmentkey = f.departmentkey 
where AccountString  in(
'5000-512-000-000',
'5005-413-000-000',
'5005-452-000-000',
'5005-512-000-000',
'5008-512-000-000',
'5010-512-000-000',
'5016-512-000-000',
'5019-512-000-000',
'5100-512-000-000',
'5201-512-000-000',
'6403-512-000-000',
'6405-512-000-000',
'7000-512-000-000',
'7000-512-152-000',
'7000-512-153-000',
'7000-512-000-000',
'7000-512-000-000',
'7014-417-000-000')


delete from   [dbo].[PL_Crosswalk_akcea] 
where pltype = 'internal proforma'
and plgroup = 'sg&a'
and concat(mainaccount,'-',departmentnumber) in (
'5000-512',
'5005-512',
'5008-512',
'5010-512',
'5016-512',
'5019-512',
'5100-512',
'5201-512',
'6403-512',
'6405-512',
'7000-512',
'7000-512')

--select * from  [dbo].[PL_Crosswalk_akcea]  where  pltype = 'internal proforma' and plorder = '132'
insert into  [dbo].[PL_Crosswalk_akcea] 
select distinct '731999','Total Controllable (excl. COGS)',left(AccountString,4),f.accountkey,d.departmentkey,d.DepartmentNumber ,
'internal proforma','SG&A','131','1'
from FactTransaction f 
left join DimDepartment d on d.departmentkey = f.departmentkey 
where AccountString  in(
'5019-540-000-000'
)


insert into  [dbo].[PL_Crosswalk_akcea] 
select distinct '731999','Total Controllable (excl. COGS)',left(AccountString,4),f.accountkey,d.departmentkey,d.DepartmentNumber ,
'internal proforma','Corporate Expenses','132','1'
from FactTransaction f 
left join DimDepartment d on d.departmentkey = f.departmentkey 
where AccountString 
 in(
'9000-541-000-000',
'9200-598-000-000',
'9200-899-000-000',
'9821-598-000-000',
'9821-899-000-000',
'9201-411-000-000'
)


--delete from  [dbo].[PL_Crosswalk_akcea] 
--where concat (mainaccount,'-',departmentnumber)
--in ('5005-512'
--,'5008-512'
--,'5010-512'
--,'5016-512'
--,'5100-512'
--,'5201-512'
--,'6403-512'
--,'7000-512'
--,'7000-512'
--,'7000-512'
--)
--and plorder = 130


delete from PL_Crosswalk_akcea
where plorder = 136

insert into [dbo].[PL_Crosswalk_akcea] 
select totalingAccount,TotalingAccountDescription,MainAccount
,accountKey,DepartmentKey,DepartmentNumber,'internal proforma','Total Operating Expenses',136
,1 from PL_Crosswalk_akcea
where plorder >= 121
and  plorder <= 132

--118,136

delete from PL_Crosswalk_akcea
where plorder = 138

insert into [dbo].[PL_Crosswalk_akcea] 
select totalingAccount,TotalingAccountDescription,MainAccount
,accountKey,DepartmentKey,DepartmentNumber,'internal proforma','Income (Loss) from Operations',138
,case when plorder = 136 then -1 else 1 end from PL_Crosswalk_akcea
where (plorder = 118
or plorder = 136)


 
delete from  [dbo].[PL_Crosswalk_akcea] 
where plgroup = 'Net income (loss) attributable to common stockholders' and pltype in ('Internal ProForma')

 insert into  [dbo].[PL_Crosswalk_akcea] 
select '400000','Total Net Income (Loss)',mainaccount,accountkey,departmentkey,departmentnumber
,'Internal ProForma','Net income (loss) attributable to common stockholders',150,
case when plgroup = 'Total Income Tax Benefit (Expense)' then factor*-1 else factor end 
from  [dbo].[PL_Crosswalk_akcea] 
where plorder >= 138
and plorder <= 146

delete from  [dbo].[PL_Crosswalk_akcea] 
where plgroup = 'Net income (Loss)' and pltype in ('Internal ProForma')

 insert into  [dbo].[PL_Crosswalk_akcea] 
select '400000','Total Net Income (Loss)',mainaccount,accountkey,departmentkey,departmentnumber
,'Internal ProForma','Net income (Loss)',148,
case when plgroup = 'Total Income Tax Benefit (Expense)' then factor*-1 else factor end 
from  [dbo].[PL_Crosswalk_akcea] 
where plorder >= 138
and plorder <= 146

--NEW___NEW

delete from  [dbo].[PL_Crosswalk_akcea] 
where plorder >= 121
and plorder <= 132


 insert into  [dbo].[PL_Crosswalk_akcea] 
 select distinct '731999','Total Controllable (excl. COGS)',left(AccountString,4),f.accountkey
 ,isnull(d.departmentkey,'1'),isnull(d.DepartmentNumber,'000') ,
'internal proforma','Cost of Sales','121','1'
from FactTransaction f 
left join DimDepartment d on d.departmentkey = f.departmentkey 
where (((left(AccountString ,4) >= '4600'
and left(AccountString ,4) <= '4695')
or d.departmentnumber = '170')
and left(AccountString ,1) <> '9')



 insert into  [dbo].[PL_Crosswalk_akcea] 
 select distinct '731999','Total Controllable (excl. COGS)',left(AccountString,4),f.accountkey
 ,isnull(d.departmentkey,'1'),isnull(d.DepartmentNumber,'000') ,
'internal proforma','Development','122','1'
from FactTransaction f 
left join DimDepartment d on d.departmentkey = f.departmentkey 
where 
 ((d.DepartmentNumber like '7%' or d.DepartmentNumber = '685' ) and d.DepartmentNumber <> '798' 
 and d.DepartmentNumber <> '799' 
 and (left(AccountString,4) <> '5018'
      and (left(AccountString,1) <> '9'
	  or left(AccountString,4) = '9806')))

 
--Mfg and Operations	departments 610-699, + accout 9806


delete from  [dbo].[PL_Crosswalk_akcea] 
where plorder >= 123
and plorder <= 123

 insert into  [dbo].[PL_Crosswalk_akcea] 
 select distinct '731999','Total Controllable (excl. COGS)',left(AccountString,4),f.accountkey
 ,isnull(d.departmentkey,'1'),isnull(d.DepartmentNumber,'000') ,
'internal proforma','Mfg and Operations','123','1'
from FactTransaction f 
left join DimDepartment d on d.departmentkey = f.departmentkey 
where 
(
(d.departmentnumber like '61%'
or  d.departmentnumber like '62%'
or  d.departmentnumber like '63%'
or  d.departmentnumber like '64%'
or  d.departmentnumber like '65%'
or  d.departmentnumber like '66%'
or  d.departmentnumber like '67%'
or  d.departmentnumber like '68%'
or  d.departmentnumber like '69%')
 and (left(AccountString,4) <> '5018'
      and (left(AccountString,1) <> '9'
	  or left(AccountString,4) = '9806')
	  and d.DepartmentNumber <> '685')
)


 insert into  [dbo].[PL_Crosswalk_akcea] 
 select distinct '731999','Total Controllable (excl. COGS)',left(AccountString,4),f.accountkey
 ,isnull(d.departmentkey,'1'),isnull(d.DepartmentNumber,'000') ,
'internal proforma','R&D Support','124','1'
from FactTransaction f 
left join DimDepartment d on d.departmentkey = f.departmentkey 
where 
(
( d.departmentnumber like '80%'
or  d.departmentnumber like '81%'
or  d.departmentnumber like '82%'
or  d.departmentnumber like '83%'
or  d.departmentnumber like '84%'
or  d.departmentnumber like '85%'
or  d.departmentnumber like '86%'
or  d.departmentnumber like '87%'
or  d.departmentnumber like '88%'
or d.departmentnumber  = '890'
or d.departmentnumber  = '899'
 )
 and (left(AccountString,4) <> '5018'
      and (left(AccountString,1) <> '9'
	  or left(AccountString,4) = '9806'))
)



 insert into  [dbo].[PL_Crosswalk_akcea] 
 select distinct '731999','Total Controllable (excl. COGS)',left(AccountString,4),f.accountkey
 ,isnull(d.departmentkey,'1'),isnull(d.DepartmentNumber,'000') ,
'internal proforma','Medical Affairs','125','1'
from FactTransaction f 
left join DimDepartment d on d.departmentkey = f.departmentkey 
where 
(
((d.departmentnumber in ('304','305','305','306','307','308','309') or 
d.departmentnumber like '31%' or 
d.departmentnumber like '32%' or 
d.departmentnumber like '33%' or 
d.departmentnumber like '34%' or 
d.departmentnumber like '35%' or 
d.departmentnumber like '36%' or 
d.departmentnumber like '37%' or 
d.departmentnumber like '38%' or 
d.departmentnumber like '39%') and d.departmentnumber <> '398' and d.departmentnumber <> '399')

 and (left(AccountString,4) <> '5018'
      and (left(AccountString,1) <> '9'
	  or left(AccountString,4) = '9806'))
 )



 insert into  [dbo].[PL_Crosswalk_akcea] 
 select distinct '731999','Total Controllable (excl. COGS)',left(AccountString,4),f.accountkey
 ,isnull(d.departmentkey,'1'),isnull(d.DepartmentNumber,'000') ,
'internal proforma','Commercial','126','1'
from FactTransaction f 
left join DimDepartment d on d.departmentkey = f.departmentkey 
where 
(
((d.departmentnumber like '40%'
or d.departmentnumber like '41%'
or d.departmentnumber like '42%'
or d.departmentnumber like '43%'
or d.departmentnumber like '44%'
or d.departmentnumber like '45%'
or d.departmentnumber like '46%'
or d.departmentnumber like '47%'
or d.departmentnumber like '48%'
or d.departmentnumber like '49%'
or d.departmentnumber = '512')
and  d.departmentnumber <> '499'
 )
 and (left(AccountString,4) <> '5018'
      and (left(AccountString,1) <> '9'
	  or left(AccountString,4) = '9806'))
	  
and  d.departmentnumber <> '499'
)




 insert into  [dbo].[PL_Crosswalk_akcea] 
 select distinct '731999','Total Controllable (excl. COGS)',left(AccountString,4),f.accountkey
 ,isnull(d.departmentkey,'1'),isnull(d.DepartmentNumber,'000') ,
'internal proforma','SG&A','127','1'
from FactTransaction f 
left join DimDepartment d on d.departmentkey = f.departmentkey 
where 
(
(d.departmentnumber like '5%'
and d.departmentnumber <> '512'
 )
 
 and (left(AccountString,4) <> '5018'
      and (left(AccountString,1) <> '9'
	  or left(AccountString,4) = '9806'))
)


delete from  [dbo].[PL_Crosswalk_akcea] 
where plorder = '128'

 insert into  [dbo].[PL_Crosswalk_akcea] 
 select distinct '731999','Total Controllable (excl. COGS)',left(AccountString,4),f.accountkey
 ,isnull(d.departmentkey,'1'),isnull(d.DepartmentNumber,'000') ,
'internal proforma','Corporate Expenes	','128','1'
from FactTransaction f 
left join DimDepartment d on d.departmentkey = f.departmentkey 
where 
(
(d.departmentnumber in ('901','902','903','904','905','906','907','908','909','930','931','932','933','934','935')
or d.departmentnumber like '91%'
or d.departmentnumber like '92%')
or (
 left(accountstring ,1) = '9'
or left(accountstring ,4) = '5018'
and left(accountstring ,4) <> '9806'
 )
)
delete from [PL_Crosswalk_akcea] where plorder = 128 and mainaccount in ( '9806','9941','9942','9110','9110','9120')



delete from [PL_Crosswalk_akcea] where mainaccount = '3506'  or  mainaccount =  '4901'
or mainAccount = '9805'

delete from PL_Crosswalk_AKCEA where mainaccount in ('4900' ,'4901','4902','4903','4910','4911','4912','4920'
,'4922','4923','4930','4931','4932','4933','4934','4935','4940','4941','4942','4945','4946','4947'
,'4950','4953','4954','4955','4960','8013','8014','8015','9107','9110','9119','9120','9941','9942')
and plorder >= 121
and plorder <= 132

delete from PL_Crosswalk_akcea
where plorder = 136

insert into [dbo].[PL_Crosswalk_akcea] 
select totalingAccount,TotalingAccountDescription,MainAccount
,accountKey,DepartmentKey,DepartmentNumber,'internal proforma','Total Operating Expenses',136
,1 from PL_Crosswalk_akcea
where plorder >= 121
and  plorder <= 132

delete from PL_Crosswalk_akcea
where plorder = 138

insert into [dbo].[PL_Crosswalk_akcea] 
select totalingAccount,TotalingAccountDescription,MainAccount
,accountKey,DepartmentKey,DepartmentNumber,'internal proforma','Income (Loss) from Operations',138
,case when plorder = 136 then -1 else 1 end from PL_Crosswalk_akcea
where (plorder = 118
or plorder = 136)


delete from  [dbo].[PL_Crosswalk_akcea] 
where plgroup = 'Net income (loss) attributable to common stockholders' and pltype in ('Internal ProForma')

 insert into  [dbo].[PL_Crosswalk_akcea] 
select '400000','Total Net Income (Loss)',mainaccount,accountkey,departmentkey,departmentnumber
,'Internal ProForma','Net income (loss) attributable to common stockholders',150,
case when plgroup = 'Total Income Tax Benefit (Expense)' then factor*-1 else factor end 
from  [dbo].[PL_Crosswalk_akcea] 
where plorder >= 138
and plorder <= 146

delete from  [dbo].[PL_Crosswalk_akcea] 
where plgroup = 'Net income (Loss)' and pltype in ('Internal ProForma')

 insert into  [dbo].[PL_Crosswalk_akcea] 
select '400000','Total Net Income (Loss)',mainaccount,accountkey,departmentkey,departmentnumber
,'Internal ProForma','Net income (Loss)',148,
case when plgroup = 'Total Income Tax Benefit (Expense)' then factor*-1 else factor end 
from  [dbo].[PL_Crosswalk_akcea] 
where plorder >= 138
and plorder <= 146




delete from [PL_Crosswalk_akcea] where mainaccount = '3506'  or  mainaccount =  '4901'
or mainAccount = '9805'

delete from PL_Crosswalk_AKCEA where mainaccount in ('4900' ,'4901','4902','4903','4910','4911','4912','4920'
,'4922','4923','4930','4931','4932','4933','4934','4935','4940','4941','4942','4945','4946','4947'
,'4950','4953','4954','4955','4960','8013','8014','8015','9107','9110','9119','9120','9941','9942')
and plorder >= 121
and plorder <= 132
GO
PRINT N'Creating [dbo].[spTotalAccountsCheck]...';


GO
CREATE proc [dbo].[spTotalAccountsCheck] as DECLARE @Level1 VARCHAR(20) 

TRUNCATE TABLE TotalingAccountExplosion
INSERT INTO TotalingAccountExplosion
SELECT *  FROM [dbo].[vwTotalingAccountExplosion]

DECLARE @Level2 VARCHAR(20) 
DECLARE @Level3 VARCHAR(20) 
DECLARE @Level4 VARCHAR(20) 
DECLARE @Level5 VARCHAR(20) 
DECLARE @Level6 VARCHAR(20) 
DECLARE @Level7 VARCHAR(20) 
DECLARE @Level8 VARCHAR(20) 
DECLARE @Level9 VARCHAR(20) 
DECLARE @Level10 VARCHAR(20) 

DECLARE Level1 CURSOR FOR 

  SELECT distinct [Level1]
  FROM ionisdw.[dbo].[StageLevelExplosion]
	where type = 'insert'

OPEN Level1  
FETCH NEXT FROM Level1 INTO @Level1  

WHILE @@FETCH_STATUS = 0  
BEGIN  

set @Level2 = (select top 1 level2 from [dbo].[StageLevelExplosion] where type = 'insert' and level1 = @Level1)
set @Level3 = (select top 1 level3 from [dbo].[StageLevelExplosion] where type = 'insert' and level1 = @Level1)
set @Level4 = (select top 1 level4 from [dbo].[StageLevelExplosion] where type = 'insert' and level1 = @Level1)
set @Level5 = (select top 1 level5 from [dbo].[StageLevelExplosion] where type = 'insert' and level1 = @Level1)
set @Level6 = (select top 1 level6 from [dbo].[StageLevelExplosion] where type = 'insert' and level1 = @Level1)
set @Level7 = (select top 1 level7 from [dbo].[StageLevelExplosion] where type = 'insert' and level1 = @Level1)
set @Level8 = (select top 1 level8 from [dbo].[StageLevelExplosion] where type = 'insert' and level1 = @Level1)
set @Level9 = (select top 1 level9 from [dbo].[StageLevelExplosion] where type = 'insert' and level1 = @Level1)
set @Level10 = (select top 1 level10 from [dbo].[StageLevelExplosion] where type = 'insert' and level1 = @Level1)

		insert into [dbo].[StageLevelExplosion] (
		level1,
		level2,
		level3,
		level4,
		level5,
		level6,
		level7,
		level8,
		level9,
		level10
		,[Level1vLevel2]
      ,[Level1vLevel3]
      ,[Level1vLevel4]
      ,[Level1vLevel5]
      ,[Level1vLevel6]
      ,[Level1vLevel7]
      ,[Level1vLevel8]
      ,[Level1vLevel9]
      ,[Level1vLevel10]
      ,[Level2vLevel3]
      ,[Level2vLevel4]
      ,[Level2vLevel5]
      ,[Level2vLevel6]
      ,[Level2vLevel7]
      ,[Level2vLevel8]
      ,[Level2vLevel9]
      ,[Level2vLevel10]
      ,[Level3vLevel4]
      ,[Level3vLevel5]
      ,[Level3vLevel6]
      ,[Level3vLevel7]
      ,[Level3vLevel8]
      ,[Level3vLevel9]
      ,[Level3vLevel10]
      ,[Level4vLevel5]
      ,[Level4vLevel6]
      ,[Level4vLevel7]
      ,[Level4vLevel8]
      ,[Level4vLevel9]
      ,[Level4vLevel10]
      ,[Level5vLevel6]
      ,[Level5vLevel7]
      ,[Level5vLevel8]
      ,[Level5vLevel9]
      ,[Level5vLevel10]
      ,[Level6vLevel7]
      ,[Level6vLevel8]
      ,[Level6vLevel9]
      ,[Level6vLevel10]
      ,[Level7vLevel8]
      ,[Level7vLevel9]
      ,[Level7vLevel10]
      ,[Level8vLevel9]
      ,[Level8vLevel10]
      ,[Level9vLevel10]
      ,[Type])


   select level1,level2,level3,level4,level5,level6,level7,level8,level9,level10,
   (select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level1 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level2 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e) lvl1v2,

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level1 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level3 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level1 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level4 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level1 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level5 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level1 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level6 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level1 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level7 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level1 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level8 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level1 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level9 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level1 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level10 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level2 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level3 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level2 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level4 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level2 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level5 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level2 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level6 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level2 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level7 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level2 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level8 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level2 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level9 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level2 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level10 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level3 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level4 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level3 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level5 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level3 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level6 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level3 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level7 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level3 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level8 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level3 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level9 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level3 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level10 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level4 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level5 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level4 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level6 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level4 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level7 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level4 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level8 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level4 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level9 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level4 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level10 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level5 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level6 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level5 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level7 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level5 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level8 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level5 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level9 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level5 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level10 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level6 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level7 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level6 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level8 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level6 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level9 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level6 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level10 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level7 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level8 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level7 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level9 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level7 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level10 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level8 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level9 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level8 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level10 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e),

	(select count(*) from (
	  SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @Level9 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4
		
	except 

	SELECT [COMPONENTMAINACCOUNTID]
	  FROM [dbo].[TotalingAccountExplosion]
			where @level10 = TOTALINGMAINACCOUNTID
			and len([COMPONENTMAINACCOUNTID]) = 4) e)
			,'Check'


		from [dbo].[StageLevelExplosion]
			where @Level1 = level1
			and type = 'insert'

      FETCH NEXT FROM Level1 INTO @Level1 
END 

CLOSE Level1  
DEALLOCATE Level1
GO
PRINT N'Creating [dbo].[spTotalingAccountExplosion]...';


GO

CREATE proc [dbo].[spTotalingAccountExplosion] 
as 



select [TOTALINGMAINACCOUNTID]
		,COMPONENTMAINACCOUNTID
		,AccountCount
		,level
	into #tempNew
	from(
SELECT DISTINCT vw.[TOTALINGMAINACCOUNTID]
	,COMPONENTMAINACCOUNTID
	,AccountCount
	,DENSE_RANK() OVER (
		PARTITION BY COMPONENTMAINACCOUNTID ORDER BY AccountCount,vw.[TOTALINGMAINACCOUNTID]
		) Level
FROM [dbo].[vwtotalingAccountExplosion] vw
JOIN (
	SELECT count(*) AccountCount
		,[TOTALINGMAINACCOUNTID]
	FROM (
		SELECT DISTINCT [TOTALINGMAINACCOUNTID]
			,COMPONENTMAINACCOUNTID
		FROM [dbo].[vwtotalingAccountExplosion]
		WHERE len(COMPONENTMAINACCOUNTID) = 4
		) DistinctAccounts
	GROUP BY [TOTALINGMAINACCOUNTID]
	) Counts ON counts.[TOTALINGMAINACCOUNTID] = vw.[TOTALINGMAINACCOUNTID]
WHERE len(COMPONENTMAINACCOUNTID) = 4

		)z


select * into #Temphold from(
select distinct * from (
		select * from #tempNew

		)z)z


select [TOTALINGMAINACCOUNTID]
		,COMPONENTMAINACCOUNTID
		,AccountCount
		,level
	Into #level1
	from #TempHold
		where level = 1



select [TOTALINGMAINACCOUNTID]
		,COMPONENTMAINACCOUNTID
		,AccountCount
		,level
	Into #level2
	from(select * from #TempHold
		)z
		where level = 2


select [TOTALINGMAINACCOUNTID]
		,COMPONENTMAINACCOUNTID
		,AccountCount
		,level
	Into #level3
	from(select * from #TempHold
		)z
		where level = 3

		
select [TOTALINGMAINACCOUNTID]
		,COMPONENTMAINACCOUNTID
		,AccountCount
		,level
	Into #level4
	from(select * from #TempHold
		)z
		where level = 4

		select [TOTALINGMAINACCOUNTID]
		,COMPONENTMAINACCOUNTID
		,AccountCount
		,level
	Into #level5
	from(select * from #TempHold
		)z
		where level = 5

		select [TOTALINGMAINACCOUNTID]
		,COMPONENTMAINACCOUNTID
		,AccountCount
		,level
	Into #level6
	from(select * from #TempHold
		)z
		where level = 6

		select [TOTALINGMAINACCOUNTID]
		,COMPONENTMAINACCOUNTID
		,AccountCount
		,level
	Into #level7
	from(select * from #TempHold
		)z
		where level = 7

		select [TOTALINGMAINACCOUNTID]
		,COMPONENTMAINACCOUNTID
		,AccountCount
		,level
	Into #level8
	from(select * from #TempHold
		)z
		where level = 8

		select [TOTALINGMAINACCOUNTID]
		,COMPONENTMAINACCOUNTID
		,AccountCount
		,level
	Into #level9
	from(select * from #TempHold
		)z
		where level = 9

		select [TOTALINGMAINACCOUNTID]
		,COMPONENTMAINACCOUNTID
		,AccountCount
		,level
	Into #level10
	from(select * from #TempHold
		)z
		where level = 10


truncate table StageLevelExplosion

insert into StageLevelExplosion(Level1,
			Level2,
			Level3,
			Level4,
			Level5,
			Level6,
			Level7,
			Level8,
			Level9,
			Level10,
			Type)
select distinct lvl1.TOTALINGMAINACCOUNTID Level1
			,lvl2.TOTALINGMAINACCOUNTID Level1
			,lvl3.TOTALINGMAINACCOUNTID Level1
			,lvl4.TOTALINGMAINACCOUNTID Level1
			,lvl5.TOTALINGMAINACCOUNTID Level1
			,lvl6.TOTALINGMAINACCOUNTID Level1
			,lvl7.TOTALINGMAINACCOUNTID Level1
			,lvl8.TOTALINGMAINACCOUNTID Level1
			,lvl9.TOTALINGMAINACCOUNTID Level1
			,lvl10.TOTALINGMAINACCOUNTID Level1
		--,case when lvl2.TOTALINGMAINACCOUNTID = lvl1.TOTALINGMAINACCOUNTID
		--	then null else lvl2.TOTALINGMAINACCOUNTID end  Level2
		--,case when lvl3.TOTALINGMAINACCOUNTID = lvl2.TOTALINGMAINACCOUNTID 
		--	then null 
		--	when lvl3.TOTALINGMAINACCOUNTID = lvl1.TOTALINGMAINACCOUNTID 
		--		then null 
		--			else lvl3.TOTALINGMAINACCOUNTID end Level3
		--,case when lvl4.TOTALINGMAINACCOUNTID = lvl3.TOTALINGMAINACCOUNTID 
		--		then null
		--	when lvl4.TOTALINGMAINACCOUNTID = lvl2.TOTALINGMAINACCOUNTID 
		--		then null 
		--	when lvl4.TOTALINGMAINACCOUNTID = lvl1.TOTALINGMAINACCOUNTID 
		--		then null else lvl4.TOTALINGMAINACCOUNTID end Level4
		--,case when lvl5.TOTALINGMAINACCOUNTID = lvl4.TOTALINGMAINACCOUNTID 
		--		then null
		--when lvl5.TOTALINGMAINACCOUNTID = lvl3.TOTALINGMAINACCOUNTID 
		--		then null
		--	when lvl5.TOTALINGMAINACCOUNTID = lvl2.TOTALINGMAINACCOUNTID 
		--		then null 
		--	when lvl5.TOTALINGMAINACCOUNTID = lvl1.TOTALINGMAINACCOUNTID 
		--		then null else lvl5.TOTALINGMAINACCOUNTID end Level5
		--,case when lvl6.TOTALINGMAINACCOUNTID = lvl5.TOTALINGMAINACCOUNTID 
		--		then null
		--when lvl6.TOTALINGMAINACCOUNTID = lvl4.TOTALINGMAINACCOUNTID 
		--		then null
		--when lvl6.TOTALINGMAINACCOUNTID = lvl3.TOTALINGMAINACCOUNTID 
		--		then null
		--	when lvl6.TOTALINGMAINACCOUNTID = lvl2.TOTALINGMAINACCOUNTID 
		--		then null 
		--	when lvl6.TOTALINGMAINACCOUNTID = lvl1.TOTALINGMAINACCOUNTID 
		--		then null else lvl6.TOTALINGMAINACCOUNTID end Level6
		--,case when lvl7.TOTALINGMAINACCOUNTID = lvl6.TOTALINGMAINACCOUNTID 
		--		then null
		--when lvl7.TOTALINGMAINACCOUNTID = lvl5.TOTALINGMAINACCOUNTID 
		--		then null
		--when lvl7.TOTALINGMAINACCOUNTID = lvl4.TOTALINGMAINACCOUNTID 
		--		then null
		--when lvl7.TOTALINGMAINACCOUNTID = lvl3.TOTALINGMAINACCOUNTID 
		--		then null
		--	when lvl7.TOTALINGMAINACCOUNTID = lvl2.TOTALINGMAINACCOUNTID 
		--		then null 
		--	when lvl7.TOTALINGMAINACCOUNTID = lvl1.TOTALINGMAINACCOUNTID 
		--		then null else lvl7.TOTALINGMAINACCOUNTID end Level7
		--,case when lvl8.TOTALINGMAINACCOUNTID = lvl7.TOTALINGMAINACCOUNTID 
		--		then null
		--when lvl8.TOTALINGMAINACCOUNTID = lvl6.TOTALINGMAINACCOUNTID 
		--		then null
		--when lvl8.TOTALINGMAINACCOUNTID = lvl5.TOTALINGMAINACCOUNTID 
		--		then null
		--when lvl8.TOTALINGMAINACCOUNTID = lvl4.TOTALINGMAINACCOUNTID 
		--		then null
		--when lvl8.TOTALINGMAINACCOUNTID = lvl3.TOTALINGMAINACCOUNTID 
		--		then null
		--	when lvl8.TOTALINGMAINACCOUNTID = lvl2.TOTALINGMAINACCOUNTID 
		--		then null 
		--	when lvl8.TOTALINGMAINACCOUNTID = lvl1.TOTALINGMAINACCOUNTID 
		--		then null else lvl8.TOTALINGMAINACCOUNTID end Level8
		--,case when lvl9.TOTALINGMAINACCOUNTID = lvl8.TOTALINGMAINACCOUNTID 
		--		then null
		--when lvl9.TOTALINGMAINACCOUNTID = lvl7.TOTALINGMAINACCOUNTID 
		--		then null
		--when lvl9.TOTALINGMAINACCOUNTID = lvl6.TOTALINGMAINACCOUNTID 
		--		then null
		--when lvl9.TOTALINGMAINACCOUNTID = lvl5.TOTALINGMAINACCOUNTID 
		--		then null
		--when lvl9.TOTALINGMAINACCOUNTID = lvl4.TOTALINGMAINACCOUNTID 
		--		then null
		--when lvl9.TOTALINGMAINACCOUNTID = lvl3.TOTALINGMAINACCOUNTID 
		--		then null
		--	when lvl9.TOTALINGMAINACCOUNTID = lvl2.TOTALINGMAINACCOUNTID 
		--		then null 
		--	when lvl9.TOTALINGMAINACCOUNTID = lvl1.TOTALINGMAINACCOUNTID 
		--		then null else lvl9.TOTALINGMAINACCOUNTID end Level9
		--,case when lvl10.TOTALINGMAINACCOUNTID = lvl9.TOTALINGMAINACCOUNTID 
		--		then null
		--when lvl10.TOTALINGMAINACCOUNTID = lvl8.TOTALINGMAINACCOUNTID 
		--		then null
		--when lvl10.TOTALINGMAINACCOUNTID = lvl7.TOTALINGMAINACCOUNTID 
		--		then null
		--when lvl10.TOTALINGMAINACCOUNTID = lvl6.TOTALINGMAINACCOUNTID 
		--		then null
		--when lvl10.TOTALINGMAINACCOUNTID = lvl5.TOTALINGMAINACCOUNTID 
		--		then null
		--when lvl10.TOTALINGMAINACCOUNTID = lvl4.TOTALINGMAINACCOUNTID 
		--		then null
		--when lvl10.TOTALINGMAINACCOUNTID = lvl3.TOTALINGMAINACCOUNTID 
		--		then null
		--	when lvl10.TOTALINGMAINACCOUNTID = lvl2.TOTALINGMAINACCOUNTID 
		--		then null 
		--	when lvl10.TOTALINGMAINACCOUNTID = lvl1.TOTALINGMAINACCOUNTID 
		--		then null else lvl10.TOTALINGMAINACCOUNTID end Level10
		,'Insert'
			--Into StageLevelExplosion
 from #level1 lvl1
	left join #level2 lvl2 on lvl1.COMPONENTMAINACCOUNTID = lvl2.COMPONENTMAINACCOUNTID
	left join #level3 lvl3 on lvl1.COMPONENTMAINACCOUNTID = lvl3.COMPONENTMAINACCOUNTID 
	left join #level4 lvl4 on lvl1.COMPONENTMAINACCOUNTID = lvl4.COMPONENTMAINACCOUNTID 
	left join #level5 lvl5 on lvl1.COMPONENTMAINACCOUNTID = lvl5.COMPONENTMAINACCOUNTID 
	left join #level6 lvl6 on lvl1.COMPONENTMAINACCOUNTID = lvl6.COMPONENTMAINACCOUNTID 
	left join #level7 lvl7 on lvl1.COMPONENTMAINACCOUNTID = lvl7.COMPONENTMAINACCOUNTID 
	left join #level8 lvl8 on lvl1.COMPONENTMAINACCOUNTID = lvl8.COMPONENTMAINACCOUNTID 
	left join #level9 lvl9 on lvl1.COMPONENTMAINACCOUNTID = lvl9.COMPONENTMAINACCOUNTID 
	left join #level10 lvl10 on lvl1.COMPONENTMAINACCOUNTID = lvl10.COMPONENTMAINACCOUNTID 
/*	
--truncate table StageTotalingAccountsOld
--insert into StageTotalingAccountsOld	
select distinct [TOTALINGMAINACCOUNTID]
		,COMPONENTMAINACCOUNTID
		,AccountCount
		,level
	from(
SELECT DISTINCT vw.[TOTALINGMAINACCOUNTID]
	,COMPONENTMAINACCOUNTID
	,AccountCount
	,DENSE_RANK() OVER (
		PARTITION BY COMPONENTMAINACCOUNTID ORDER BY AccountCount,vw.[TOTALINGMAINACCOUNTID]
		) Level
FROM [dbo].[vwtotalingAccountExplosion] vw
JOIN (
	SELECT count(*) AccountCount
		,[TOTALINGMAINACCOUNTID]
	FROM (
		SELECT DISTINCT [TOTALINGMAINACCOUNTID]
			,COMPONENTMAINACCOUNTID
		FROM [dbo].[vwtotalingAccountExplosion]
		WHERE len(COMPONENTMAINACCOUNTID) = 4
		) DistinctAccounts
	GROUP BY [TOTALINGMAINACCOUNTID]
	) Counts ON counts.[TOTALINGMAINACCOUNTID] = vw.[TOTALINGMAINACCOUNTID]
WHERE len(COMPONENTMAINACCOUNTID) = 4

		)z
		
*/


drop table #level1
drop table #level2
drop table #level3
drop table #level4
drop table #level5
drop table #level6
drop table #level7
drop table #level8
drop table #level9
drop table #level10
drop table #TempHold
drop table #tempNew
GO
PRINT N'Creating [dbo].[spTotalingAccountInsert]...';


GO
--/****** Object:  StoredProcedure [dbo].[spTotalingAccountInsert]    Script Date: 7/14/2020 1:18:32 PM ******/
--SET ANSI_NULLS ON
--GO

--SET QUOTED_IDENTIFIER ON
--GO

CREATE Proc [dbo].[spTotalingAccountInsert] as

select * into #tempLevels from (
SELECT level1
	,CASE 
		WHEN Level1vLevel2 = 0
			THEN level2
		END Level2
	,CASE 
		WHEN level2 < level3
			AND level1vlevel3 = 0
			AND level2vlevel3 = 0
			THEN level3
		END Level3
	,NULL Level4
	,null Level5
from [StageLevelExplosion]
WHERE type = 'check'
	AND level4 IS NULL
	AND level5 IS NULL
	AND level6 IS NULL
	AND level7 IS NULL
	AND level8 IS NULL
	AND level9 IS NULL
	AND level10 IS NULL

UNION

select level1,case when lvl2>level1 then lvl2 end 
,case when case when lvl2>level1 then lvl2 end  is not null and lvl3 > case when lvl2>level1 then lvl2 end  then lvl3 end
,case when case when case when lvl2>level1 then lvl2 end  is not null and lvl3 > case when lvl2>level1 then lvl2 end  then lvl3 end is not null then lvl4 end
	,null
from(
SELECT level1
	,CASE 
		WHEN Level1vLevel2 = 0
			THEN level2
		END lvl2
	,CASE 
		WHEN level2 < level3
			AND level1vlevel3 = 0
			AND level2vlevel3 = 0
			THEN level3
		END lvl3
	,CASE 
		WHEN level3 < level4
			AND level1vlevel4 = 0
			AND level2vlevel4 = 0
			AND level3vlevel4 = 0
			THEN level4
		END lvl4
FROM [dbo].[StageLevelExplosion]
WHERE type = 'check'
	AND level4 IS NOT NULL
	AND level5 IS NULL
	AND level6 IS NULL
	AND level7 IS NULL
	AND level8 IS NULL
	AND level9 IS NULL
	AND level10 IS NULL)z

UNION

select level1,lvl2,lvl3,
case when lvl3 is not null and lvl4=lvl3 and lvl5>lvl3 then lvl5
	when lvl3 is not null and lvl4 is null and lvl5>lvl3  then lvl5 else lvl4 end lvl4
	,null
from(
SELECT level1
	,lvl2
	,CASE 
		WHEN lvl3 IS NULL
			AND lvl4 IS NOT NULL
			AND lvl4 > lvl2
			THEN lvl4
		WHEN lvl3 IS NULL
			AND lvl4 IS NULL
			AND lvl5 > lvl2
			THEN lvl5
		ELSE lvl3
		END lvl3
		,lvl4
		,lvl5
FROM (
	SELECT level1
		,CASE 
			WHEN Level1vLevel2 = 0
				THEN level2
			END Lvl2
		,CASE 
			WHEN level2 < level3
				AND level1vlevel3 = 0
				AND level2vlevel3 = 0
				THEN level3
			END Lvl3
		,CASE 
			WHEN level3 < level4
				AND level1vlevel4 = 0
				AND level2vlevel4 = 0
				AND level3vlevel4 = 0
				THEN level4
			END Lvl4
		,CASE 
			WHEN level4 < level5
				AND level1vlevel5 = 0
				AND level2vlevel5 = 0
				AND level3vlevel5 = 0
				AND level4vlevel5 = 0
				THEN level5
			END lvl5
	FROM [dbo].[StageLevelExplosion]
	WHERE type = 'check'
		AND level4 IS NOT NULL
		AND level5 IS NOT NULL
		AND level6 IS NULL
		AND level7 IS NULL
		AND level8 IS NULL
		AND level9 IS NULL
		AND level10 IS NULL
	) z)z


union

select level1,lvl2,case when lvl3 is null and lvl4 is null and lvl5 is null and lvl6 >lvl2 then lvl6 
						when lvl3 is null and lvl4 is null and lvl5 >lvl2 then lvl5 
						when lvl3 is null and lvl4 > lvl2 then lvl4 else lvl3 end
		,null
	,null
from(
SELECT level1
		,CASE 
			WHEN Level1vLevel2 = 0
				THEN level2
			END Lvl2
		,CASE 
			WHEN level2 < level3
				AND level1vlevel3 = 0
				AND level2vlevel3 = 0
				THEN level3
			END Lvl3
		,CASE 
			WHEN level3 < level4
				AND level1vlevel4 = 0
				AND level2vlevel4 = 0
				AND level3vlevel4 = 0
				THEN level4
			END Lvl4
		,CASE 
			WHEN level4 < level5
				AND level1vlevel5 = 0
				AND level2vlevel5 = 0
				AND level3vlevel5 = 0
				AND level4vlevel5 = 0
				THEN level5
			END lvl5
		,CASE 
			WHEN level5 < level6
				AND level1vlevel6 = 0
				AND level2vlevel6 = 0
				AND level3vlevel6 = 0
				AND level4vlevel6 = 0
				AND level5vlevel6 = 0
				THEN level6 end lvl6
	FROM [dbo].[StageLevelExplosion]
	WHERE type = 'check'
		AND level4 IS NOT NULL
		AND level5 IS NOT NULL
		AND level6 IS not NULL
		AND level7 IS NULL
		AND level8 IS NULL
		AND level9 IS NULL
		AND level10 IS NULL)z

		union 

	select level1,lvl2,lvl3,null
	,null from(
SELECT level1
		,CASE 
			WHEN Level1vLevel2 = 0
				THEN level2
			END Lvl2
		,CASE 
			WHEN level2 < level3
				AND level1vlevel3 = 0
				AND level2vlevel3 = 0
				THEN level3
			END Lvl3
		,CASE 
			WHEN level3 < level4
				AND level1vlevel4 = 0
				AND level2vlevel4 = 0
				AND level3vlevel4 = 0
				THEN level4
			END Lvl4
		,CASE 
			WHEN level4 < level5
				AND level1vlevel5 = 0
				AND level2vlevel5 = 0
				AND level3vlevel5 = 0
				AND level4vlevel5 = 0
				THEN level5
			END lvl5
		,CASE 
			WHEN level5 < level6
				AND level1vlevel6 = 0
				AND level2vlevel6 = 0
				AND level3vlevel6 = 0
				AND level4vlevel6 = 0
				AND level5vlevel6 = 0
				THEN level6 end lvl6
		,CASE 
			WHEN level6 < level7
				AND level1vlevel7 = 0
				AND level2vlevel7 = 0
				AND level3vlevel7 = 0
				AND level4vlevel7 = 0
				AND level5vlevel7 = 0
				AND level6vlevel7 = 0
				THEN level6 end lvl7
	FROM [dbo].[StageLevelExplosion]
	WHERE type = 'check'
		AND level4 IS NOT NULL
		AND level5 IS NOT NULL
		AND level6 IS not NULL
		AND level7 IS not NULL
		AND level8 IS NULL
		AND level9 IS NULL
		AND level10 IS NULL)z


		union 

		select level1,lvl2,case when lvl3 is null and lvl4 is not null then lvl4 else lvl3 end ,
		case when lvl4 != case when lvl3 is null and lvl4 is not null then lvl4 else lvl3 end then lvl4 end 
	,null from(
		SELECT level1
		,CASE 
			WHEN Level1vLevel2 = 0
				THEN level2
			END Lvl2
		,CASE 
			WHEN level2 < level3
				AND level1vlevel3 = 0
				AND level2vlevel3 = 0
				THEN level3
			END Lvl3
		,CASE 
			WHEN level3 < level4
				AND level1vlevel4 = 0
				AND level2vlevel4 = 0
				AND level3vlevel4 = 0
				THEN level4
			END Lvl4
		,CASE 
			WHEN level4 < level5
				AND level1vlevel5 = 0
				AND level2vlevel5 = 0
				AND level3vlevel5 = 0
				AND level4vlevel5 = 0
				THEN level5
			END lvl5
		,CASE 
			WHEN level5 < level6
				AND level1vlevel6 = 0
				AND level2vlevel6 = 0
				AND level3vlevel6 = 0
				AND level4vlevel6 = 0
				AND level5vlevel6 = 0
				THEN level6 end lvl6
		,CASE 
			WHEN level6 < level7
				AND level1vlevel7 = 0
				AND level2vlevel7 = 0
				AND level3vlevel7 = 0
				AND level4vlevel7 = 0
				AND level5vlevel7 = 0
				AND level6vlevel7 = 0
				THEN level6 end lvl7
			,CASE 
			WHEN level7 < level8
				AND level1vlevel8 = 0
				AND level2vlevel8 = 0
				AND level3vlevel8 = 0
				AND level4vlevel8 = 0
				AND level5vlevel8 = 0
				AND level6vlevel8 = 0
				THEN level8 end lvl8
	FROM [dbo].[StageLevelExplosion]
	WHERE type = 'check'
		AND level4 IS NOT NULL
		AND level5 IS NOT NULL
		AND level6 IS not NULL
		AND level7 IS not NULL
		AND level8 IS not NULL
		AND level9 IS NULL
		AND level10 IS NULL)z


	union 

	select level1,lvl2,lvl3,lvl4,lvl5 from(
		SELECT level1
		,CASE 
			WHEN Level1vLevel2 = 0
				THEN level2
			END Lvl2
		,CASE 
			WHEN level2 < level3
				AND level1vlevel3 = 0
				AND level2vlevel3 = 0
				THEN level3
			END Lvl3
		,CASE 
			WHEN level3 < level4
				AND level1vlevel4 = 0
				AND level2vlevel4 = 0
				AND level3vlevel4 = 0
				THEN level4
			END Lvl4
		,CASE 
			WHEN level4 < level5
				AND level1vlevel5 = 0
				AND level2vlevel5 = 0
				AND level3vlevel5 = 0
				AND level4vlevel5 = 0
				THEN level5
			END lvl5
		,CASE 
			WHEN level5 < level6
				AND level1vlevel6 = 0
				AND level2vlevel6 = 0
				AND level3vlevel6 = 0
				AND level4vlevel6 = 0
				AND level5vlevel6 = 0
				THEN level6 end lvl6
		,CASE 
			WHEN level6 < level7
				AND level1vlevel7 = 0
				AND level2vlevel7 = 0
				AND level3vlevel7 = 0
				AND level4vlevel7 = 0
				AND level5vlevel7 = 0
				AND level6vlevel7 = 0
				THEN level7 end lvl7
			,CASE 
			WHEN level7 < level8
				AND level1vlevel8 = 0
				AND level2vlevel8 = 0
				AND level3vlevel8 = 0
				AND level4vlevel8 = 0
				AND level5vlevel8 = 0
				AND level6vlevel8 = 0
				THEN level8 end lvl8
			,CASE 
			WHEN level8 < level9
				AND level1vlevel9 = 0
				AND level2vlevel9 = 0
				AND level3vlevel9 = 0
				AND level4vlevel9 = 0
				AND level5vlevel9 = 0
				AND level6vlevel9 = 0
				AND level7vlevel9 = 0
				AND level8vlevel9 = 0
				THEN level9 end lvl9
	FROM [dbo].[StageLevelExplosion]
	WHERE type = 'check'
		AND level4 IS NOT NULL
		AND level5 IS NOT NULL
		AND level6 IS not NULL
		AND level7 IS not NULL
		AND level8 IS not NULL
		AND level9 IS not NULL
		AND level10 IS NULL)z)z


	insert into TotalingAccountTree
		
select LeafAccount,Level1,Level2,Level3,Level4,Level5 from(
	 select distinct 
		FROMVALUE LeafAccount
		, levels.Level1 Level1
		,Level2
		,Level3
		,Level4
		,Level5
		, case when level5 is not null and level4 is not null and level3 is not null and level2 is not null and level1 is not null then 5	
	when level5 is  null and level4 is not null and level3 is not null and level2 is not null and level1 is not null then 4	
	when level5 is  null and level4 is  null and level3 is not null and level2 is not null and level1 is not null then 3
	when level5 is  null and level4 is  null and level3 is  null and level2 is not null and level1 is not null then 2
	when level5 is  null and level4 is  null and level3 is  null and level2 is  null and level1 is not null then 1 else 0 end ct
	from(

	select[TOTALINGMAINACCOUNTID] MainAccountID, * from  [dbo].[vwtotalingAccountExplosion]
  where
  TOVALUE = FROMVALUE
  and COMPONENTMAINACCOUNTID = TOVALUE



		)z
		join #tempLevels levels on levels.Level1 = MAINACCOUNTID
join (
	select leafaccount,max(ct)  ct
	from (
	 select distinct 
		FROMVALUE LeafAccount
		, levels.Level1 Level1
		,Level2
		,Level3
		,Level4
		,Level5
		, case when level5 is not null and level4 is not null and level3 is not null and level2 is not null and level1 is not null then 5	
	when level5 is  null and level4 is not null and level3 is not null and level2 is not null and level1 is not null then 4	
	when level5 is  null and level4 is  null and level3 is not null and level2 is not null and level1 is not null then 3
	when level5 is  null and level4 is  null and level3 is  null and level2 is not null and level1 is not null then 2
	when level5 is  null and level4 is  null and level3 is  null and level2 is  null and level1 is not null then 1 else 0 end ct
	from(

	select[TOTALINGMAINACCOUNTID] MainAccountID, * from  [dbo].[vwtotalingAccountExplosion]
  where
  TOVALUE = FROMVALUE
  and COMPONENTMAINACCOUNTID = TOVALUE


		)z
		join #tempLevels levels on levels.Level1 = MAINACCOUNTID

	)z
	group by leafaccount)a on a.ct = case when level5 is not null and level4 is not null and level3 is not null and level2 is not null and level1 is not null then 5	
	when level5 is  null and level4 is not null and level3 is not null and level2 is not null and level1 is not null then 4	
	when level5 is  null and level4 is  null and level3 is not null and level2 is not null and level1 is not null then 3
	when level5 is  null and level4 is  null and level3 is  null and level2 is not null and level1 is not null then 2
	when level5 is  null and level4 is  null and level3 is  null and level2 is  null and level1 is not null then 1 else 0 end
	and a.LeafAccount = FROMVALUE

	)z
	where LeafAccount  in (
select distinct MainAccountNumber from DimAccount
where level5 is null)
		drop table #tempLevels

		--delete from TotalingAccountTree
		--where concat(LeafAccount,level1) = (
		--select concat(LeafAccount,lvl1) from(
		--select min(level1)lvl1,t.LeafAccount from TotalingAccountTree t
		--join (
		--select count(*)ct,LeafAccount from TotalingAccountTree
		--group by LeafAccount
		--having count(*)>1) z on z.LeafAccount = t.leafaccount
		--group by t.LeafAccount )r)

	--	delete from TotalingAccountTree
	--	where level1 is null
GO
PRINT N'Creating [clinical].[TransformScenarioInput_Randomizations]...';


GO
CREATE PROCEDURE [clinical].[TransformScenarioInput_Randomizations] 
AS

DECLARE @ClinicalStudy VARCHAR(50)
DECLARE @Site NVARCHAR(256)
DECLARE @SiteID INT 
DECLARE @SitesAdded INT 
DECLARE @FirstMonth DATE 
DECLARE @MonthLoop INT 
DECLARE @NumberofMonths INT 
DECLARE @ScenarioName VARCHAR(256) 
DECLARE @PatientRunIn INT 
DECLARE @Residual NUMERIC(18,2) 
DECLARE @NumSub NUMERIC(18,2)
DECLARE @Plan NVARCHAR(256)
DECLARE @StatusDate DATETIME
DECLARE @CurrentScenarioBuilderID INT
--DECLARE @NewRandomizationRate INT
DECLARE @ActivationDate DATETIME

SET @CurrentScenarioBuilderID = (SELECT MAX(ScenarioBuilderID) FROM clinical.ScenarioBuilderInput)
--SET @NewRandomizationRate = (SELECT RandomizationRatePct FROM clinical.ScenarioBuilderInput WHERE ScenarioBuilderID = @CurrentScenarioBuilderID)
SET @ActivationDate = (SELECT DATEADD(m,DATEDIFF(m,0,ActivationDate),0) ActivationDate FROM clinical.ScenarioBuilderInput WHERE ScenarioBuilderID = @CurrentScenarioBuilderID)
SET @ClinicalStudy = (SELECT ClinicalStudy FROM clinical.ScenarioBuilderInput WHERE ScenarioBuilderID = @CurrentScenarioBuilderID)
SET @SiteID = 1
SET @SitesAdded = (SELECT NumberofSites FROM clinical.ScenarioBuilderInput WHERE ScenarioBuilderID = @CurrentScenarioBuilderID)
SET @FirstMonth = (SELECT DATEADD(m,DATEDIFF(m,0,ActivationDate),0) FROM   clinical.scenariobuilderinput WHERE  scenariobuilderid = @CurrentScenarioBuilderID) 
SET @MonthLoop = 0 
SET @NumberofMonths = (SELECT DATEDIFF(M, ActivationDate, EnrollmentCompletionDate) FROM clinical.ScenarioBuilderInput WHERE ScenarioBuilderID = @CurrentScenarioBuilderID)
SET @ScenarioName = (SELECT scenarioname FROM   clinical.scenariobuilderinput WHERE  scenariobuilderid = @CurrentScenarioBuilderID) 
SET @PatientRunIn = (SELECT patientrunin FROM   clinical.scenariobuilderinput WHERE  scenariobuilderid = @CurrentScenarioBuilderID) 
SET @Residual = 0  
SET @Plan = (SELECT BaselinePlan FROM clinical.ScenarioBuilderInput WHERE ScenarioBuilderID = @CurrentScenarioBuilderID)
SET @StatusDate = GETDATE()

DELETE FROM Clinical.ScenarioBuilderOutput WHERE [Status] = @ScenarioName

-- Loop through each site-month and insert into Recruitment Scenarios 
WHILE ( @SiteID <= @SitesAdded ) 
  BEGIN 
      WHILE ( @MonthLoop <= @NumberofMonths ) 
        BEGIN 
            SELECT @NumSub = NumberofPatients + @Residual
            FROM   clinical.scenariobuilderinput 
            WHERE  scenariobuilderid = (SELECT Max(scenariobuilderid) 
                                        FROM   clinical.scenariobuilderinput)  

            SET @Residual = @NumSub - ( @NumSub%1 ) 

          INSERT INTO Clinical.ScenarioBuilderOutput 
          SELECT 
                 Concat(Concat(@ClinicalStudy, '_'), @ScenarioName) AS ScenarioName, 
                 [Status] = @ScenarioName, 
                 StatusDate = @StatusDate, 
                 ScenarioSiteName = CONCAT('S', @SiteID), 
                 ActualSite = 0, 
                 PatientRecruitmentDate = Dateadd(MONTH, @MonthLoop, @FirstMonth), 
                 @Residual AS NumberofSubjects, 
                 ClinicalStudy = @ClinicalStudy
          FROM   clinical.scenariobuilderinput 
          WHERE  scenariobuilderid = (SELECT Max(scenariobuilderid) FROM clinical.scenariobuilderinput) 
      
          SET @MonthLoop = @Monthloop + 1
          SET @Residual = (@NumSub%1)
          SET @NumSub = 0

      END 

SET @MonthLoop = 0 
SET @SiteID = @SiteID + 1 
  
  END 



EXECUTE clinical.BaselinePlanAdjustment_Randomizations
    @ScenarioName,
    @ClinicalStudy,
    @Plan,
    --@NewRandomizationRate,
    @ActivationDate,
    @StatusDate
GO
PRINT N'Creating [clinical].[TransformScenarioInput]...';


GO
CREATE PROCEDURE [clinical].[TransformScenarioInput] 
AS

DECLARE @ClinicalStudy VARCHAR(50)
DECLARE @Site NVARCHAR(256)
DECLARE @SiteID INT 
DECLARE @SitesAdded INT 
DECLARE @FirstMonth DATE 
DECLARE @MonthLoop INT 
DECLARE @NumberofMonths INT 
DECLARE @ScenarioName VARCHAR(256) 
DECLARE @PatientRunIn INT 
DECLARE @Residual NUMERIC(18,2) 
DECLARE @NumSub NUMERIC(18,2)
DECLARE @Plan NVARCHAR(256)
DECLARE @StatusDate DATETIME
DECLARE @CurrentScenarioBuilderID INT
DECLARE @NewScreenFailRate INT
DECLARE @ActivationDate DATETIME

SET @CurrentScenarioBuilderID = (SELECT MAX(ScenarioBuilderID) FROM clinical.ScenarioBuilderInput)
SET @NewScreenFailRate = (SELECT ScreenFailRatePCT FROM clinical.ScenarioBuilderInput WHERE ScenarioBuilderID = @CurrentScenarioBuilderID)
SET @ActivationDate = (SELECT DATEADD(m,DATEDIFF(m,0,ActivationDate),0) ActivationDate FROM clinical.ScenarioBuilderInput WHERE ScenarioBuilderID = @CurrentScenarioBuilderID)
SET @ClinicalStudy = (SELECT ClinicalStudy FROM clinical.ScenarioBuilderInput WHERE ScenarioBuilderID = @CurrentScenarioBuilderID)
SET @SiteID = 1
SET @SitesAdded = (SELECT NumberofSites FROM clinical.ScenarioBuilderInput WHERE ScenarioBuilderID = @CurrentScenarioBuilderID)
SET @FirstMonth = (SELECT DATEADD(m,DATEDIFF(m,0,ActivationDate),0) FROM   clinical.scenariobuilderinput WHERE  scenariobuilderid = @CurrentScenarioBuilderID) 
SET @MonthLoop = 0 
SET @NumberofMonths = (SELECT DATEDIFF(M, ActivationDate, EnrollmentCompletionDate) FROM clinical.ScenarioBuilderInput WHERE ScenarioBuilderID = @CurrentScenarioBuilderID)
SET @ScenarioName = (SELECT scenarioname FROM clinical.scenariobuilderinput WHERE  scenariobuilderid = @CurrentScenarioBuilderID) 
SET @PatientRunIn = (SELECT patientrunin FROM clinical.scenariobuilderinput WHERE  scenariobuilderid = @CurrentScenarioBuilderID) 
SET @Residual = 0  
SET @Plan = (SELECT BaselinePlan FROM clinical.ScenarioBuilderInput WHERE ScenarioBuilderID = @CurrentScenarioBuilderID)
SET @StatusDate = GETDATE()

DELETE FROM clinical.ScenarioBuilderOutput WHERE [Status] = @ScenarioName

-- Loop through each site-month and insert into Recruitment Scenarios 
WHILE ( @SiteID <= @SitesAdded ) 
  BEGIN 
      WHILE ( @MonthLoop <= @NumberofMonths ) 
        BEGIN 
            SELECT @NumSub = (Iif(Dateadd(m, @MonthLoop, @FirstMonth) < Dateadd(week,@PatientRunIn,@FirstMonth),0, screeningspersitemonth * (1-(screenfailratepct/100))) + @Residual)
            FROM   clinical.scenariobuilderinput 
            WHERE  scenariobuilderid = (SELECT Max(scenariobuilderid) 
                                        FROM   clinical.scenariobuilderinput)  

            SET @Residual = @NumSub - ( @NumSub%1 ) 

          INSERT INTO Clinical.ScenarioBuilderOutput 
          SELECT 
                 Concat(Concat(@ClinicalStudy, '_'), @ScenarioName) AS ScenarioName, 
                 [Status] = @ScenarioName, 
                 StatusDate = @StatusDate, 
                 ScenarioSiteName = CONCAT('S', @SiteID), 
                 ActualSite = 0, 
                 PatientRecruitmentDate = Dateadd(MONTH, @MonthLoop, @FirstMonth), 
                 @Residual AS NumberofSubjects, 
                 ClinicalStudy = @ClinicalStudy
          FROM   clinical.scenariobuilderinput 
          WHERE  scenariobuilderid = (SELECT Max(scenariobuilderid) FROM clinical.scenariobuilderinput) 
      
          SET @MonthLoop = @Monthloop + 1
          SET @Residual = (@NumSub%1)
          SET @NumSub = 0

      END 

SET @MonthLoop = 0 
SET @SiteID = @SiteID + 1 
  
  END 



EXECUTE clinical.BaselinePlanAdjustment
    @ScenarioName,
    @ClinicalStudy,
    @Plan,
    @NewScreenFailRate,
    @ActivationDate,
    @StatusDate
GO
PRINT N'Creating [mdr].[sp_LoadAll]...';


GO
CREATE Procedure [mdr].[sp_LoadAll] @dbname varchar(100), @dvcount int 
as

INSERT INTO [mdr].[RSMLogit] ([RunProcess], RunCharName1, RunChar1) VALUES ('Start sp_LoadAll','DBName',@dbName)

--exec mdr.sp_LoadAll 'IonisDW',20000
--exec mdr.emptydb
--exec mdr.sp_ResetDB 'IonisDW'

EXEC mdr.sp_LoadTableInfo @dbname

EXEC mdr.sp_BuildColumnInfo @dbname

EXEC mdr.sp_LoadBIColumnInfo @dbname

EXEC mdr.sp_LoadBIDiscinctValues @dbname,@dvcount

EXEC mdr.sp_LoadForeignKeyInfo @dbname

EXEC mdr.sp_BIDependencies @dbname

EXEC mdr.sp_LoadViewInfo @dbname

EXEC [mdr].[sp_BuildViewColumnInfo] @dbname

EXEC [mdr].[sp_LoadBIViewColumnInfo] @dbname

EXEC [mdr].[LoadBIViewDiscinctValues] @dbname,@dvcount

INSERT INTO [mdr].[RSMLogit] ([RunProcess], RunCharName1, RunChar1) VALUES ('End sp_LoadAll','DBName',@dbName)
GO
PRINT N'Creating [dbo].[spTotalingAccount]...';


GO
CREATE PROC [dbo].[spTotalingAccount]
AS

Insert into mdr.RSMLogit (RunTS,RunProcess)
Values (getdate(),'spTotalingAccountExplosion')

EXEC [dbo].[spTotalingAccountExplosion]

Insert into mdr.RSMLogit (RunTS,RunProcess)
Values (getdate(),'spTotalAccountsCheck')

EXEC [dbo].[spTotalAccountsCheck]

Insert into mdr.RSMLogit (RunTS,RunProcess)
Values (getdate(),'spTotalingAccountInsert')

EXEC [dbo].[spTotalingAccountInsert]
GO
PRINT N'Creating [dbo].[spLoadFinacialModel]...';


GO


CREATE proc [dbo].[spLoadFinacialModel] as

Insert into mdr.RSMLogit (RunTS,RunProcess)
Values (getdate(),'spLoadFinacialModel Start')

Insert into mdr.RSMLogit (RunTS,RunProcess)
Values (getdate(),'spLoadDisplayValueExplosion')

exec [dbo].[spLoadDisplayValueExplosion]

Insert into mdr.RSMLogit (RunTS,RunProcess)
Values (getdate(),'spLoadOMOrganizationHierarchy')

exec [dbo].[spLoadOMOrganizationHierarchy]

Insert into mdr.RSMLogit (RunTS,RunProcess)
Values (getdate(),'spTotalingAccount')

exec spTotalingAccount

Insert into mdr.RSMLogit (RunTS,RunProcess)
Values (getdate(),'spDimAccount')

exec [dbo].[spDimAccount]

Insert into mdr.RSMLogit (RunTS,RunProcess)
Values (getdate(),'spDimFinancialCalendar')

exec [dbo].[spDimFinancialCalendar]

Insert into mdr.RSMLogit (RunTS,RunProcess)
Values (getdate(),'spDimDepartment')

exec [dbo].[spDimDepartment]

Insert into mdr.RSMLogit (RunTS,RunProcess)
Values (getdate(),'spDimHierarchy')

exec [dbo].[spDimHierarchy]

Insert into mdr.RSMLogit (RunTS,RunProcess)
Values (getdate(),'spDimProject')

exec [dbo].[spDimProject]

Insert into mdr.RSMLogit (RunTS,RunProcess)
Values (getdate(),'spDimTask')

exec [dbo].[spDimTask]

Insert into mdr.RSMLogit (RunTS,RunProcess)
Values (getdate(),'spD365SecurityMaster')

-- Reloads the Security Master. One record for each unique combination of entity an department
exec spD365SecurityMaster

Insert into mdr.RSMLogit (RunTS,RunProcess)
Values (getdate(),'spD365Security')

-- Reloads the D365 security table. A record for each Entity/Dept that a user has access to
exec spD365Security

Insert into mdr.RSMLogit (RunTS,RunProcess)
Values (getdate(),'spDimFinancialDimensions')

EXEC spDimFinancialDimensions

Insert into mdr.RSMLogit (RunTS,RunProcess)
Values (getdate(),'spFactAccountingSourceExplorer')

EXEC spFactAccountingSourceExplorer

Insert into mdr.RSMLogit (RunTS,RunProcess)
Values (getdate(),'spFactTransaction')

exec [dbo].[spFactTransaction]

Insert into mdr.RSMLogit (RunTS,RunProcess)
Values (getdate(),'spFactTransactionPL')
exec  [dbo].[spFactTransactionPL]

Insert into mdr.RSMLogit (RunTS,RunProcess)
Values (getdate(),'spPLAllocation')
exec spPLAllocation

Insert into mdr.RSMLogit (RunTS,RunProcess)
Values (getdate(),'spEmployeeHierarchy')

exec spEmployeeHierarchy

Insert into mdr.RSMLogit (RunTS,RunProcess)
Values (getdate(),'PLAllocation')

exec [dbo].[spPLAllocation]

Insert into mdr.RSMLogit (RunTS,RunProcess)
Values (getdate(),'PLCrosswalk')

exec [dbo].[spPLCrosswalk]

Insert into mdr.RSMLogit (RunTS,RunProcess)
Values (getdate(),'LoadPLStage')

exec [dbo].[sp_LoadPLStage]

Insert into mdr.RSMLogit (RunTS,RunProcess)
Values (getdate(),'spLoadFinacialModel Complete')

-- Clean up RSMLogit
DELETE FROM mdr.RSMLogit WHERE DATEDIFF(d,RunTS,GETDATE())>90
GO
PRINT N'Creating [dbo].[BYODAutomation]...';


GO


CREATE TRIGGER [dbo].[BYODAutomation]
   ON [dbo].[LedgerAccountStructureStaging]
   AFTER INSERT,UPDATE
AS 

BEGIN

	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    Insert into mdr.RSMLogit (RunTS,RunProcess)
	Values (getdate(),'Kickoff Financial Model Load')

	EXECUTE spLoadFinacialModel

	Insert into mdr.RSMLogit (RunTS,RunProcess)
	Values (getdate(),'Completed Financial Model Load')

END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '125490c8-d030-4f9b-a27d-2f00ea89f8eb')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('125490c8-d030-4f9b-a27d-2f00ea89f8eb')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '06a77b99-f7dd-49cf-b102-fe6d0b91787a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('06a77b99-f7dd-49cf-b102-fe6d0b91787a')

GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [clinical].[StudyClinicalSiteCROs] WITH CHECK CHECK CONSTRAINT [FK_StudyClinicalSiteCROs_ClinicalOrganization];

ALTER TABLE [clinical].[StudyClinicalSiteCROs] WITH CHECK CHECK CONSTRAINT [FK_StudyClinicalSiteCROs_ClinicalStudySites];

ALTER TABLE [clinical].[StudyPerformanceMetrics] WITH CHECK CHECK CONSTRAINT [FK_StudyPerformanceMetrics_ClinicalStudy];

ALTER TABLE [clinical].[SiteSubjectRecruitment] WITH CHECK CHECK CONSTRAINT [FK_SiteSubjectRecruitment_ScenarioStudySites];

ALTER TABLE [clinical].[ScenarioStudySites] WITH CHECK CHECK CONSTRAINT [FK_ScenarioStudySites_ClinicalStudySites];

ALTER TABLE [clinical].[ScenarioStudySites] WITH CHECK CHECK CONSTRAINT [FK_ScenarioStudySites_StudyRecruitment];

ALTER TABLE [clinical].[StudySiteActivation] WITH CHECK CHECK CONSTRAINT [FK_StudySiteActivation_ClinicalStudy];

ALTER TABLE [clinical].[StudySitePerformance] WITH CHECK CHECK CONSTRAINT [FK_StudySitePerformance_ClinicalStudySites];

ALTER TABLE [clinical].[ClinicalStudy] WITH CHECK CHECK CONSTRAINT [FK_ClinicalStudy_ClinicalPrograms];

ALTER TABLE [clinical].[PersonSiteRoles] WITH CHECK CHECK CONSTRAINT [FK_PersonSiteRoles_ClinicalSitePerson];

ALTER TABLE [clinical].[PersonSiteRoles] WITH CHECK CHECK CONSTRAINT [FK_PersonSiteRoles_ClinicalStudySites];

ALTER TABLE [clinical].[ClinicalStudySites] WITH CHECK CHECK CONSTRAINT [FK_ClinicalStudySites_ClinicalSite];

ALTER TABLE [clinical].[ClinicalStudySites] WITH CHECK CHECK CONSTRAINT [FK_ClinicalStudySites_ClinicalStudy];

ALTER TABLE [clinical].[ClinicalSitePerson] WITH CHECK CHECK CONSTRAINT [FK_ClinicalSitePerson_Person];

ALTER TABLE [clinical].[ClinicalStudyCohorts] WITH CHECK CHECK CONSTRAINT [FK_ClinicalStudyCohorts_ClinicalStudy];

ALTER TABLE [clinical].[StudySiteRecruitment] WITH CHECK CHECK CONSTRAINT [FK_StudySiteRecruitment_StudyRecruitment];

ALTER TABLE [clinical].[StudyRecruitment] WITH CHECK CHECK CONSTRAINT [FK_StudyRecruitment_ClinicalStudy];

ALTER TABLE [clinical].[StudyAnnotations] WITH CHECK CHECK CONSTRAINT [FK_StudyAnnotations_StudyRecruitment];

ALTER TABLE [clinical].[ScenarioParameters] WITH CHECK CHECK CONSTRAINT [FK_ScenarioParameters_StudyRecruitment];

ALTER TABLE [clinical].[RecruitmentScenarios] WITH CHECK CHECK CONSTRAINT [FK_RecruitmentScenarios_ScenarioParameters];

ALTER TABLE [clinical].[RecruitmentScenarios] WITH CHECK CHECK CONSTRAINT [FK_RecruitmentScenarios_StudyAnnotations];

ALTER TABLE [clinical].[IVRSData] WITH CHECK CHECK CONSTRAINT [FK_IVRSData_ClinicalStudySites];

ALTER TABLE [clinical].[CTMSData] WITH CHECK CHECK CONSTRAINT [FK_CTMSData_ClinicalStudyCohorts];

ALTER TABLE [clinical].[CTMSData] WITH CHECK CHECK CONSTRAINT [FK_CTMSData_ClinicalStudySites];

ALTER TABLE [clinical].[ClinicalStudyMilestones] WITH CHECK CHECK CONSTRAINT [FK_ClinicalStudyMilestones_ClinicalStudy];

ALTER TABLE [research].[CompoundNames] WITH CHECK CHECK CONSTRAINT [FK_CompoundNames_Compounds];

ALTER TABLE [shared].[LocationInfo] WITH CHECK CHECK CONSTRAINT [FK_LocationInfo_ClinicalSite];

ALTER TABLE [shared].[LocationInfo] WITH CHECK CHECK CONSTRAINT [FK_LocationInfo_Organization];

ALTER TABLE [shared].[LocationInfo] WITH CHECK CHECK CONSTRAINT [FK_LocationInfo_Person];

ALTER TABLE [shared].[PhoneNumber] WITH CHECK CHECK CONSTRAINT [FK_PhoneNumber_LocationInfo];

ALTER TABLE [shared].[EmailAddress] WITH CHECK CHECK CONSTRAINT [FK_EmailAddress_LocationInfo];

ALTER TABLE [shared].[Address] WITH CHECK CHECK CONSTRAINT [FK_Address_LocationInfo];

ALTER TABLE [shared].[Organization] WITH CHECK CHECK CONSTRAINT [FK_Organization_ClinicalOrganization];

ALTER TABLE [dbo].[BuildingAccessActivity] WITH CHECK CHECK CONSTRAINT [FK_BuildingAccessActivit_ReportId];

ALTER TABLE [dbo].[DimScenario] WITH CHECK CHECK CONSTRAINT [FK_DimScenario_DimScenarioType];

ALTER TABLE [dbo].[Employee_Snapshot] WITH CHECK CHECK CONSTRAINT [FK_EmployeeSnapshot_DimUser_UserKey];

ALTER TABLE [dbo].[FactTransaction_v2] WITH CHECK CHECK CONSTRAINT [FK_FactTransaction_v2_DimAccount];

ALTER TABLE [dbo].[FactTransaction_v2] WITH CHECK CHECK CONSTRAINT [FK_FactTransaction_v2_DimDepartment];

ALTER TABLE [dbo].[FactTransaction_v2] WITH CHECK CHECK CONSTRAINT [FK_FactTransaction_v2_DimEntity];

ALTER TABLE [dbo].[FactTransaction_v2] WITH CHECK CHECK CONSTRAINT [FK_FactTransaction_v2_DimFinancialCalendar];

ALTER TABLE [dbo].[FactTransaction_v2] WITH CHECK CHECK CONSTRAINT [FK_FactTransaction_v2_DimProject];

ALTER TABLE [dbo].[FactTransaction_v2] WITH CHECK CHECK CONSTRAINT [FK_FactTransaction_v2_DimScenario];

ALTER TABLE [dbo].[FactTransaction_v2] WITH CHECK CHECK CONSTRAINT [FK_FactTransaction_v2_DimTask];

ALTER TABLE [dbo].[PubsRecordCompound] WITH CHECK CHECK CONSTRAINT [FK_PubsRecordCompound_PubsRecord];

ALTER TABLE [dbo].[PubsRecordFranchise] WITH CHECK CHECK CONSTRAINT [FK_PubsRecordFranchise_PubsFranchise];

ALTER TABLE [dbo].[PubsRecordFranchise] WITH CHECK CHECK CONSTRAINT [FK_PubsRecordFranchise_PubsRecord];

ALTER TABLE [dbo].[PubsRecordFunctionalArea] WITH CHECK CHECK CONSTRAINT [FK_PubsRecordFunctionalArea_PubsFunctionalArea];

ALTER TABLE [dbo].[PubsRecordFunctionalArea] WITH CHECK CHECK CONSTRAINT [FK_PubsRecordFunctionalArea_PubsRecord];

ALTER TABLE [dbo].[PubsRecordIonisAuthor] WITH CHECK CHECK CONSTRAINT [FK_PubsRecordIonisAuthor_IonisAuthor];

ALTER TABLE [dbo].[PubsRecordIonisAuthor] WITH CHECK CHECK CONSTRAINT [FK_PubsRecordIonisAuthor_PubsRecord];

ALTER TABLE [dbo].[PubsRecordSubmissinContentDataType] WITH CHECK CHECK CONSTRAINT [FK_PubsRecordSubmissinContentDataType_PubsRecord];

ALTER TABLE [dbo].[PubsRecordSubmissinContentDataType] WITH CHECK CHECK CONSTRAINT [FK_PubsRecordSubmissinContentDataType_PubsSubmissionContentDataType];

ALTER TABLE [dbo].[PubsRecordTarget] WITH CHECK CHECK CONSTRAINT [FK_PubsRecordTarget_PubsRecord];

ALTER TABLE [dbo].[DimScenario] WITH CHECK CHECK CONSTRAINT [OneOfficialByType];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.mdm_compound_genes'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
